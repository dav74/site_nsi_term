{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TERMINALE NSI Cours, activit\u00e9s et exercices","title":"TERMINALE NSI"},{"location":"#terminale-nsi","text":"","title":"TERMINALE NSI"},{"location":"#cours-activites-et-exercices","text":"","title":"Cours, activit\u00e9s et exercices"},{"location":"c10a/","text":"activit\u00e9 10.1 Appliquez l'algorithme du parcours en largeur d'abord au graphe ci-dessous. Le 'point de d\u00e9part' de notre parcours sera le sommet A. Vous noterez les sommets atteints \u00e0 chaque \u00e9tape ainsi que les sommets pr\u00e9sents dans la file f. Vous pourrez aussi, \u00e0 chaque \u00e9tape, donner les changements de couleur des sommets. activit\u00e9 10.2 Appliquez l'algorithme du parcours en profondeur d'abord au graphe ci-dessous (d'abord avec l'algorithme r\u00e9cursif puis ensuite avec l'algorithme non r\u00e9cursif). Le 'point de d\u00e9part' de notre parcours sera le sommet A. Vous noterez les sommets atteints \u00e0 chaque \u00e9tape ainsi que les sommets pr\u00e9sents dans la file f. Vous pourrez aussi, \u00e0 chaque \u00e9tape, donner les changements de couleur des sommets. activit\u00e9 10.3 Appliquez l'algorithme de d\u00e9tection d'un cycle au graphe ci-dessous (vous partirez du sommet de votre choix). activit\u00e9 10.4 Appliquez l'algorithme de d\u00e9tection d'un cycle au graphe ci-dessous (vous partirez du sommet de votre choix). activit\u00e9 10.5 Appliquez l'algorithme permettant de trouver une chaine entre un noeud de d\u00e9part (start) et un noeud d'arriv\u00e9e (end) au graphe ci-dessous (vous choisirez les noeuds de d\u00e9part et d'arriv\u00e9e de votre choix). activit\u00e9 10.6 1) Soit le graphe suivant : Proposez une impl\u00e9mentation de ce graphe en Python (graphe 1 dans la suite de cette activit\u00e9) 2) Soit l'algorithme de parcours en largeur d'abord : VARIABLE G : un graphe s : noeud (origine) u : noeud v : noeud f : file (initialement vide) //On part du principe que pour tout sommet u du graphe G, u.couleur = blanc \u00e0 l'origine DEBUT s.couleur \u2190 noir enfiler (s,f) tant que f non vide : u \u2190 defiler(f) pour chaque sommet v adjacent au sommet u : si v.couleur n'est pas noir : v.couleur \u2190 noir enfiler(v,f) fin si fin pour fin tant que FIN Impl\u00e9mentez cet algorithme en Python. Vous testerez votre programme \u00e0 l'aide du graphe 1. Il faudra que votre programme fournisse la liste des sommets parcourus en partant du sommet A (il faudra \u00eatre attentif \u00e0 l'ordre des sommets dans cette liste) 3) Soit l'algorithme de parcours en profondeur d'abord (version non r\u00e9cursive): VARIABLE s : noeud (origine) G : un graphe u : noeud v : noeud p : pile (pile vide au d\u00e9part) //On part du principe que pour tout sommet u du graphe G, u.couleur = blanc \u00e0 l'origine DEBUT s.couleur \u2190 noir piler(s,p) tant que p n'est pas vide : u \u2190 depiler(p) pour chaque sommet v adjacent au sommet u : si v.couleur n'est pas noir : v.couleur \u2190 noir piler(v,p) fin si fin pour fin tant que FIN Impl\u00e9mentez cet algorithme en Python. Vous testerez votre programme \u00e0 l'aide du graphe 1. Il faudra que votre programme fournisse la liste des sommets parcourus en partant du sommet A (il faudra \u00eatre attentif \u00e0 l'ordre des sommets dans cette liste) 4) Soit l'algorithme de parcours en profondeur d'abord (version r\u00e9cursive): VARIABLE G : un graphe u : noeud v : noeud //On part du principe que pour tout sommet u du graphe G, u.couleur = blanc \u00e0 l'origine DEBUT PARCOURS-PROFONDEUR(G,u) : u.couleur \u2190 noir pour chaque sommet v adjacent au sommet u : si v.couleur n'est pas noir : PARCOURS-PROFONDEUR(G,v) fin si fin pour FIN Impl\u00e9mentez cet algorithme en Python. Vous testerez votre programme \u00e0 l'aide du graphe 1. Il faudra que votre programme fournisse la liste des sommets parcourus en partant du sommet A (il faudra \u00eatre attentif \u00e0 l'ordre des sommets dans cette liste) 5) Soit l'algorithme de d\u00e9tection des cycles : VARIABLE s : noeud (noeud quelconque) G : un graphe u : noeud v : noeud p : pile (vide au d\u00e9part) //On part du principe que pour tout sommet u du graphe G, u.couleur = blanc \u00e0 l'origine DEBUT CYCLE(): piler(s,p) tant que p n'est pas vide : u \u2190 depiler(p) pour chaque sommet v adjacent au sommet u : si v.couleur n'est pas noir : piler(v,p) fin si fin pour si u est noir : renvoie Vrai sinon : u.couleur \u2190 noir fin si fin tant que renvoie Faux FIN Impl\u00e9mentez cet algorithme en Python. Vous testerez votre programme \u00e0 l'aide du graphe 1 et sur le graphe 2 (voir ci-dessous). Il faudra que votre fonction renvoie \"vrai\" si un cycle est pr\u00e9sent et \"faux\" dans le cas contraire 6) Soit l'algorithme de recherche de chaine entre 2 sommets : VARIABLE G : un graphe start : noeud (noeud de d\u00e9part) end : noeud (noeud d'arriv\u00e9) u : noeud chaine : ensemble de noeuds (initialement vide) DEBUT TROUVE-CHAINE(G, start, end, chaine): chaine = chaine \u22c3 start //le symbol \u22c3 signifie union, il permet d'ajouter le noeud start \u00e0 l'ensemble chaine si start est identique \u00e0 end : renvoie chaine fin si pour chaque sommet u adjacent au sommet start : si u n'appartient pas \u00e0 chaine : nchemin = TROUVE-CHAINE(G, u, end, chaine) si nchemin non vide : renvoie nchemin fin si fin si fin pour renvoie NIL FIN Impl\u00e9mentez cet algorithme en Python. Vous testerez votre programme \u00e0 l'aide du graphe 1 (sommet de d\u00e9part A, sommet d'arriv\u00e9e G). Il faudra que votre programme fournisse la liste des sommets qui constituent la chaine.","title":"Activit\u00e9s"},{"location":"c10a/#activite-101","text":"Appliquez l'algorithme du parcours en largeur d'abord au graphe ci-dessous. Le 'point de d\u00e9part' de notre parcours sera le sommet A. Vous noterez les sommets atteints \u00e0 chaque \u00e9tape ainsi que les sommets pr\u00e9sents dans la file f. Vous pourrez aussi, \u00e0 chaque \u00e9tape, donner les changements de couleur des sommets.","title":"activit\u00e9 10.1"},{"location":"c10a/#activite-102","text":"Appliquez l'algorithme du parcours en profondeur d'abord au graphe ci-dessous (d'abord avec l'algorithme r\u00e9cursif puis ensuite avec l'algorithme non r\u00e9cursif). Le 'point de d\u00e9part' de notre parcours sera le sommet A. Vous noterez les sommets atteints \u00e0 chaque \u00e9tape ainsi que les sommets pr\u00e9sents dans la file f. Vous pourrez aussi, \u00e0 chaque \u00e9tape, donner les changements de couleur des sommets.","title":"activit\u00e9 10.2"},{"location":"c10a/#activite-103","text":"Appliquez l'algorithme de d\u00e9tection d'un cycle au graphe ci-dessous (vous partirez du sommet de votre choix).","title":"activit\u00e9 10.3"},{"location":"c10a/#activite-104","text":"Appliquez l'algorithme de d\u00e9tection d'un cycle au graphe ci-dessous (vous partirez du sommet de votre choix).","title":"activit\u00e9 10.4"},{"location":"c10a/#activite-105","text":"Appliquez l'algorithme permettant de trouver une chaine entre un noeud de d\u00e9part (start) et un noeud d'arriv\u00e9e (end) au graphe ci-dessous (vous choisirez les noeuds de d\u00e9part et d'arriv\u00e9e de votre choix).","title":"activit\u00e9 10.5"},{"location":"c10a/#activite-106","text":"","title":"activit\u00e9 10.6"},{"location":"c10a/#1","text":"Soit le graphe suivant : Proposez une impl\u00e9mentation de ce graphe en Python (graphe 1 dans la suite de cette activit\u00e9)","title":"1)"},{"location":"c10a/#2","text":"Soit l'algorithme de parcours en largeur d'abord : VARIABLE G : un graphe s : noeud (origine) u : noeud v : noeud f : file (initialement vide) //On part du principe que pour tout sommet u du graphe G, u.couleur = blanc \u00e0 l'origine DEBUT s.couleur \u2190 noir enfiler (s,f) tant que f non vide : u \u2190 defiler(f) pour chaque sommet v adjacent au sommet u : si v.couleur n'est pas noir : v.couleur \u2190 noir enfiler(v,f) fin si fin pour fin tant que FIN Impl\u00e9mentez cet algorithme en Python. Vous testerez votre programme \u00e0 l'aide du graphe 1. Il faudra que votre programme fournisse la liste des sommets parcourus en partant du sommet A (il faudra \u00eatre attentif \u00e0 l'ordre des sommets dans cette liste)","title":"2)"},{"location":"c10a/#3","text":"Soit l'algorithme de parcours en profondeur d'abord (version non r\u00e9cursive): VARIABLE s : noeud (origine) G : un graphe u : noeud v : noeud p : pile (pile vide au d\u00e9part) //On part du principe que pour tout sommet u du graphe G, u.couleur = blanc \u00e0 l'origine DEBUT s.couleur \u2190 noir piler(s,p) tant que p n'est pas vide : u \u2190 depiler(p) pour chaque sommet v adjacent au sommet u : si v.couleur n'est pas noir : v.couleur \u2190 noir piler(v,p) fin si fin pour fin tant que FIN Impl\u00e9mentez cet algorithme en Python. Vous testerez votre programme \u00e0 l'aide du graphe 1. Il faudra que votre programme fournisse la liste des sommets parcourus en partant du sommet A (il faudra \u00eatre attentif \u00e0 l'ordre des sommets dans cette liste)","title":"3)"},{"location":"c10a/#4","text":"Soit l'algorithme de parcours en profondeur d'abord (version r\u00e9cursive): VARIABLE G : un graphe u : noeud v : noeud //On part du principe que pour tout sommet u du graphe G, u.couleur = blanc \u00e0 l'origine DEBUT PARCOURS-PROFONDEUR(G,u) : u.couleur \u2190 noir pour chaque sommet v adjacent au sommet u : si v.couleur n'est pas noir : PARCOURS-PROFONDEUR(G,v) fin si fin pour FIN Impl\u00e9mentez cet algorithme en Python. Vous testerez votre programme \u00e0 l'aide du graphe 1. Il faudra que votre programme fournisse la liste des sommets parcourus en partant du sommet A (il faudra \u00eatre attentif \u00e0 l'ordre des sommets dans cette liste)","title":"4)"},{"location":"c10a/#5","text":"Soit l'algorithme de d\u00e9tection des cycles : VARIABLE s : noeud (noeud quelconque) G : un graphe u : noeud v : noeud p : pile (vide au d\u00e9part) //On part du principe que pour tout sommet u du graphe G, u.couleur = blanc \u00e0 l'origine DEBUT CYCLE(): piler(s,p) tant que p n'est pas vide : u \u2190 depiler(p) pour chaque sommet v adjacent au sommet u : si v.couleur n'est pas noir : piler(v,p) fin si fin pour si u est noir : renvoie Vrai sinon : u.couleur \u2190 noir fin si fin tant que renvoie Faux FIN Impl\u00e9mentez cet algorithme en Python. Vous testerez votre programme \u00e0 l'aide du graphe 1 et sur le graphe 2 (voir ci-dessous). Il faudra que votre fonction renvoie \"vrai\" si un cycle est pr\u00e9sent et \"faux\" dans le cas contraire","title":"5)"},{"location":"c10a/#6","text":"Soit l'algorithme de recherche de chaine entre 2 sommets : VARIABLE G : un graphe start : noeud (noeud de d\u00e9part) end : noeud (noeud d'arriv\u00e9) u : noeud chaine : ensemble de noeuds (initialement vide) DEBUT TROUVE-CHAINE(G, start, end, chaine): chaine = chaine \u22c3 start //le symbol \u22c3 signifie union, il permet d'ajouter le noeud start \u00e0 l'ensemble chaine si start est identique \u00e0 end : renvoie chaine fin si pour chaque sommet u adjacent au sommet start : si u n'appartient pas \u00e0 chaine : nchemin = TROUVE-CHAINE(G, u, end, chaine) si nchemin non vide : renvoie nchemin fin si fin si fin pour renvoie NIL FIN Impl\u00e9mentez cet algorithme en Python. Vous testerez votre programme \u00e0 l'aide du graphe 1 (sommet de d\u00e9part A, sommet d'arriv\u00e9e G). Il faudra que votre programme fournisse la liste des sommets qui constituent la chaine.","title":"6)"},{"location":"c10c/","text":"1) algorithmes de parcours d'un graphe Nous allons commencer par nous int\u00e9resser aux algorithmes de parcours d'un graphe. L'id\u00e9e du \"parcours\" est de \"visiter\" tous les sommets d'un graphe en partant d'un sommet quelconque. Ces algorithmes de parcours d'un graphe sont \u00e0 la base de nombreux algorithmes tr\u00e8s utilis\u00e9s : routage des paquets de donn\u00e9es dans un r\u00e9seau, d\u00e9couverte du chemin le plus court pour aller d'une ville \u00e0 une autre... Il existe 2 m\u00e9thodes pour parcourir un graphe : le parcours en largeur d'abord le parcours en profondeur d'abord a) pr\u00e9alable Nous allons travailler sur un graphe G(V,E) avec V l'ensemble des sommets de ce graphe et E l'ensemble des ar\u00eates de ce graphe. Un sommet u sera adjacent avec un sommet v si u et v sont reli\u00e9s par une ar\u00eate (on pourra aussi dire que u et v sont voisins) \u00c0 chaque sommet u de ce graphe nous allons associer une couleur : blanc ou noir. Autrement dit, chaque sommet u poss\u00e8de un attribut couleur que l'on notera u.couleur, nous aurons u.couleur = blanc ou u.couleur = noir. Quelle est la signification de ces couleurs ? si u.couleur = blanc => u n'a pas encore \u00e9t\u00e9 \"d\u00e9couvert\" si u.couleur = noir => u a \u00e9t\u00e9 \"d\u00e9couvert\" b) le parcours en largeur d'abord L'algorithme ci-dessous permet de parcourir un graphe en largeur d'abord : VARIABLE G : un graphe s : noeud (origine) u : noeud v : noeud f : file (initialement vide) //On part du principe que pour tout sommet u du graphe G, u.couleur = blanc \u00e0 l'origine DEBUT s.couleur \u2190 noir enfiler (s,f) tant que f non vide : u \u2190 defiler(f) pour chaque sommet v adjacent au sommet u : si v.couleur n'est pas noir : v.couleur \u2190 noir enfiler(v,f) fin si fin pour fin tant que FIN Si on applique cet algorithme sur le graphe G ci-dessous : si on part du sommet A (sommet s dans l'algorithme) la \"d\u00e9couverte\" peut se faire dans l'ordre suivant : A, B, F, C, D, G, H, E et I (ATTENTION ce n'est pas la seule solution possible, par exemple A, F, B, D, C, G, H, I et E est aussi possible (il y a bien d'autres possibilit\u00e9s)). Vous avez sans doute remarqu\u00e9 que dans le cas d'un parcours en largeur d'abord, on \"d\u00e9couvre\" d'abord tous les sommets situ\u00e9s \u00e0 une distance k du sommet \"origine\" (sommet s) avant de commencer la d\u00e9couverte des sommets situ\u00e9s \u00e0 une distance k+1 (on d\u00e9finit la distance comme \u00e9tant le nombre d'ar\u00eates \u00e0 parcourir depuis A pour arriver \u00e0 destination): En effet, pour l'exemple ci-dessus, nous avons bien : c) le parcours en profondeur d'abord L'algorithme ci-dessous permet de parcourir un graphe en profondeur d'abord : VARIABLE G : un graphe u : noeud v : noeud //On part du principe que pour tout sommet u du graphe G, u.couleur = blanc \u00e0 l'origine DEBUT PARCOURS-PROFONDEUR(G,u) : u.couleur \u2190 noir pour chaque sommet v adjacent au sommet u : si v.couleur n'est pas noir : PARCOURS-PROFONDEUR(G,v) fin si fin pour FIN Vous avez d\u00fb remarquer que le parcours en profondeur utilise une fonction r\u00e9cursive. J'attire votre attention sur l'extr\u00eame simplicit\u00e9 de cet algorithme (au niveau de sa conception), c'est souvent le cas avec les algorithmes r\u00e9cursifs. Si on applique cet algorithme sur le graphe G ci-dessous : en partant du sommet A la \"d\u00e9couverte\" peut se faire dans l'ordre suivant : A, B, C, E, I, D, G, F et H (ATTENTION, ici aussi, ce n'est pas la seule solution possible : A, F, H, I, E, C, B, D et G est aussi une solution possible (il y a bien d'autres possibilit\u00e9s)). Dans le cas du parcours en largeur d'abord on \"d\u00e9couvrait\" tous les sommets situ\u00e9s \u00e0 une distance k de l'origine avant de s'int\u00e9resser aux sommets situ\u00e9s \u00e0 une distance k+1 de l'origine. Dans le cas du parcours en profondeur, on va chercher \u00e0 aller \"le plus loin possible\" dans le graphe : A -> B -> C -> E -> I -> D, quand on tombe sur \"un cul-de-sac\" (dans notre exemple, D est un \"cul-de-sac\", car une fois en D, on peut uniquement aller en B, or, B a d\u00e9j\u00e0 \u00e9t\u00e9 d\u00e9couvert...), on revient \"en arri\u00e8re\" (dans notre exemple, on repart de B pour aller explorer une autre branche : G -> F -> H) \u00c0 noter que l'utilisation d'un algorithme r\u00e9cursif n'est pas une obligation pour le parcours en profondeur : VARIABLE s : noeud (origine) G : un graphe u : noeud v : noeud p : pile (pile vide au d\u00e9part) //On part du principe que pour tout sommet u du graphe G, u.couleur = blanc \u00e0 l'origine DEBUT s.couleur \u2190 noir piler(s,p) tant que p n'est pas vide : u \u2190 depiler(p) pour chaque sommet v adjacent au sommet u : si v.couleur n'est pas noir : v.couleur \u2190 noir piler(v,p) fin si fin pour fin tant que FIN Vous avez sans doute remarqu\u00e9 que la version \"non r\u00e9cursive\" (on dit \"it\u00e9rative\") de l'algorithme du parcours en profondeur ressemble beaucoup \u00e0 l'algorithme du parcours en largeur, on a juste remplac\u00e9 la file par une pile. 2) cycle dans les graphes Voici un rappel de 2 d\u00e9finitions vues pr\u00e9c\u00e9demment : une chaine est une suite d'ar\u00eates cons\u00e9cutives dans un graphe, un peu comme si on se promenait sur le graphe. On la d\u00e9signe par les lettres des sommets qu'elle comporte. On utilise le terme de chaine pour les graphes non orient\u00e9s et le terme de chemin pour les graphes orient\u00e9s. un cycle est une chaine qui commence et se termine au m\u00eame sommet. Pour diff\u00e9rentes raisons, il peut \u00eatre int\u00e9ressant de d\u00e9tecter la pr\u00e9sence d'un ou plusieurs cycles dans un graphe (par exemple pour savoir s'il est possible d'effectuer un parcours qui revient \u00e0 son point de d\u00e9part sans \u00eatre oblig\u00e9 de faire demi-tour). Voici ci-dessous un algorithme qui permet de \"d\u00e9tecter\" la pr\u00e9sence d'au moins un cycle dans un graphe : VARIABLE s : noeud (noeud quelconque) G : un graphe u : noeud v : noeud p : pile (vide au d\u00e9part) //On part du principe que pour tout sommet u du graphe G, u.couleur = blanc \u00e0 l'origine DEBUT CYCLE(): piler(s,p) tant que p n'est pas vide : u \u2190 depiler(p) pour chaque sommet v adjacent au sommet u : si v.couleur n'est pas noir : piler(v,p) fin si fin pour si u est noir : renvoie Vrai sinon : u.couleur \u2190 noir fin si fin tant que renvoie Faux FIN 3) Chercher une chaine dans un graphe Nous allons maintenant nous int\u00e9resser \u00e0 un algorithme qui permet de trouver une chaine entre 2 sommets (sommet de d\u00e9part et sommet d'arriv\u00e9e). Les algorithmes de ce type ont une grande importance et sont tr\u00e8s souvent utilis\u00e9s). VARIABLE G : un graphe start : noeud (noeud de d\u00e9part) end : noeud (noeud d'arriv\u00e9) u : noeud chaine : ensemble de noeuds (initialement vide) DEBUT TROUVE-CHAINE(G, start, end, chaine): chaine = chaine \u22c3 start //le symbol \u22c3 signifie union, il permet d'ajouter le noeud start \u00e0 l'ensemble chaine si start est identique \u00e0 end : renvoie chaine fin si pour chaque sommet u adjacent au sommet start : si u n'appartient pas \u00e0 chaine : nchemin = TROUVE-CHAINE(G, u, end, chaine) si nchemin non vide : renvoie nchemin fin si fin si fin pour renvoie NIL FIN Vous noterez que l'algorithme ci-dessus est bas\u00e9 sur un parcours en profondeur d'abord. 4) pour aller plus loin... Il est important de noter que dans la plupart des cas, les algorithmes de recherche de chaine (ou de chemin), travaillent sur des graphes pond\u00e9r\u00e9s (par exemple pour rechercher la route entre un point de d\u00e9part et un point d'arriv\u00e9e dans un logiciel de cartographie). Ces algorithmes recherchent aussi souvent les chemins les plus courts (logiciels de cartographie). On peut citer l'algorithme de Dijkstra ou encore l'algorithme de Bellman-Ford qui recherchent le chemin le plus court entre un noeud de d\u00e9part et un noeud d'arriv\u00e9e dans un graphe pond\u00e9r\u00e9. Si ce sujet vous int\u00e9resse, vous pouvez visionner cette vid\u00e9o qui explique le principe de fonctionnement de l'algorithme de Dijkstra.","title":"Cours"},{"location":"c10c/#1-algorithmes-de-parcours-dun-graphe","text":"Nous allons commencer par nous int\u00e9resser aux algorithmes de parcours d'un graphe. L'id\u00e9e du \"parcours\" est de \"visiter\" tous les sommets d'un graphe en partant d'un sommet quelconque. Ces algorithmes de parcours d'un graphe sont \u00e0 la base de nombreux algorithmes tr\u00e8s utilis\u00e9s : routage des paquets de donn\u00e9es dans un r\u00e9seau, d\u00e9couverte du chemin le plus court pour aller d'une ville \u00e0 une autre... Il existe 2 m\u00e9thodes pour parcourir un graphe : le parcours en largeur d'abord le parcours en profondeur d'abord","title":"1) algorithmes de parcours d'un graphe"},{"location":"c10c/#a-prealable","text":"Nous allons travailler sur un graphe G(V,E) avec V l'ensemble des sommets de ce graphe et E l'ensemble des ar\u00eates de ce graphe. Un sommet u sera adjacent avec un sommet v si u et v sont reli\u00e9s par une ar\u00eate (on pourra aussi dire que u et v sont voisins) \u00c0 chaque sommet u de ce graphe nous allons associer une couleur : blanc ou noir. Autrement dit, chaque sommet u poss\u00e8de un attribut couleur que l'on notera u.couleur, nous aurons u.couleur = blanc ou u.couleur = noir. Quelle est la signification de ces couleurs ? si u.couleur = blanc => u n'a pas encore \u00e9t\u00e9 \"d\u00e9couvert\" si u.couleur = noir => u a \u00e9t\u00e9 \"d\u00e9couvert\"","title":"a) pr\u00e9alable"},{"location":"c10c/#b-le-parcours-en-largeur-dabord","text":"L'algorithme ci-dessous permet de parcourir un graphe en largeur d'abord : VARIABLE G : un graphe s : noeud (origine) u : noeud v : noeud f : file (initialement vide) //On part du principe que pour tout sommet u du graphe G, u.couleur = blanc \u00e0 l'origine DEBUT s.couleur \u2190 noir enfiler (s,f) tant que f non vide : u \u2190 defiler(f) pour chaque sommet v adjacent au sommet u : si v.couleur n'est pas noir : v.couleur \u2190 noir enfiler(v,f) fin si fin pour fin tant que FIN Si on applique cet algorithme sur le graphe G ci-dessous : si on part du sommet A (sommet s dans l'algorithme) la \"d\u00e9couverte\" peut se faire dans l'ordre suivant : A, B, F, C, D, G, H, E et I (ATTENTION ce n'est pas la seule solution possible, par exemple A, F, B, D, C, G, H, I et E est aussi possible (il y a bien d'autres possibilit\u00e9s)). Vous avez sans doute remarqu\u00e9 que dans le cas d'un parcours en largeur d'abord, on \"d\u00e9couvre\" d'abord tous les sommets situ\u00e9s \u00e0 une distance k du sommet \"origine\" (sommet s) avant de commencer la d\u00e9couverte des sommets situ\u00e9s \u00e0 une distance k+1 (on d\u00e9finit la distance comme \u00e9tant le nombre d'ar\u00eates \u00e0 parcourir depuis A pour arriver \u00e0 destination): En effet, pour l'exemple ci-dessus, nous avons bien :","title":"b) le parcours en largeur d'abord"},{"location":"c10c/#c-le-parcours-en-profondeur-dabord","text":"L'algorithme ci-dessous permet de parcourir un graphe en profondeur d'abord : VARIABLE G : un graphe u : noeud v : noeud //On part du principe que pour tout sommet u du graphe G, u.couleur = blanc \u00e0 l'origine DEBUT PARCOURS-PROFONDEUR(G,u) : u.couleur \u2190 noir pour chaque sommet v adjacent au sommet u : si v.couleur n'est pas noir : PARCOURS-PROFONDEUR(G,v) fin si fin pour FIN Vous avez d\u00fb remarquer que le parcours en profondeur utilise une fonction r\u00e9cursive. J'attire votre attention sur l'extr\u00eame simplicit\u00e9 de cet algorithme (au niveau de sa conception), c'est souvent le cas avec les algorithmes r\u00e9cursifs. Si on applique cet algorithme sur le graphe G ci-dessous : en partant du sommet A la \"d\u00e9couverte\" peut se faire dans l'ordre suivant : A, B, C, E, I, D, G, F et H (ATTENTION, ici aussi, ce n'est pas la seule solution possible : A, F, H, I, E, C, B, D et G est aussi une solution possible (il y a bien d'autres possibilit\u00e9s)). Dans le cas du parcours en largeur d'abord on \"d\u00e9couvrait\" tous les sommets situ\u00e9s \u00e0 une distance k de l'origine avant de s'int\u00e9resser aux sommets situ\u00e9s \u00e0 une distance k+1 de l'origine. Dans le cas du parcours en profondeur, on va chercher \u00e0 aller \"le plus loin possible\" dans le graphe : A -> B -> C -> E -> I -> D, quand on tombe sur \"un cul-de-sac\" (dans notre exemple, D est un \"cul-de-sac\", car une fois en D, on peut uniquement aller en B, or, B a d\u00e9j\u00e0 \u00e9t\u00e9 d\u00e9couvert...), on revient \"en arri\u00e8re\" (dans notre exemple, on repart de B pour aller explorer une autre branche : G -> F -> H) \u00c0 noter que l'utilisation d'un algorithme r\u00e9cursif n'est pas une obligation pour le parcours en profondeur : VARIABLE s : noeud (origine) G : un graphe u : noeud v : noeud p : pile (pile vide au d\u00e9part) //On part du principe que pour tout sommet u du graphe G, u.couleur = blanc \u00e0 l'origine DEBUT s.couleur \u2190 noir piler(s,p) tant que p n'est pas vide : u \u2190 depiler(p) pour chaque sommet v adjacent au sommet u : si v.couleur n'est pas noir : v.couleur \u2190 noir piler(v,p) fin si fin pour fin tant que FIN Vous avez sans doute remarqu\u00e9 que la version \"non r\u00e9cursive\" (on dit \"it\u00e9rative\") de l'algorithme du parcours en profondeur ressemble beaucoup \u00e0 l'algorithme du parcours en largeur, on a juste remplac\u00e9 la file par une pile.","title":"c) le parcours en profondeur d'abord"},{"location":"c10c/#2-cycle-dans-les-graphes","text":"Voici un rappel de 2 d\u00e9finitions vues pr\u00e9c\u00e9demment : une chaine est une suite d'ar\u00eates cons\u00e9cutives dans un graphe, un peu comme si on se promenait sur le graphe. On la d\u00e9signe par les lettres des sommets qu'elle comporte. On utilise le terme de chaine pour les graphes non orient\u00e9s et le terme de chemin pour les graphes orient\u00e9s. un cycle est une chaine qui commence et se termine au m\u00eame sommet. Pour diff\u00e9rentes raisons, il peut \u00eatre int\u00e9ressant de d\u00e9tecter la pr\u00e9sence d'un ou plusieurs cycles dans un graphe (par exemple pour savoir s'il est possible d'effectuer un parcours qui revient \u00e0 son point de d\u00e9part sans \u00eatre oblig\u00e9 de faire demi-tour). Voici ci-dessous un algorithme qui permet de \"d\u00e9tecter\" la pr\u00e9sence d'au moins un cycle dans un graphe : VARIABLE s : noeud (noeud quelconque) G : un graphe u : noeud v : noeud p : pile (vide au d\u00e9part) //On part du principe que pour tout sommet u du graphe G, u.couleur = blanc \u00e0 l'origine DEBUT CYCLE(): piler(s,p) tant que p n'est pas vide : u \u2190 depiler(p) pour chaque sommet v adjacent au sommet u : si v.couleur n'est pas noir : piler(v,p) fin si fin pour si u est noir : renvoie Vrai sinon : u.couleur \u2190 noir fin si fin tant que renvoie Faux FIN","title":"2) cycle dans  les graphes"},{"location":"c10c/#3-chercher-une-chaine-dans-un-graphe","text":"Nous allons maintenant nous int\u00e9resser \u00e0 un algorithme qui permet de trouver une chaine entre 2 sommets (sommet de d\u00e9part et sommet d'arriv\u00e9e). Les algorithmes de ce type ont une grande importance et sont tr\u00e8s souvent utilis\u00e9s). VARIABLE G : un graphe start : noeud (noeud de d\u00e9part) end : noeud (noeud d'arriv\u00e9) u : noeud chaine : ensemble de noeuds (initialement vide) DEBUT TROUVE-CHAINE(G, start, end, chaine): chaine = chaine \u22c3 start //le symbol \u22c3 signifie union, il permet d'ajouter le noeud start \u00e0 l'ensemble chaine si start est identique \u00e0 end : renvoie chaine fin si pour chaque sommet u adjacent au sommet start : si u n'appartient pas \u00e0 chaine : nchemin = TROUVE-CHAINE(G, u, end, chaine) si nchemin non vide : renvoie nchemin fin si fin si fin pour renvoie NIL FIN Vous noterez que l'algorithme ci-dessus est bas\u00e9 sur un parcours en profondeur d'abord.","title":"3) Chercher une chaine dans un graphe"},{"location":"c10c/#4-pour-aller-plus-loin","text":"Il est important de noter que dans la plupart des cas, les algorithmes de recherche de chaine (ou de chemin), travaillent sur des graphes pond\u00e9r\u00e9s (par exemple pour rechercher la route entre un point de d\u00e9part et un point d'arriv\u00e9e dans un logiciel de cartographie). Ces algorithmes recherchent aussi souvent les chemins les plus courts (logiciels de cartographie). On peut citer l'algorithme de Dijkstra ou encore l'algorithme de Bellman-Ford qui recherchent le chemin le plus court entre un noeud de d\u00e9part et un noeud d'arriv\u00e9e dans un graphe pond\u00e9r\u00e9. Si ce sujet vous int\u00e9resse, vous pouvez visionner cette vid\u00e9o qui explique le principe de fonctionnement de l'algorithme de Dijkstra.","title":"4) pour aller plus  loin..."},{"location":"c10e/","text":"exercice 10.1 Vous avez d\u00e9cid\u00e9 de d\u00e9velopper un r\u00e9seau social \u00e0 l\u2019\u00e9chelle du lyc\u00e9e. Afin d\u2019effectuer des tests, vous d\u00e9cidez de limiter votre r\u00e9seau \u00e0 social \u00e0 6 utilisateurs que vous d\u00e9cidez de nommer : A, B, C, D, E et F. \u00c0 un instant t, voici l\u2019\u00e9tat de votre r\u00e9seau social : A et B sont amis A et C sont amis A et D sont amis B et E sont amis B et F sont amis E et F sont amis 1) Vous d\u00e9cidez de repr\u00e9senter l\u2019\u00e9tat de votre r\u00e9seau social \u00e0 l\u2019instant t par un graphe non orient\u00e9 G. Les personnes (A, B, C,\u2026) seront les sommets du graphe G. Une relation \u00ab x et y sont amis \u00bb sera une ar\u00eate de G. Repr\u00e9sentez graphiquement le graphe G. 2) Repr\u00e9sentez la matrice d\u2019adjacence du graphe G (A est associ\u00e9 \u00e0 l\u2019indice 1 de la matrice, B \u00e0 l\u2019indice 2, C \u00e0 l\u2019indice 3, etc.) 3) Le parcours [A, B, C, D, E, F] est-il un parcours \u00ab en profondeur d\u2019abord \u00bb ou un parcours \u00ab en largeur d\u2019abord \u00bb ? Justifiez votre r\u00e9ponse 4) On donne ci-dessous l\u2019algorithme permettant d\u2019obtenir le parcours en \u00ab largeur d\u2019abord \u00bb d\u2019un graphe G. Compl\u00e9tez cet algorithme (si possible sans vous aider du cours) VARIABLE G : un graphe s : noeud (origine) u : noeud v : noeud f : file (initialement vide) DEBUT s.couleur \u2190 noir enfiler (s,f) tant que f non vide : u \u2190 \u2026\u2026\u2026\u2026. pour chaque sommet v adjacent au sommet \u2026\u2026\u2026 : si v.couleur n'est pas \u2026\u2026\u2026 : v.couleur \u2190 noir enfiler(...,f) fin si fin pour fin tant que FIN exercice 10.2 Soit la matrice d'adjacence suivante qui repr\u00e9sente un graphe G : 1) Faites un sch\u00e9ma du graphe G 2) Impl\u00e9mentez le graphe G en Python \u00e0 l\u2019aide d\u2019un dictionnaire et des listes (tableaux). 3) Soit le programme Python suivant : g1 = { 'A' :[ 'B' , 'C' ], 'B' :[ 'A' ], 'C' :[ 'A' , 'D' ], 'D' :[ 'C' ]} def myst ( G , s ): noir = [] p = [] l = [] noir . append ( s ) p . append ( s ) while len ( p ) > 0 : u = p . pop () l . append ( u ) for v in G [ u ]: if v not in noir : noir . append ( v ) p . append ( v ) return l L = myst ( g1 , 'A' ) Que vaut L apr\u00e8s l'ex\u00e9cution de ce programme 4) Compl\u00e9tez le programme Python suivant (la fonction cycle prend en param\u00e8tre un graphe G et retourne True si le graphe G poss\u00e8de un cycle et False dans le cas contraire), si possible sans vous aider du cours. def cycle ( G ): s = random . choice ( list ( G . keys ())) p = [] p . append ( s ) noir = [] while len ( p ) > 0 : u = p . pop () for v in \u2026\u2026\u2026 : if v not in noir : p . append ( .... ) if u in \u2026\u2026\u2026 . : return True else : noir . append ( u ) return \u2026\u2026\u2026\u2026","title":"Exercices"},{"location":"c10e/#exercice-101","text":"Vous avez d\u00e9cid\u00e9 de d\u00e9velopper un r\u00e9seau social \u00e0 l\u2019\u00e9chelle du lyc\u00e9e. Afin d\u2019effectuer des tests, vous d\u00e9cidez de limiter votre r\u00e9seau \u00e0 social \u00e0 6 utilisateurs que vous d\u00e9cidez de nommer : A, B, C, D, E et F. \u00c0 un instant t, voici l\u2019\u00e9tat de votre r\u00e9seau social : A et B sont amis A et C sont amis A et D sont amis B et E sont amis B et F sont amis E et F sont amis 1) Vous d\u00e9cidez de repr\u00e9senter l\u2019\u00e9tat de votre r\u00e9seau social \u00e0 l\u2019instant t par un graphe non orient\u00e9 G. Les personnes (A, B, C,\u2026) seront les sommets du graphe G. Une relation \u00ab x et y sont amis \u00bb sera une ar\u00eate de G. Repr\u00e9sentez graphiquement le graphe G. 2) Repr\u00e9sentez la matrice d\u2019adjacence du graphe G (A est associ\u00e9 \u00e0 l\u2019indice 1 de la matrice, B \u00e0 l\u2019indice 2, C \u00e0 l\u2019indice 3, etc.) 3) Le parcours [A, B, C, D, E, F] est-il un parcours \u00ab en profondeur d\u2019abord \u00bb ou un parcours \u00ab en largeur d\u2019abord \u00bb ? Justifiez votre r\u00e9ponse 4) On donne ci-dessous l\u2019algorithme permettant d\u2019obtenir le parcours en \u00ab largeur d\u2019abord \u00bb d\u2019un graphe G. Compl\u00e9tez cet algorithme (si possible sans vous aider du cours) VARIABLE G : un graphe s : noeud (origine) u : noeud v : noeud f : file (initialement vide) DEBUT s.couleur \u2190 noir enfiler (s,f) tant que f non vide : u \u2190 \u2026\u2026\u2026\u2026. pour chaque sommet v adjacent au sommet \u2026\u2026\u2026 : si v.couleur n'est pas \u2026\u2026\u2026 : v.couleur \u2190 noir enfiler(...,f) fin si fin pour fin tant que FIN","title":"exercice 10.1"},{"location":"c10e/#exercice-102","text":"Soit la matrice d'adjacence suivante qui repr\u00e9sente un graphe G : 1) Faites un sch\u00e9ma du graphe G 2) Impl\u00e9mentez le graphe G en Python \u00e0 l\u2019aide d\u2019un dictionnaire et des listes (tableaux). 3) Soit le programme Python suivant : g1 = { 'A' :[ 'B' , 'C' ], 'B' :[ 'A' ], 'C' :[ 'A' , 'D' ], 'D' :[ 'C' ]} def myst ( G , s ): noir = [] p = [] l = [] noir . append ( s ) p . append ( s ) while len ( p ) > 0 : u = p . pop () l . append ( u ) for v in G [ u ]: if v not in noir : noir . append ( v ) p . append ( v ) return l L = myst ( g1 , 'A' ) Que vaut L apr\u00e8s l'ex\u00e9cution de ce programme 4) Compl\u00e9tez le programme Python suivant (la fonction cycle prend en param\u00e8tre un graphe G et retourne True si le graphe G poss\u00e8de un cycle et False dans le cas contraire), si possible sans vous aider du cours. def cycle ( G ): s = random . choice ( list ( G . keys ())) p = [] p . append ( s ) noir = [] while len ( p ) > 0 : u = p . pop () for v in \u2026\u2026\u2026 : if v not in noir : p . append ( .... ) if u in \u2026\u2026\u2026 . : return True else : noir . append ( u ) return \u2026\u2026\u2026\u2026","title":"exercice 10.2"},{"location":"c10r/","text":"Ce qu\u2019il faut savoir conna\u00eetre l\u2019algorithme qui permet de parcourir un graphe en largeur d'abord (voir cours) conna\u00eetre l\u2019algorithme qui permet de parcourir un graphe en profondeur d'abord (voir cours) conna\u00eetre l\u2019algorithme qui permet de d\u00e9tecter les cycles dans un graphe (voir cours) conna\u00eetre l\u2019algorithme qui permet de chercher une chaine dans un graphe (voir cours) Ce qu\u2019il faut savoir faire Vous devez \u00eatre capable d'impl\u00e9menter tous ces algorithmes en Python (voir projet)","title":"R\u00e9vision"},{"location":"c10r/#ce-quil-faut-savoir","text":"conna\u00eetre l\u2019algorithme qui permet de parcourir un graphe en largeur d'abord (voir cours) conna\u00eetre l\u2019algorithme qui permet de parcourir un graphe en profondeur d'abord (voir cours) conna\u00eetre l\u2019algorithme qui permet de d\u00e9tecter les cycles dans un graphe (voir cours) conna\u00eetre l\u2019algorithme qui permet de chercher une chaine dans un graphe (voir cours)","title":"Ce qu\u2019il faut savoir"},{"location":"c10r/#ce-quil-faut-savoir-faire","text":"Vous devez \u00eatre capable d'impl\u00e9menter tous ces algorithmes en Python (voir projet)","title":"Ce qu\u2019il faut savoir faire"},{"location":"c11a/","text":"activit\u00e9 11.1 Soit le r\u00e9seau suivant : D\u00e9terminer un chemin possible permettant d\u2019\u00e9tablir une connexion entre la machine M4 et M14. activit\u00e9 11.2 Soit le r\u00e9seau suivant : D\u00e9terminez la table de routage du routeur G (vous utiliserez les adresses IP pour \u00e9tablir votre table de routage). activit\u00e9 11.3 Soit le r\u00e9seau suivant : Routeur B : eth0 est reli\u00e9 au switch du r\u00e9seau R3 eth1 est reli\u00e9 au routeur A eth2 est reli\u00e9 au routeur C On donne la table de routage (simplifi\u00e9e) du routeur B : r\u00e9seau moyen de l'atteindre m\u00e9trique R3 eth0 0 R\u00e9seau Routeur A eth1 0 R\u00e9seau Routeur C eth2 0 R1 Routeur A R1 Routeur C R2 Routeur A R2 Routeur C Compl\u00e9tez la colonne m\u00e9trique de la table de routage du routeur B en partant du principe que l'on utilise le protocole RIP. On cherche \u00e0 transmettre des donn\u00e9es de M5 \u00e0 M3, donnez le chemin qui sera suivi par ces donn\u00e9es. activit\u00e9 11.4 Soit le r\u00e9seau suivant : Routeur B : eth0 est reli\u00e9 au switch du r\u00e9seau R3 eth1 est reli\u00e9 au routeur A eth2 est reli\u00e9 au routeur C On donne la table de routage (simplifi\u00e9e) du routeur B : r\u00e9seau moyen de l'atteindre m\u00e9trique R3 eth0 0 R\u00e9seau Routeur A eth1 0 R\u00e9seau Routeur C eth2 0 R1 Routeur A R1 Routeur C R2 Routeur A R2 Routeur C On donne les d\u00e9bits des liaisons inter-routeur : Routeur A - Routeur B : 100 Mbps Routeur A - Routeur C : 10 Mbps Routeur B - Routeur C : 1 Gbps Compl\u00e9tez la colonne m\u00e9trique de la table de routage du routeur B en partant du principe que l'on utilise le protocole OSPF. On cherche \u00e0 transmettre des donn\u00e9es de M5 \u00e0 M3, donnez le chemin qui sera suivi par ces donn\u00e9es. activit\u00e9 11.5 Soit le r\u00e9seau suivant : Routeur C : eth0 est reli\u00e9 au switch du r\u00e9seau R2 eth1 est reli\u00e9 au routeur A eth2 est reli\u00e9 au routeur B Partant du principe que l'on utilise le protocole RIP, donnez la table de routage du routeur C activit\u00e9 11.6 Soit le r\u00e9seau suivant : Routeur C : eth0 est reli\u00e9 au switch du r\u00e9seau R2 eth1 est reli\u00e9 au routeur A eth2 est reli\u00e9 au routeur B d\u00e9bits des liaisons inter-routeur : Routeur A - Routeur B : 50 Mbps Routeur A - Routeur C : 1 Mbps Routeur B - Routeur C : 800 Kbps Partant du principe que l'on utilise le protocole OSPF, donnez la table de routage du routeur C.","title":"Activit\u00e9s"},{"location":"c11a/#activite-111","text":"Soit le r\u00e9seau suivant : D\u00e9terminer un chemin possible permettant d\u2019\u00e9tablir une connexion entre la machine M4 et M14.","title":"activit\u00e9 11.1"},{"location":"c11a/#activite-112","text":"Soit le r\u00e9seau suivant : D\u00e9terminez la table de routage du routeur G (vous utiliserez les adresses IP pour \u00e9tablir votre table de routage).","title":"activit\u00e9 11.2"},{"location":"c11a/#activite-113","text":"Soit le r\u00e9seau suivant : Routeur B : eth0 est reli\u00e9 au switch du r\u00e9seau R3 eth1 est reli\u00e9 au routeur A eth2 est reli\u00e9 au routeur C On donne la table de routage (simplifi\u00e9e) du routeur B : r\u00e9seau moyen de l'atteindre m\u00e9trique R3 eth0 0 R\u00e9seau Routeur A eth1 0 R\u00e9seau Routeur C eth2 0 R1 Routeur A R1 Routeur C R2 Routeur A R2 Routeur C Compl\u00e9tez la colonne m\u00e9trique de la table de routage du routeur B en partant du principe que l'on utilise le protocole RIP. On cherche \u00e0 transmettre des donn\u00e9es de M5 \u00e0 M3, donnez le chemin qui sera suivi par ces donn\u00e9es.","title":"activit\u00e9 11.3"},{"location":"c11a/#activite-114","text":"Soit le r\u00e9seau suivant : Routeur B : eth0 est reli\u00e9 au switch du r\u00e9seau R3 eth1 est reli\u00e9 au routeur A eth2 est reli\u00e9 au routeur C On donne la table de routage (simplifi\u00e9e) du routeur B : r\u00e9seau moyen de l'atteindre m\u00e9trique R3 eth0 0 R\u00e9seau Routeur A eth1 0 R\u00e9seau Routeur C eth2 0 R1 Routeur A R1 Routeur C R2 Routeur A R2 Routeur C On donne les d\u00e9bits des liaisons inter-routeur : Routeur A - Routeur B : 100 Mbps Routeur A - Routeur C : 10 Mbps Routeur B - Routeur C : 1 Gbps Compl\u00e9tez la colonne m\u00e9trique de la table de routage du routeur B en partant du principe que l'on utilise le protocole OSPF. On cherche \u00e0 transmettre des donn\u00e9es de M5 \u00e0 M3, donnez le chemin qui sera suivi par ces donn\u00e9es.","title":"activit\u00e9 11.4"},{"location":"c11a/#activite-115","text":"Soit le r\u00e9seau suivant : Routeur C : eth0 est reli\u00e9 au switch du r\u00e9seau R2 eth1 est reli\u00e9 au routeur A eth2 est reli\u00e9 au routeur B Partant du principe que l'on utilise le protocole RIP, donnez la table de routage du routeur C","title":"activit\u00e9 11.5"},{"location":"c11a/#activite-116","text":"Soit le r\u00e9seau suivant : Routeur C : eth0 est reli\u00e9 au switch du r\u00e9seau R2 eth1 est reli\u00e9 au routeur A eth2 est reli\u00e9 au routeur B d\u00e9bits des liaisons inter-routeur : Routeur A - Routeur B : 50 Mbps Routeur A - Routeur C : 1 Mbps Routeur B - Routeur C : 800 Kbps Partant du principe que l'on utilise le protocole OSPF, donnez la table de routage du routeur C.","title":"activit\u00e9 11.6"},{"location":"c11c/","text":"1) routage des paquets Pour bien suivre ce cours, il est n\u00e9cessaire de maitriser les bases sur les r\u00e9seaux (r\u00e9seau local, adresse IP, adresse r\u00e9seau...) N'h\u00e9sitez pas \u00e0 vous replonger dans le cours de premi\u00e8re si n\u00e9cessaire. Les r\u00e9seaux locaux peuvent \u00eatre reli\u00e9s entre eux par l'interm\u00e9diaire de routeurs. Il ne faut jamais perdre de vue qu'Internet r\u00e9sulte de l'interconnexion de r\u00e9seaux par des routeurs. Nous avons sur ce sch\u00e9ma les \u00e9l\u00e9ments suivants : 15 ordinateurs : M1 \u00e0 M15 6 switchs : R1 \u00e0 R6 8 routeurs : A, B, C, D, E, F, G et H Comme nous l'avons d\u00e9j\u00e0 dit ci-dessus, un routeur permet de relier ensemble plusieurs r\u00e9seaux locaux. Un routeur est compos\u00e9 d\u2019un nombre plus ou moins important d\u2019interfaces r\u00e9seau (cartes r\u00e9seau). Les routeurs les plus simples que l\u2019on puisse rencontrer permettent de relier ensemble deux r\u00e9seaux (ils poss\u00e8dent alors 2 interfaces r\u00e9seau), mais il existe des routeurs capables de relier ensemble une dizaine de r\u00e9seaux. N'importe quel ordinateur peut jouer le r\u00f4le de routeur (\u00e0 partir du moment o\u00f9 il poss\u00e8de au moins 2 interfaces r\u00e9seau), mais on rencontre souvent des \"machines\" d\u00e9di\u00e9es (par exemple de marque CISCO) Revenons maintenant \u00e0 l\u2019analyse de notre sch\u00e9ma : Nous avons 6 r\u00e9seaux locaux, chaque r\u00e9seau local poss\u00e8de son propre switch. Les ordinateurs M1, M2 et M3 appartiennent au r\u00e9seau local 1. Les ordinateurs M4, M5 et M6 appartiennent au r\u00e9seau local 2. Nous pouvons synth\u00e9tiser tout cela comme suit : r\u00e9seau local 1 : M1, M2 et M3 r\u00e9seau local 2 : M4, M5 et M6 r\u00e9seau local 3 : M7 et M8 r\u00e9seau local 4 : M9 et M10 r\u00e9seau local 5 : M11 et M12 r\u00e9seau local 6 : M13, M14 et M15 Voici quelques exemples de communications entre 2 ordinateurs : cas n\u00b01 : M1 veut communiquer avec M3 Le paquet est envoy\u00e9 de M1 vers le switch R1, R1 \"constate\" que M3 se trouve bien dans le r\u00e9seau local 1, le paquet est donc envoy\u00e9 directement vers M3. On peut r\u00e9sumer le trajet du paquet par : M1\u2192R1\u2192M3 cas n\u00b02 : M1 veut communiquer avec M6 Le paquet est envoy\u00e9 de M1 vers le switch R1, R1 \u00ab constate \u00bb que M6 n\u2019est pas sur le r\u00e9seau local 1, R1 envoie donc le paquet vers le routeur A. Le routeur A n'est pas connect\u00e9 directement au r\u00e9seau localR2 (r\u00e9seau local de la machine M6), mais il \"sait\" que le routeur B est connect\u00e9 au r\u00e9seau local 2. Le routeur A envoie le paquet vers le routeur B. Le routeur B est connect\u00e9 au r\u00e9seau local 2, il envoie le paquet au Switch R2. Le Switch R2 envoie le paquet \u00e0 la machine M6. M1 \u2192 R1\u2192 Routeur A \u2192 Routeur B \u2192 R2 \u2192 M6 cas n\u00b03 : M1 veut communiquer avec M9 M1 \u2192 R1 \u2192 Routeur A \u2192 Routeur B \u2192 Routeur D \u2192 Routeur E \u2192 R4 \u2192 M9 Restons sur ce cas n\u00b03 : comme vous l\u2019avez peut-\u00eatre constat\u00e9, le chemin donn\u00e9 ci-dessus n\u2019est pas l\u2019unique possibilit\u00e9, en effet on aurait pu aussi avoir : M1 \u2192 R1 \u2192 Routeur A \u2192 Routeur H \u2192 Routeur F \u2192 Routeur E \u2192 R4 \u2192 M9 Il est tr\u00e8s important de bien comprendre qu\u2019il existe souvent plusieurs chemins possibles pour relier 2 ordinateurs : cas n\u00b04 : M13 veut communiquer avec M9 Nous pouvons avoir : M13 \u2192 R6 \u2192 Routeur G \u2192 Routeur F \u2192 Routeur E \u2192 R4 \u2192 M9 ou encore : M13 \u2192 R6 \u2192 Routeur G \u2192 Routeur F \u2192 Routeur H \u2192 Routeur C \u2192 Routeur D \u2192 Routeur E \u2192 R4 \u2192 M9 On pourrait penser que le chemin \"Routeur F \u2192 Routeur E\" est plus rapide et donc pr\u00e9f\u00e9rable au chemin \"Routeur F \u2192 Routeur H\", cela est sans doute vrai, mais imaginez qu\u2019il y ait un probl\u00e8me technique entre le Routeur F et le Routeur E, l\u2019existence du chemin \"Routeur F \u2192 Routeur H\" permettra tout de m\u00eame d\u2019\u00e9tablir une communication entre M13 et M9. On peut se poser la question : comment les switchs ou les routeurs proc\u00e8dent pour amener les paquets \u00e0 bon port. Nous avons vu l'ann\u00e9e derni\u00e8re que 2 machines appartenant au m\u00eame r\u00e9seau local doivent avoir la m\u00eame adresse r\u00e9seau (encore une fois, n'h\u00e9sitez pas \u00e0 relire le cours de premi\u00e8re). Dans le sch\u00e9ma ci-dessus M1 et M4 n'ont pas la m\u00eame adresse r\u00e9seau (car elles n'appartiennent pas au m\u00eame r\u00e9seau local), si M1 cherche \u00e0 entrer en communication avec M4, le switch R1 va constater que M4 n'appartient pas au r\u00e9seau local (gr\u00e2ce \u00e0 son adresse IP), R1 va donc envoyer le paquet de donn\u00e9es vers le routeur A. Cela sera donc au routeur A de g\u00e9rer le \"probl\u00e8me\" : comment atteindre M4 ? Chaque routeur poss\u00e8de une table de routage. Une table de routage peut \u00eatre vue comme un tableau qui va contenir des informations permettant au routeur d'envoyer le paquet de donn\u00e9es dans la \"bonne direction\". Soit le sch\u00e9ma suivant : Sur le sch\u00e9ma ci-dessus, le choix des adresses IP des machines a \u00e9t\u00e9 fait au \"hasard\" (ne cherchez pas une signification l\u00e0 o\u00f9 il n'y en a pas). En revanche, vous pouvez v\u00e9rifier que tout est coh\u00e9rent : adresses machines avec adresses r\u00e9seaux (les adresses r\u00e9seaux sont not\u00e9es \u00e0 c\u00f4t\u00e9 des diff\u00e9rents switchs (par exemple le switch R1 est utilis\u00e9 dans le r\u00e9seau d'adresse 172.168.0.0/16)). Vous avez sans doute remarqu\u00e9 que nous avons 2 routeurs : le routeur A qui poss\u00e8de 3 interfaces r\u00e9seau que l'on nomme eth0, eth1 et eth2. Les adresses IP li\u00e9es \u00e0 ces interfaces r\u00e9seau sont : 172.168.255.254/16 (eth0), 172.169.255.254/16 (eth2) et 192.168.7.1/24 (eth1) le routeur G qui poss\u00e8de 2 interfaces r\u00e9seau que l'on nomme eth0 et eth1. Les adresses IP li\u00e9es \u00e0 ces interfaces r\u00e9seau sont : 10.255.255.254/8 (eth0) et 192.168.7.2/24 (eth1) Voici les informations pr\u00e9sentes dans la table de routage de A : le routeur A est directement reli\u00e9 au r\u00e9seau 172.168.0.0/16 par l'interm\u00e9diaire de son interface eth0 le routeur A est directement reli\u00e9 au r\u00e9seau 172.169.0.0/16 par l'interm\u00e9diaire de son interface eth2 le routeur A est directement reli\u00e9 au r\u00e9seau 192.168.7.0/24 par l'interm\u00e9diaire de son interface eth1 (le r\u00e9seau 192.168.7.0/24 est un peu particulier car il est uniquement compos\u00e9 des routeurs A et G) le routeur A n'est pas directement reli\u00e9 au r\u00e9seau 10.0.0.0/8 mais par contre il \"sait\" que les paquets \u00e0 destination de ce r\u00e9seau doivent \u00eatre envoy\u00e9 \u00e0 la machine d'adresse IP 192.168.7.2/24 (c'est \u00e0 dire le routeur G qui lui est directement reli\u00e9 au r\u00e9seau 10.0.0.0/8) On peut r\u00e9sumer tout cela avec le tableau suivant (table de routage simplifi\u00e9e de A) : r\u00e9seau moyen de l'atteindre m\u00e9trique 172.168.0.0/16 eth0 0 192.168.7.0/24 eth1 0 172.169.0.0/16 eth2 0 10.0.0.0/8 192.168.7.2/24 1 M\u00eame si dans les v\u00e9ritables tables de routage on utilise exclusivement les adresses IP, on pourra, dans le cadre de ce cours, utiliser les noms \u00e0 la place des adresses IP (On dira pour le sch\u00e9ma ci-dessus que M1, M2 et M3 appartiennent au r\u00e9seau R1, M4, M5 et M6 appartiennent au r\u00e9seau R2 et que M7 et M8 appartiennent au r\u00e9seau R3). On aura alors la table de routage \u00e9crit de cette fa\u00e7on : r\u00e9seau moyen de l'atteindre m\u00e9trique r\u00e9seau R1 eth0 0 r\u00e9seau routeur G eth1 0 r\u00e9seau R3 eth2 0 r\u00e9seau R2 routeur G 1 On peut traduire ce tableau par : pour atteindre le r\u00e9seau R1, on doit \"sortir\" du routeur par eth0 (le r\u00e9seau R1 est directement reli\u00e9 au routeur A) pour atteindre le routeur G, on doit \"sortir\" du routeur par eth1 (le routeur G est directement reli\u00e9 au routeur A) pour atteindre le r\u00e9seau R3, on doit \"sortir\" du routeur par eth2 (le r\u00e9seau R3 est directement reli\u00e9 au routeur A) pour atteindre le r\u00e9seau R2, on doit \"envoyer\" le paquet de donn\u00e9es vers le routeur G qui \"saura quoi faire avec\" (le r\u00e9seau R2 n'est pas directement reli\u00e9 au routeur A) Dans des r\u00e9seaux tr\u00e8s complexes, chaque routeur aura une table de routage qui comportera de tr\u00e8s nombreuses lignes (des dizaines voir des centaines...). En effet chaque routeur devra savoir vers quelle interface r\u00e9seau il faudra envoyer un paquet afin qu'il puisse atteindre sa destination. On peut trouver dans une table de routage plusieurs lignes pour une m\u00eame destination, il peut en effet, \u00e0 partir d'un routeur donn\u00e9, exister plusieurs chemins possibles pour atteindre la destination. Dans le cas o\u00f9 il existe plusieurs chemins possibles pour atteindre la m\u00eame destination, le routeur va choisir le \"chemin le plus court\". Pour choisir ce chemin le plus court, le routeur va utiliser la m\u00e9trique : plus la valeur de la m\u00e9trique est petite, plus le chemin pour atteindre le r\u00e9seau est \"court\". Un r\u00e9seau directement li\u00e9 \u00e0 un routeur aura une m\u00e9trique de 0. Comment un routeur arrive \u00e0 remplir sa table de routage ? La r\u00e9ponse est simple pour les r\u00e9seaux qui sont directement reli\u00e9s au routeur (m\u00e9trique = 0), mais comment cela se passe-t-il pour les autres r\u00e9seaux (m\u00e9trique sup\u00e9rieure \u00e0 z\u00e9ro) ? Il existe 2 m\u00e9thodes : le routage statique : chaque ligne doit \u00eatre renseign\u00e9e \"\u00e0 la main\". Cette solution est seulement envisageable pour des tr\u00e8s petits r\u00e9seaux de r\u00e9seaux le routage dynamique : tout se fait \"automatiquement\", on utilise des protocoles qui vont permettre de \"d\u00e9couvrir\" les diff\u00e9rentes routes automatiquement afin de pouvoir remplir la table de routage tout aussi automatiquement. 2) protocoles de routage Un r\u00e9seau de r\u00e9seaux comportant des routeurs peut \u00eatre mod\u00e9lis\u00e9 par un graphe (si n\u00e9cessaire revoir le cours sur les graphes): chaque routeur est un sommet et chaque liaison entre les routeurs ou entre un routeur et un switch est une ar\u00eate. Les algorithmes utilis\u00e9s par les protocoles de routages sont donc des algorithmes issus de la th\u00e9orie de graphes. On trouve plusieurs protocoles de routage, nous allons en \u00e9tudier deux : RIP (Routing Information Protocol) et OSPF (Open Shortest Path First). a) le protocole RIP Au d\u00e9part, les tables de routage contiennent uniquement les r\u00e9seaux qui sont directement reli\u00e9s au routeur (dans notre exemple ci-dessus, \u00e0 l'origine, la table de routage de A contient uniquement les r\u00e9seaux 172.168.0.0/16, 192.168.7.0/24 et 172.169.0.0/16). Chaque routeur envoie p\u00e9riodiquement (toutes les 30 secondes) \u00e0 tous ses voisins (routeurs adjacents) un message. Ce message contient la liste de tous les r\u00e9seaux qu'il connait (dans l'exemple ci-dessus, le routeur A envoie un message au routeur G avec les informations suivantes : \"je connais les r\u00e9seaux 172.168.0.0/16, 192.168.7.0/24 et 172.169.0.0/16\". De la m\u00eame mani\u00e8re G envoie un message \u00e0 A avec les informations suivantes : \"je connais les r\u00e9seaux 192.168.7.0/24 et 10.0.0.0/8\"). \u00c0 la fin de cet \u00e9change, les routeurs mettent \u00e0 jour leur table de routage avec les informations re\u00e7ues (dans l'exemple ci-dessus, le routeur A va pouvoir ajouter le r\u00e9seau 10.0.0.0/8 \u00e0 sa table de routage. Le routeur A \"sait\" maintenant qu'un paquet \u00e0 destination du r\u00e9seau 10.0.0.0/8 devra transiter par le routeur G). Pour renseigner la colonne \"m\u00e9trique\", le protocole utilise le nombre de sauts, autrement dit, le nombre de routeurs qui doivent \u00eatre travers\u00e9s pour atteindre le r\u00e9seau cible (dans la table de routage de A, on aura donc une m\u00e9trique de 1 pour le r\u00e9seau 10.0.0.0/8 car depuis A il est n\u00e9cessaire de traverser le routeur G pour atteindre le r\u00e9seau 10.0.0.0/8) Le protocole RIP s'appuie sur l'algorithme de Bellman-Ford (algorithme qui permet de calculer les plus courts chemins dans un graphe, revoir si n\u00e9cessaire le cours Algorithmes sur les graphes). Prenons un exemple avec le r\u00e9seau suivant : \u00c9tablissons la table de routage du routeur A en nous basant sur le protocole RIP : le routeur A est directement reli\u00e9 au r\u00e9seau R1 (adresse r\u00e9seau 172.18.0.0/16) par eth0. le routeur A est directement reli\u00e9 au routeur B (r\u00e9seau 192.168.1.0/24) par eth1 le routeur A est directement reli\u00e9 au routeur C (r\u00e9seau 192.168.2.0/24) par eth2 le routeur A n'est pas directement reli\u00e9 au r\u00e9seau R2 (adresse r\u00e9seau 172.17.0.0/16) mais par contre il \"sait\" qu'il peut l'atteindre soit en passant par le routeur C (adresse 192.168.2.2/24) en une \u00e9tape ou soit en passant par le routeur B (adresse 192.168.1.2/24) en deux \u00e9tapes (B et C) le routeur A n'est pas directement reli\u00e9 au r\u00e9seau R3 (adresse r\u00e9seau 172.16.0.0/16) mais il \"sait\" qu'il peut l'atteindre soit en passant par le routeur B (192.168.1.2/24) en une \u00e9tape ou soit en passant par le routeur C (192.168.2.2/24) en deux \u00e9tapes (C et B) Ce qui nous donne donc la table de routage suivante : r\u00e9seau moyen de l'atteindre m\u00e9trique 172.18.0.0/16 eth0 0 192.168.1.0/24 eth1 0 192.168.2.0/24 eth2 0 172.17.0.0/16 192.168.2.2/24 1 172.17.0.0/16 192.168.1.2/24 2 172.16.0.0/16 192.168.1.2/24 1 172.16.0.0/16 192.168.2.2/24 2 Comme d\u00e9j\u00e0 vu plus haut, on peut aussi donner la table de routage de mani\u00e8re simplifi\u00e9e, en utilisant les noms des \u00e9l\u00e9ments \u00e0 la place des adresses IP (mais c'est aussi moins \"r\u00e9aliste\") : r\u00e9seau moyen de l'atteindre m\u00e9trique R1 eth0 0 R\u00e9seau Routeur B eth1 0 R\u00e9seau Routeur C eth2 0 R2 Routeur C 1 R2 Routeur B 2 R3 Routeur B 1 R3 Routeur C 2 pour un paquet de donn\u00e9es allant de R1 \u00e0 R2, la route privil\u00e9gi\u00e9e sera donc : R1 -> Routeur A -> Routeur C -> R2. Mais en cas de probl\u00e8me (panne notamment) la route R1 -> Routeur A -> Routeur B -> Routeur C -> R2 sera possible. pour un paquet de donn\u00e9es allant de R1 \u00e0 R3, la route privil\u00e9gi\u00e9e sera donc : R1 -> Routeur A -> Routeur B -> R3. Mais en cas de probl\u00e8me la route R1 -> Routeur A -> Routeur C -> Routeur B -> R3 sera possible. Dans certains exercices, pour le calcul de la m\u00e9trique, on compte le nombre total de routeurs travers\u00e9s (y compris, dans notre exemple le routeur A), cela nous donne donc un d\u00e9calage de un, et on obtient alors : r\u00e9seau moyen de l'atteindre m\u00e9trique R1 eth0 0 R\u00e9seau Routeur B eth1 0 R\u00e9seau Routeur C eth2 0 R2 Routeur C 2 R2 Routeur B 3 R3 Routeur B 2 R3 Routeur C 3 Comme c'est juste une histoire de convention, il suffit de se mettre d'accord au d\u00e9part sur la convention utilis\u00e9e. Le protocole RIP est aujourd'hui tr\u00e8s rarement utilis\u00e9 dans les grandes infrastructures. En effet, il g\u00e9n\u00e8re, du fait de l'envoi p\u00e9riodique de message, un trafic r\u00e9seau important (surtout si les tables de routages contiennent beaucoup d'entr\u00e9es). De plus, le protocole RIP est limit\u00e9 \u00e0 15 sauts (on traverse au maximum 15 routeurs pour atteindre sa destination). On lui pr\u00e9f\u00e8re donc souvent le protocole OSPF. b) le protocole OSPF Comme dans le cas du protocole RIP, nous allons retrouver des \u00e9changes d'informations entre les routeurs (ces \u00e9changes sont plus \"intelligents\" dans le cas d'OSPF, ils permettent donc de r\u00e9duire l'occupation du r\u00e9seau). Nous n'allons pas rentrer dans les d\u00e9tails de ces \u00e9changes et nous allons principalement insister sur la m\u00e9trique produite par OSPF. Le protocole OSPF, au contraire de RIP, n'utilise pas le \"nombre de sauts n\u00e9cessaire\" pour \u00e9tablir la m\u00e9trique, mais la notion de \"co\u00fbt des routes\". Dans les messages \u00e9chang\u00e9s par les routeurs on trouve le co\u00fbt de chaque liaison (plus le co\u00fbt est grand et moins la liaison est int\u00e9ressante). Quand on parle de \"liaison\" on parle simplement du c\u00e2ble qui relie un routeur \u00e0 un autre routeur. Le protocole OSPF permet de connaitre le co\u00fbt de chaque liaison entre routeurs, et donc, de connaitre le co\u00fbt d'une route (en ajoutant le co\u00fbt de chaque liaison travers\u00e9e). On notera que pour effectuer ces calculs, le protocole OSPF s'appuie sur l'algorithme de Dijkstra (revoir si n\u00e9cessaire le cours Algorithmes sur les graphes) . Mais sur quoi repose cette notion de co\u00fbt ? La notion de co\u00fbt est directement li\u00e9e au d\u00e9bit des liaisons entre les routeurs. Le d\u00e9bit correspond au nombre de bits de donn\u00e9es qu'il est possible de faire passer dans un r\u00e9seau par seconde. Le d\u00e9bit est donc donn\u00e9 en bits par seconde (bps), mais on trouve souvent des kilo bits par seconde (kbps) ou encore des m\u00e9ga bits par seconde (Mbps) => 1 kbps = 1000 bps et 1 Mbps = 1000 kbps. Connaissant le d\u00e9bit d'une liaison, il est possible de calculer le co\u00fbt d'une liaison \u00e0 l'aide de la formule suivante : \\(co\u00fbt = \\frac{10^8}{d\u00e9bit}\\) dans la formule ci-dessus le d\u00e9bit est en bits par seconde Pour obtenir la m\u00e9trique d'une route, il suffit d'additionner les co\u00fbts de chaque liaison (par exemple si pour aller d'un r\u00e9seau 1 \u00e0 un r\u00e9seau 2 on doit traverser une liaison de co\u00fbt 1, puis une liaison de co\u00fbt 10 et enfin une liaison de co\u00fbt 1, la m\u00e9trique de cette route sera de 1 + 10 + 1 = 12) \u00c9videmment, comme dans le cas de RIP, les routes ayant les m\u00e9triques les plus faibles sont privil\u00e9gi\u00e9es. Reprenons l'exemple ci-dessus : Prenons un exemple avec les d\u00e9bits suivants : liaison routeur A - routeur B : 1 Mbps liaison routeur A - routeur C : 10 Mbps liaison routeur C - routeur B : 10 Mbps Commen\u00e7ons par calculer les co\u00fbts des liaisons inter-routeurs liaison routeur A - routeur B : 10 8 /10 6 = 100 liaison routeur A - routeur C : 10 8 /10 7 = 10 liaison routeur C - routeur B : 10 8 /10 7 = 10 pour faire : Routeur A -> Routeur C le co\u00fbt est de 10 Routeur A -> Routeur B le co\u00fbt est de 100 Routeur A -> Routeur C -> Routeur B le co\u00fbt est 10+10=20 Routeur A -> Routeur B -> Routeur C le co\u00fbt est 100+10=110 Ce qui nous donne la table de routage suivante : r\u00e9seau moyen de l'atteindre m\u00e9trique 172.18.0.0/16 eth0 0 192.168.1.0/24 eth1 0 192.168.2.0/24 eth2 0 172.17.0.0/16 192.168.2.2/24 10 172.17.0.0/16 192.168.1.2/24 110 172.16.0.0/16 192.168.1.2/24 100 172.16.0.0/16 192.168.2.2/24 20 ou encore en se passant des adresses IP : r\u00e9seau moyen de l'atteindre m\u00e9trique R1 eth0 0 R\u00e9seau Routeur B eth1 0 R\u00e9seau Routeur C eth2 0 R2 Routeur C 10 R2 Routeur B 110 R3 Routeur B 100 R3 Routeur C 20 pour un paquet de donn\u00e9es allant de R1 \u00e0 R2, la route privil\u00e9gi\u00e9e sera donc : R1 -> Routeur A -> Routeur C -> R2. pour un paquet de donn\u00e9es allant de R1 \u00e0 R3, la route privil\u00e9gi\u00e9e sera donc : R1 -> Routeur A -> Routeur C -> Routeur B -> R3 (on constate une diff\u00e9rence avec ce que nous avions trouv\u00e9 avec le protocole RIP).","title":"Cours"},{"location":"c11c/#1-routage-des-paquets","text":"Pour bien suivre ce cours, il est n\u00e9cessaire de maitriser les bases sur les r\u00e9seaux (r\u00e9seau local, adresse IP, adresse r\u00e9seau...) N'h\u00e9sitez pas \u00e0 vous replonger dans le cours de premi\u00e8re si n\u00e9cessaire. Les r\u00e9seaux locaux peuvent \u00eatre reli\u00e9s entre eux par l'interm\u00e9diaire de routeurs. Il ne faut jamais perdre de vue qu'Internet r\u00e9sulte de l'interconnexion de r\u00e9seaux par des routeurs. Nous avons sur ce sch\u00e9ma les \u00e9l\u00e9ments suivants : 15 ordinateurs : M1 \u00e0 M15 6 switchs : R1 \u00e0 R6 8 routeurs : A, B, C, D, E, F, G et H Comme nous l'avons d\u00e9j\u00e0 dit ci-dessus, un routeur permet de relier ensemble plusieurs r\u00e9seaux locaux. Un routeur est compos\u00e9 d\u2019un nombre plus ou moins important d\u2019interfaces r\u00e9seau (cartes r\u00e9seau). Les routeurs les plus simples que l\u2019on puisse rencontrer permettent de relier ensemble deux r\u00e9seaux (ils poss\u00e8dent alors 2 interfaces r\u00e9seau), mais il existe des routeurs capables de relier ensemble une dizaine de r\u00e9seaux. N'importe quel ordinateur peut jouer le r\u00f4le de routeur (\u00e0 partir du moment o\u00f9 il poss\u00e8de au moins 2 interfaces r\u00e9seau), mais on rencontre souvent des \"machines\" d\u00e9di\u00e9es (par exemple de marque CISCO) Revenons maintenant \u00e0 l\u2019analyse de notre sch\u00e9ma : Nous avons 6 r\u00e9seaux locaux, chaque r\u00e9seau local poss\u00e8de son propre switch. Les ordinateurs M1, M2 et M3 appartiennent au r\u00e9seau local 1. Les ordinateurs M4, M5 et M6 appartiennent au r\u00e9seau local 2. Nous pouvons synth\u00e9tiser tout cela comme suit : r\u00e9seau local 1 : M1, M2 et M3 r\u00e9seau local 2 : M4, M5 et M6 r\u00e9seau local 3 : M7 et M8 r\u00e9seau local 4 : M9 et M10 r\u00e9seau local 5 : M11 et M12 r\u00e9seau local 6 : M13, M14 et M15 Voici quelques exemples de communications entre 2 ordinateurs :","title":"1) routage des paquets"},{"location":"c11c/#cas-n1-m1-veut-communiquer-avec-m3","text":"Le paquet est envoy\u00e9 de M1 vers le switch R1, R1 \"constate\" que M3 se trouve bien dans le r\u00e9seau local 1, le paquet est donc envoy\u00e9 directement vers M3. On peut r\u00e9sumer le trajet du paquet par : M1\u2192R1\u2192M3","title":"cas n\u00b01 : M1 veut communiquer avec M3"},{"location":"c11c/#cas-n2-m1-veut-communiquer-avec-m6","text":"Le paquet est envoy\u00e9 de M1 vers le switch R1, R1 \u00ab constate \u00bb que M6 n\u2019est pas sur le r\u00e9seau local 1, R1 envoie donc le paquet vers le routeur A. Le routeur A n'est pas connect\u00e9 directement au r\u00e9seau localR2 (r\u00e9seau local de la machine M6), mais il \"sait\" que le routeur B est connect\u00e9 au r\u00e9seau local 2. Le routeur A envoie le paquet vers le routeur B. Le routeur B est connect\u00e9 au r\u00e9seau local 2, il envoie le paquet au Switch R2. Le Switch R2 envoie le paquet \u00e0 la machine M6. M1 \u2192 R1\u2192 Routeur A \u2192 Routeur B \u2192 R2 \u2192 M6","title":"cas n\u00b02 : M1 veut communiquer avec M6"},{"location":"c11c/#cas-n3-m1-veut-communiquer-avec-m9","text":"M1 \u2192 R1 \u2192 Routeur A \u2192 Routeur B \u2192 Routeur D \u2192 Routeur E \u2192 R4 \u2192 M9 Restons sur ce cas n\u00b03 : comme vous l\u2019avez peut-\u00eatre constat\u00e9, le chemin donn\u00e9 ci-dessus n\u2019est pas l\u2019unique possibilit\u00e9, en effet on aurait pu aussi avoir : M1 \u2192 R1 \u2192 Routeur A \u2192 Routeur H \u2192 Routeur F \u2192 Routeur E \u2192 R4 \u2192 M9 Il est tr\u00e8s important de bien comprendre qu\u2019il existe souvent plusieurs chemins possibles pour relier 2 ordinateurs :","title":"cas n\u00b03 : M1 veut communiquer avec M9"},{"location":"c11c/#cas-n4-m13-veut-communiquer-avec-m9","text":"Nous pouvons avoir : M13 \u2192 R6 \u2192 Routeur G \u2192 Routeur F \u2192 Routeur E \u2192 R4 \u2192 M9 ou encore : M13 \u2192 R6 \u2192 Routeur G \u2192 Routeur F \u2192 Routeur H \u2192 Routeur C \u2192 Routeur D \u2192 Routeur E \u2192 R4 \u2192 M9 On pourrait penser que le chemin \"Routeur F \u2192 Routeur E\" est plus rapide et donc pr\u00e9f\u00e9rable au chemin \"Routeur F \u2192 Routeur H\", cela est sans doute vrai, mais imaginez qu\u2019il y ait un probl\u00e8me technique entre le Routeur F et le Routeur E, l\u2019existence du chemin \"Routeur F \u2192 Routeur H\" permettra tout de m\u00eame d\u2019\u00e9tablir une communication entre M13 et M9. On peut se poser la question : comment les switchs ou les routeurs proc\u00e8dent pour amener les paquets \u00e0 bon port. Nous avons vu l'ann\u00e9e derni\u00e8re que 2 machines appartenant au m\u00eame r\u00e9seau local doivent avoir la m\u00eame adresse r\u00e9seau (encore une fois, n'h\u00e9sitez pas \u00e0 relire le cours de premi\u00e8re). Dans le sch\u00e9ma ci-dessus M1 et M4 n'ont pas la m\u00eame adresse r\u00e9seau (car elles n'appartiennent pas au m\u00eame r\u00e9seau local), si M1 cherche \u00e0 entrer en communication avec M4, le switch R1 va constater que M4 n'appartient pas au r\u00e9seau local (gr\u00e2ce \u00e0 son adresse IP), R1 va donc envoyer le paquet de donn\u00e9es vers le routeur A. Cela sera donc au routeur A de g\u00e9rer le \"probl\u00e8me\" : comment atteindre M4 ? Chaque routeur poss\u00e8de une table de routage. Une table de routage peut \u00eatre vue comme un tableau qui va contenir des informations permettant au routeur d'envoyer le paquet de donn\u00e9es dans la \"bonne direction\". Soit le sch\u00e9ma suivant : Sur le sch\u00e9ma ci-dessus, le choix des adresses IP des machines a \u00e9t\u00e9 fait au \"hasard\" (ne cherchez pas une signification l\u00e0 o\u00f9 il n'y en a pas). En revanche, vous pouvez v\u00e9rifier que tout est coh\u00e9rent : adresses machines avec adresses r\u00e9seaux (les adresses r\u00e9seaux sont not\u00e9es \u00e0 c\u00f4t\u00e9 des diff\u00e9rents switchs (par exemple le switch R1 est utilis\u00e9 dans le r\u00e9seau d'adresse 172.168.0.0/16)). Vous avez sans doute remarqu\u00e9 que nous avons 2 routeurs : le routeur A qui poss\u00e8de 3 interfaces r\u00e9seau que l'on nomme eth0, eth1 et eth2. Les adresses IP li\u00e9es \u00e0 ces interfaces r\u00e9seau sont : 172.168.255.254/16 (eth0), 172.169.255.254/16 (eth2) et 192.168.7.1/24 (eth1) le routeur G qui poss\u00e8de 2 interfaces r\u00e9seau que l'on nomme eth0 et eth1. Les adresses IP li\u00e9es \u00e0 ces interfaces r\u00e9seau sont : 10.255.255.254/8 (eth0) et 192.168.7.2/24 (eth1) Voici les informations pr\u00e9sentes dans la table de routage de A : le routeur A est directement reli\u00e9 au r\u00e9seau 172.168.0.0/16 par l'interm\u00e9diaire de son interface eth0 le routeur A est directement reli\u00e9 au r\u00e9seau 172.169.0.0/16 par l'interm\u00e9diaire de son interface eth2 le routeur A est directement reli\u00e9 au r\u00e9seau 192.168.7.0/24 par l'interm\u00e9diaire de son interface eth1 (le r\u00e9seau 192.168.7.0/24 est un peu particulier car il est uniquement compos\u00e9 des routeurs A et G) le routeur A n'est pas directement reli\u00e9 au r\u00e9seau 10.0.0.0/8 mais par contre il \"sait\" que les paquets \u00e0 destination de ce r\u00e9seau doivent \u00eatre envoy\u00e9 \u00e0 la machine d'adresse IP 192.168.7.2/24 (c'est \u00e0 dire le routeur G qui lui est directement reli\u00e9 au r\u00e9seau 10.0.0.0/8) On peut r\u00e9sumer tout cela avec le tableau suivant (table de routage simplifi\u00e9e de A) : r\u00e9seau moyen de l'atteindre m\u00e9trique 172.168.0.0/16 eth0 0 192.168.7.0/24 eth1 0 172.169.0.0/16 eth2 0 10.0.0.0/8 192.168.7.2/24 1 M\u00eame si dans les v\u00e9ritables tables de routage on utilise exclusivement les adresses IP, on pourra, dans le cadre de ce cours, utiliser les noms \u00e0 la place des adresses IP (On dira pour le sch\u00e9ma ci-dessus que M1, M2 et M3 appartiennent au r\u00e9seau R1, M4, M5 et M6 appartiennent au r\u00e9seau R2 et que M7 et M8 appartiennent au r\u00e9seau R3). On aura alors la table de routage \u00e9crit de cette fa\u00e7on : r\u00e9seau moyen de l'atteindre m\u00e9trique r\u00e9seau R1 eth0 0 r\u00e9seau routeur G eth1 0 r\u00e9seau R3 eth2 0 r\u00e9seau R2 routeur G 1 On peut traduire ce tableau par : pour atteindre le r\u00e9seau R1, on doit \"sortir\" du routeur par eth0 (le r\u00e9seau R1 est directement reli\u00e9 au routeur A) pour atteindre le routeur G, on doit \"sortir\" du routeur par eth1 (le routeur G est directement reli\u00e9 au routeur A) pour atteindre le r\u00e9seau R3, on doit \"sortir\" du routeur par eth2 (le r\u00e9seau R3 est directement reli\u00e9 au routeur A) pour atteindre le r\u00e9seau R2, on doit \"envoyer\" le paquet de donn\u00e9es vers le routeur G qui \"saura quoi faire avec\" (le r\u00e9seau R2 n'est pas directement reli\u00e9 au routeur A) Dans des r\u00e9seaux tr\u00e8s complexes, chaque routeur aura une table de routage qui comportera de tr\u00e8s nombreuses lignes (des dizaines voir des centaines...). En effet chaque routeur devra savoir vers quelle interface r\u00e9seau il faudra envoyer un paquet afin qu'il puisse atteindre sa destination. On peut trouver dans une table de routage plusieurs lignes pour une m\u00eame destination, il peut en effet, \u00e0 partir d'un routeur donn\u00e9, exister plusieurs chemins possibles pour atteindre la destination. Dans le cas o\u00f9 il existe plusieurs chemins possibles pour atteindre la m\u00eame destination, le routeur va choisir le \"chemin le plus court\". Pour choisir ce chemin le plus court, le routeur va utiliser la m\u00e9trique : plus la valeur de la m\u00e9trique est petite, plus le chemin pour atteindre le r\u00e9seau est \"court\". Un r\u00e9seau directement li\u00e9 \u00e0 un routeur aura une m\u00e9trique de 0. Comment un routeur arrive \u00e0 remplir sa table de routage ? La r\u00e9ponse est simple pour les r\u00e9seaux qui sont directement reli\u00e9s au routeur (m\u00e9trique = 0), mais comment cela se passe-t-il pour les autres r\u00e9seaux (m\u00e9trique sup\u00e9rieure \u00e0 z\u00e9ro) ? Il existe 2 m\u00e9thodes : le routage statique : chaque ligne doit \u00eatre renseign\u00e9e \"\u00e0 la main\". Cette solution est seulement envisageable pour des tr\u00e8s petits r\u00e9seaux de r\u00e9seaux le routage dynamique : tout se fait \"automatiquement\", on utilise des protocoles qui vont permettre de \"d\u00e9couvrir\" les diff\u00e9rentes routes automatiquement afin de pouvoir remplir la table de routage tout aussi automatiquement.","title":"cas n\u00b04 : M13 veut communiquer avec M9"},{"location":"c11c/#2-protocoles-de-routage","text":"Un r\u00e9seau de r\u00e9seaux comportant des routeurs peut \u00eatre mod\u00e9lis\u00e9 par un graphe (si n\u00e9cessaire revoir le cours sur les graphes): chaque routeur est un sommet et chaque liaison entre les routeurs ou entre un routeur et un switch est une ar\u00eate. Les algorithmes utilis\u00e9s par les protocoles de routages sont donc des algorithmes issus de la th\u00e9orie de graphes. On trouve plusieurs protocoles de routage, nous allons en \u00e9tudier deux : RIP (Routing Information Protocol) et OSPF (Open Shortest Path First).","title":"2) protocoles de routage"},{"location":"c11c/#a-le-protocole-rip","text":"Au d\u00e9part, les tables de routage contiennent uniquement les r\u00e9seaux qui sont directement reli\u00e9s au routeur (dans notre exemple ci-dessus, \u00e0 l'origine, la table de routage de A contient uniquement les r\u00e9seaux 172.168.0.0/16, 192.168.7.0/24 et 172.169.0.0/16). Chaque routeur envoie p\u00e9riodiquement (toutes les 30 secondes) \u00e0 tous ses voisins (routeurs adjacents) un message. Ce message contient la liste de tous les r\u00e9seaux qu'il connait (dans l'exemple ci-dessus, le routeur A envoie un message au routeur G avec les informations suivantes : \"je connais les r\u00e9seaux 172.168.0.0/16, 192.168.7.0/24 et 172.169.0.0/16\". De la m\u00eame mani\u00e8re G envoie un message \u00e0 A avec les informations suivantes : \"je connais les r\u00e9seaux 192.168.7.0/24 et 10.0.0.0/8\"). \u00c0 la fin de cet \u00e9change, les routeurs mettent \u00e0 jour leur table de routage avec les informations re\u00e7ues (dans l'exemple ci-dessus, le routeur A va pouvoir ajouter le r\u00e9seau 10.0.0.0/8 \u00e0 sa table de routage. Le routeur A \"sait\" maintenant qu'un paquet \u00e0 destination du r\u00e9seau 10.0.0.0/8 devra transiter par le routeur G). Pour renseigner la colonne \"m\u00e9trique\", le protocole utilise le nombre de sauts, autrement dit, le nombre de routeurs qui doivent \u00eatre travers\u00e9s pour atteindre le r\u00e9seau cible (dans la table de routage de A, on aura donc une m\u00e9trique de 1 pour le r\u00e9seau 10.0.0.0/8 car depuis A il est n\u00e9cessaire de traverser le routeur G pour atteindre le r\u00e9seau 10.0.0.0/8) Le protocole RIP s'appuie sur l'algorithme de Bellman-Ford (algorithme qui permet de calculer les plus courts chemins dans un graphe, revoir si n\u00e9cessaire le cours Algorithmes sur les graphes). Prenons un exemple avec le r\u00e9seau suivant : \u00c9tablissons la table de routage du routeur A en nous basant sur le protocole RIP : le routeur A est directement reli\u00e9 au r\u00e9seau R1 (adresse r\u00e9seau 172.18.0.0/16) par eth0. le routeur A est directement reli\u00e9 au routeur B (r\u00e9seau 192.168.1.0/24) par eth1 le routeur A est directement reli\u00e9 au routeur C (r\u00e9seau 192.168.2.0/24) par eth2 le routeur A n'est pas directement reli\u00e9 au r\u00e9seau R2 (adresse r\u00e9seau 172.17.0.0/16) mais par contre il \"sait\" qu'il peut l'atteindre soit en passant par le routeur C (adresse 192.168.2.2/24) en une \u00e9tape ou soit en passant par le routeur B (adresse 192.168.1.2/24) en deux \u00e9tapes (B et C) le routeur A n'est pas directement reli\u00e9 au r\u00e9seau R3 (adresse r\u00e9seau 172.16.0.0/16) mais il \"sait\" qu'il peut l'atteindre soit en passant par le routeur B (192.168.1.2/24) en une \u00e9tape ou soit en passant par le routeur C (192.168.2.2/24) en deux \u00e9tapes (C et B) Ce qui nous donne donc la table de routage suivante : r\u00e9seau moyen de l'atteindre m\u00e9trique 172.18.0.0/16 eth0 0 192.168.1.0/24 eth1 0 192.168.2.0/24 eth2 0 172.17.0.0/16 192.168.2.2/24 1 172.17.0.0/16 192.168.1.2/24 2 172.16.0.0/16 192.168.1.2/24 1 172.16.0.0/16 192.168.2.2/24 2 Comme d\u00e9j\u00e0 vu plus haut, on peut aussi donner la table de routage de mani\u00e8re simplifi\u00e9e, en utilisant les noms des \u00e9l\u00e9ments \u00e0 la place des adresses IP (mais c'est aussi moins \"r\u00e9aliste\") : r\u00e9seau moyen de l'atteindre m\u00e9trique R1 eth0 0 R\u00e9seau Routeur B eth1 0 R\u00e9seau Routeur C eth2 0 R2 Routeur C 1 R2 Routeur B 2 R3 Routeur B 1 R3 Routeur C 2 pour un paquet de donn\u00e9es allant de R1 \u00e0 R2, la route privil\u00e9gi\u00e9e sera donc : R1 -> Routeur A -> Routeur C -> R2. Mais en cas de probl\u00e8me (panne notamment) la route R1 -> Routeur A -> Routeur B -> Routeur C -> R2 sera possible. pour un paquet de donn\u00e9es allant de R1 \u00e0 R3, la route privil\u00e9gi\u00e9e sera donc : R1 -> Routeur A -> Routeur B -> R3. Mais en cas de probl\u00e8me la route R1 -> Routeur A -> Routeur C -> Routeur B -> R3 sera possible. Dans certains exercices, pour le calcul de la m\u00e9trique, on compte le nombre total de routeurs travers\u00e9s (y compris, dans notre exemple le routeur A), cela nous donne donc un d\u00e9calage de un, et on obtient alors : r\u00e9seau moyen de l'atteindre m\u00e9trique R1 eth0 0 R\u00e9seau Routeur B eth1 0 R\u00e9seau Routeur C eth2 0 R2 Routeur C 2 R2 Routeur B 3 R3 Routeur B 2 R3 Routeur C 3 Comme c'est juste une histoire de convention, il suffit de se mettre d'accord au d\u00e9part sur la convention utilis\u00e9e. Le protocole RIP est aujourd'hui tr\u00e8s rarement utilis\u00e9 dans les grandes infrastructures. En effet, il g\u00e9n\u00e8re, du fait de l'envoi p\u00e9riodique de message, un trafic r\u00e9seau important (surtout si les tables de routages contiennent beaucoup d'entr\u00e9es). De plus, le protocole RIP est limit\u00e9 \u00e0 15 sauts (on traverse au maximum 15 routeurs pour atteindre sa destination). On lui pr\u00e9f\u00e8re donc souvent le protocole OSPF.","title":"a) le protocole RIP"},{"location":"c11c/#b-le-protocole-ospf","text":"Comme dans le cas du protocole RIP, nous allons retrouver des \u00e9changes d'informations entre les routeurs (ces \u00e9changes sont plus \"intelligents\" dans le cas d'OSPF, ils permettent donc de r\u00e9duire l'occupation du r\u00e9seau). Nous n'allons pas rentrer dans les d\u00e9tails de ces \u00e9changes et nous allons principalement insister sur la m\u00e9trique produite par OSPF. Le protocole OSPF, au contraire de RIP, n'utilise pas le \"nombre de sauts n\u00e9cessaire\" pour \u00e9tablir la m\u00e9trique, mais la notion de \"co\u00fbt des routes\". Dans les messages \u00e9chang\u00e9s par les routeurs on trouve le co\u00fbt de chaque liaison (plus le co\u00fbt est grand et moins la liaison est int\u00e9ressante). Quand on parle de \"liaison\" on parle simplement du c\u00e2ble qui relie un routeur \u00e0 un autre routeur. Le protocole OSPF permet de connaitre le co\u00fbt de chaque liaison entre routeurs, et donc, de connaitre le co\u00fbt d'une route (en ajoutant le co\u00fbt de chaque liaison travers\u00e9e). On notera que pour effectuer ces calculs, le protocole OSPF s'appuie sur l'algorithme de Dijkstra (revoir si n\u00e9cessaire le cours Algorithmes sur les graphes) . Mais sur quoi repose cette notion de co\u00fbt ? La notion de co\u00fbt est directement li\u00e9e au d\u00e9bit des liaisons entre les routeurs. Le d\u00e9bit correspond au nombre de bits de donn\u00e9es qu'il est possible de faire passer dans un r\u00e9seau par seconde. Le d\u00e9bit est donc donn\u00e9 en bits par seconde (bps), mais on trouve souvent des kilo bits par seconde (kbps) ou encore des m\u00e9ga bits par seconde (Mbps) => 1 kbps = 1000 bps et 1 Mbps = 1000 kbps. Connaissant le d\u00e9bit d'une liaison, il est possible de calculer le co\u00fbt d'une liaison \u00e0 l'aide de la formule suivante : \\(co\u00fbt = \\frac{10^8}{d\u00e9bit}\\) dans la formule ci-dessus le d\u00e9bit est en bits par seconde Pour obtenir la m\u00e9trique d'une route, il suffit d'additionner les co\u00fbts de chaque liaison (par exemple si pour aller d'un r\u00e9seau 1 \u00e0 un r\u00e9seau 2 on doit traverser une liaison de co\u00fbt 1, puis une liaison de co\u00fbt 10 et enfin une liaison de co\u00fbt 1, la m\u00e9trique de cette route sera de 1 + 10 + 1 = 12) \u00c9videmment, comme dans le cas de RIP, les routes ayant les m\u00e9triques les plus faibles sont privil\u00e9gi\u00e9es. Reprenons l'exemple ci-dessus : Prenons un exemple avec les d\u00e9bits suivants : liaison routeur A - routeur B : 1 Mbps liaison routeur A - routeur C : 10 Mbps liaison routeur C - routeur B : 10 Mbps Commen\u00e7ons par calculer les co\u00fbts des liaisons inter-routeurs liaison routeur A - routeur B : 10 8 /10 6 = 100 liaison routeur A - routeur C : 10 8 /10 7 = 10 liaison routeur C - routeur B : 10 8 /10 7 = 10 pour faire : Routeur A -> Routeur C le co\u00fbt est de 10 Routeur A -> Routeur B le co\u00fbt est de 100 Routeur A -> Routeur C -> Routeur B le co\u00fbt est 10+10=20 Routeur A -> Routeur B -> Routeur C le co\u00fbt est 100+10=110 Ce qui nous donne la table de routage suivante : r\u00e9seau moyen de l'atteindre m\u00e9trique 172.18.0.0/16 eth0 0 192.168.1.0/24 eth1 0 192.168.2.0/24 eth2 0 172.17.0.0/16 192.168.2.2/24 10 172.17.0.0/16 192.168.1.2/24 110 172.16.0.0/16 192.168.1.2/24 100 172.16.0.0/16 192.168.2.2/24 20 ou encore en se passant des adresses IP : r\u00e9seau moyen de l'atteindre m\u00e9trique R1 eth0 0 R\u00e9seau Routeur B eth1 0 R\u00e9seau Routeur C eth2 0 R2 Routeur C 10 R2 Routeur B 110 R3 Routeur B 100 R3 Routeur C 20 pour un paquet de donn\u00e9es allant de R1 \u00e0 R2, la route privil\u00e9gi\u00e9e sera donc : R1 -> Routeur A -> Routeur C -> R2. pour un paquet de donn\u00e9es allant de R1 \u00e0 R3, la route privil\u00e9gi\u00e9e sera donc : R1 -> Routeur A -> Routeur C -> Routeur B -> R3 (on constate une diff\u00e9rence avec ce que nous avions trouv\u00e9 avec le protocole RIP).","title":"b) le protocole OSPF"},{"location":"c11e/","text":"exercice 11.1 Le r\u00e9seau sch\u00e9matis\u00e9 ci-dessous est constitu\u00e9 de 4 r\u00e9seaux locaux (switch+ordinateurs) : R1, R2, R3 et R4, et de 4 routeurs A, B, C et D. On donne les d\u00e9bits (bandes passantes) de la connexion entre chaque routeur : A-B : 100 Mbps A-D : 1000 Mbps B-C : 10 Mbps C-D : 10 Mbps On propose ci-dessous une table de routage pour le routeur A : 1) Compl\u00e9tez la colonne \u201cm\u00e9trique RIP\u201d du tableau ci-dessus. 2) Compl\u00e9tez la colonne \u201cm\u00e9trique OSPF\u201d du tableau ci-dessus. 3) Un ordinateur appartenant au r\u00e9seau local R1 envoie un paquet de donn\u00e9es \u00e0 un ordinateur appartenant au r\u00e9seau local R2. a) Donnez le chemin suivi par ce paquet de donn\u00e9es si le routeur A utilise le protocole de routage RIP. Justifiez votre r\u00e9ponse. b) Donnez le chemin suivi par ce paquet de donn\u00e9es si le routeur A utilise le protocole de routage OSPF. Justifiez votre r\u00e9ponse. 4) Le routeur D est en panne. Un ordinateur appartenant au r\u00e9seau local R1 envoie un paquet de donn\u00e9es \u00e0 un ordinateur appartenant au r\u00e9seau local R3. Donnez le chemin suivi par ce paquet de donn\u00e9es si le routeur A utilise le protocole de routage OSPF. Justifiez votre r\u00e9ponse. 5) La liaison entre 2 routeurs a un co\u00fbt de 0,2, calculez le d\u00e9bit de cette liaison en bps puis en Mbps. exercices du bac Sujet 1 2021 Exercice 5 Sujet 2 2021 Exercice 5 Sujet 3 2021 Exercice 3 Sujet 6 2021 Exercice 4 Sujet 10 2021 Exercice 1 Sujet 2 2022 Exercice 3 Sujet 3 2022 Exercice 3 Sujet 4 2022 Exercice 2 Sujet 6 2022 Exercice 5 Sujet 7 2022 Exercice 5 Sujet 10 2022 Exercice 5 Sujet 12 2022 Exercice 2 Sujet 13 2022 Exercice 5","title":"Exercices"},{"location":"c11e/#exercice-111","text":"Le r\u00e9seau sch\u00e9matis\u00e9 ci-dessous est constitu\u00e9 de 4 r\u00e9seaux locaux (switch+ordinateurs) : R1, R2, R3 et R4, et de 4 routeurs A, B, C et D. On donne les d\u00e9bits (bandes passantes) de la connexion entre chaque routeur : A-B : 100 Mbps A-D : 1000 Mbps B-C : 10 Mbps C-D : 10 Mbps On propose ci-dessous une table de routage pour le routeur A : 1) Compl\u00e9tez la colonne \u201cm\u00e9trique RIP\u201d du tableau ci-dessus. 2) Compl\u00e9tez la colonne \u201cm\u00e9trique OSPF\u201d du tableau ci-dessus. 3) Un ordinateur appartenant au r\u00e9seau local R1 envoie un paquet de donn\u00e9es \u00e0 un ordinateur appartenant au r\u00e9seau local R2. a) Donnez le chemin suivi par ce paquet de donn\u00e9es si le routeur A utilise le protocole de routage RIP. Justifiez votre r\u00e9ponse. b) Donnez le chemin suivi par ce paquet de donn\u00e9es si le routeur A utilise le protocole de routage OSPF. Justifiez votre r\u00e9ponse. 4) Le routeur D est en panne. Un ordinateur appartenant au r\u00e9seau local R1 envoie un paquet de donn\u00e9es \u00e0 un ordinateur appartenant au r\u00e9seau local R3. Donnez le chemin suivi par ce paquet de donn\u00e9es si le routeur A utilise le protocole de routage OSPF. Justifiez votre r\u00e9ponse. 5) La liaison entre 2 routeurs a un co\u00fbt de 0,2, calculez le d\u00e9bit de cette liaison en bps puis en Mbps.","title":"exercice 11.1"},{"location":"c11e/#exercices-du-bac","text":"Sujet 1 2021 Exercice 5 Sujet 2 2021 Exercice 5 Sujet 3 2021 Exercice 3 Sujet 6 2021 Exercice 4 Sujet 10 2021 Exercice 1 Sujet 2 2022 Exercice 3 Sujet 3 2022 Exercice 3 Sujet 4 2022 Exercice 2 Sujet 6 2022 Exercice 5 Sujet 7 2022 Exercice 5 Sujet 10 2022 Exercice 5 Sujet 12 2022 Exercice 2 Sujet 13 2022 Exercice 5","title":"exercices du bac"},{"location":"c11r/","text":"Ce qu\u2019il faut savoir un routeur permet de relier ensemble plusieurs r\u00e9seaux locaux. chaque routeur poss\u00e8de une table de routage. Une table de routage peut \u00eatre vue comme un tableau qui va contenir des informations permettant au routeur d'envoyer le paquet de donn\u00e9es dans la \"bonne direction\". il existe 2 m\u00e9thodes permettant de renseigner la table de routage d\u2019un routeur : le routage statique : chaque ligne doit \u00eatre renseign\u00e9e \"\u00e0 la main\". Cette solution est seulement envisageable pour des tr\u00e8s petits r\u00e9seaux de r\u00e9seaux le routage dynamique : tout se fait \"automatiquement\", on utilise des protocoles qui vont permettre de \"d\u00e9couvrir\" les diff\u00e9rentes routes automatiquement afin de pouvoir remplir la table de routage tout aussi automatiquement. un r\u00e9seau de r\u00e9seaux comportant des routeurs peut \u00eatre mod\u00e9lis\u00e9 par un graphe : chaque routeur est un sommet et chaque liaison entre les routeurs ou entre un routeur et un switch est une ar\u00eate. Les algorithmes utilis\u00e9s par les protocoles de routages sont donc des algorithmes issus de la th\u00e9orie de graphes. les 2 protocoles au programme de terminale NSI sont les protocoles RIP (Routing Information Protocol) et OSPF (Open Shortest Path First) : protocole RIP : le protocole RIP s'appuie sur l'algorithme de Bellman-Ford (algorithme qui permet de calculer les plus courts chemins dans un graphe). Le protocole RIP utilise le nombre de sauts comme m\u00e9trique. Ce protocole est aujourd'hui tr\u00e8s rarement utilis\u00e9 dans les grandes infrastructures. protocole OSPF : le protocole OSPF s'appuie sur l'algorithme de Dijkstra. Le protocole OSPF utilise le \u201cco\u00fbt\u201d comme m\u00e9trique (la notion de co\u00fbt est directement li\u00e9e au d\u00e9bit des liaisons entre les routeurs). Ce qu\u2019il faut savoir faire Vous devez \u00eatre capable d\u2019identifier la route emprunt\u00e9e par un paquet suivant le protocole de routage utilis\u00e9 (RIP ou OSPF).","title":"R\u00e9vision"},{"location":"c11r/#ce-quil-faut-savoir","text":"un routeur permet de relier ensemble plusieurs r\u00e9seaux locaux. chaque routeur poss\u00e8de une table de routage. Une table de routage peut \u00eatre vue comme un tableau qui va contenir des informations permettant au routeur d'envoyer le paquet de donn\u00e9es dans la \"bonne direction\". il existe 2 m\u00e9thodes permettant de renseigner la table de routage d\u2019un routeur : le routage statique : chaque ligne doit \u00eatre renseign\u00e9e \"\u00e0 la main\". Cette solution est seulement envisageable pour des tr\u00e8s petits r\u00e9seaux de r\u00e9seaux le routage dynamique : tout se fait \"automatiquement\", on utilise des protocoles qui vont permettre de \"d\u00e9couvrir\" les diff\u00e9rentes routes automatiquement afin de pouvoir remplir la table de routage tout aussi automatiquement. un r\u00e9seau de r\u00e9seaux comportant des routeurs peut \u00eatre mod\u00e9lis\u00e9 par un graphe : chaque routeur est un sommet et chaque liaison entre les routeurs ou entre un routeur et un switch est une ar\u00eate. Les algorithmes utilis\u00e9s par les protocoles de routages sont donc des algorithmes issus de la th\u00e9orie de graphes. les 2 protocoles au programme de terminale NSI sont les protocoles RIP (Routing Information Protocol) et OSPF (Open Shortest Path First) : protocole RIP : le protocole RIP s'appuie sur l'algorithme de Bellman-Ford (algorithme qui permet de calculer les plus courts chemins dans un graphe). Le protocole RIP utilise le nombre de sauts comme m\u00e9trique. Ce protocole est aujourd'hui tr\u00e8s rarement utilis\u00e9 dans les grandes infrastructures. protocole OSPF : le protocole OSPF s'appuie sur l'algorithme de Dijkstra. Le protocole OSPF utilise le \u201cco\u00fbt\u201d comme m\u00e9trique (la notion de co\u00fbt est directement li\u00e9e au d\u00e9bit des liaisons entre les routeurs).","title":"Ce qu\u2019il faut savoir"},{"location":"c11r/#ce-quil-faut-savoir-faire","text":"Vous devez \u00eatre capable d\u2019identifier la route emprunt\u00e9e par un paquet suivant le protocole de routage utilis\u00e9 (RIP ou OSPF).","title":"Ce qu\u2019il faut savoir faire"},{"location":"c12a/","text":"activit\u00e9 12.1 La cryptologie est la science du secret. Cette science trouve ses origines dans la Gr\u00e8ce antique. Faites une frise chronologique qui reprend les principales dates de l'histoire de cette science. Entrez un peu plus dans les d\u00e9tails pour les \u00e9l\u00e9ments suivants : code de C\u00e9sar chiffre de Vigen\u00e8re Enigma activit\u00e9 12.2 Soit 3 personnes A, B et P. A d\u00e9sire envoyer un message chiffr\u00e9 (chiffrement sym\u00e9trique) \u00e0 B. P est un pirate qui va essay\u00e9 de d\u00e9chiffrer un message qui ne lui est pas destin\u00e9. Vous allez jouer le r\u00f4le de A. Choisissez une ou un camarade dans la classe qui jouera le r\u00f4le de B. Mettez vous d'accord avec B sur une cl\u00e9 de chiffrement/d\u00e9chiffrement (choisissez un mot qui jouera le r\u00f4le de cl\u00e9, ce mot doit rester secret). Choisissez un message \u00e0 faire parvenir \u00e0 B puis proc\u00e9der au chiffrement de ce message, notez le r\u00e9sultat du chiffrement (en binaire) sur une feuille. Donnez cette feuille \u00e0 une ou un camarade tiers (qui ne connait pas la cl\u00e9, ce camarade jouera donc le r\u00f4le de P). P devra recopier le message avant de le transmettre \u00e0 B. P devra essayer de trouver le message envoyer par A \u00e0 B. B devra d\u00e9chiffrer le message \u00e0 l'aide de la cl\u00e9. Vous pourrez utiliser les sites suivants : https://www.rapidtables.com/convert/number/ascii-to-binary.html https://www.rapidtables.com/convert/number/binary-to-ascii.html afin d'assurer le passage texte -> code ASCII binaire et code ASCII binaire-> texte. activit\u00e9 12.3 R\u00e9sumez en quelques lignes le principe du chiffrement sym\u00e9trique activit\u00e9 12.4 R\u00e9sumez en quelques lignes le principe du protocole HTTPS.","title":"Activit\u00e9s"},{"location":"c12a/#activite-121","text":"La cryptologie est la science du secret. Cette science trouve ses origines dans la Gr\u00e8ce antique. Faites une frise chronologique qui reprend les principales dates de l'histoire de cette science. Entrez un peu plus dans les d\u00e9tails pour les \u00e9l\u00e9ments suivants : code de C\u00e9sar chiffre de Vigen\u00e8re Enigma","title":"activit\u00e9 12.1"},{"location":"c12a/#activite-122","text":"Soit 3 personnes A, B et P. A d\u00e9sire envoyer un message chiffr\u00e9 (chiffrement sym\u00e9trique) \u00e0 B. P est un pirate qui va essay\u00e9 de d\u00e9chiffrer un message qui ne lui est pas destin\u00e9. Vous allez jouer le r\u00f4le de A. Choisissez une ou un camarade dans la classe qui jouera le r\u00f4le de B. Mettez vous d'accord avec B sur une cl\u00e9 de chiffrement/d\u00e9chiffrement (choisissez un mot qui jouera le r\u00f4le de cl\u00e9, ce mot doit rester secret). Choisissez un message \u00e0 faire parvenir \u00e0 B puis proc\u00e9der au chiffrement de ce message, notez le r\u00e9sultat du chiffrement (en binaire) sur une feuille. Donnez cette feuille \u00e0 une ou un camarade tiers (qui ne connait pas la cl\u00e9, ce camarade jouera donc le r\u00f4le de P). P devra recopier le message avant de le transmettre \u00e0 B. P devra essayer de trouver le message envoyer par A \u00e0 B. B devra d\u00e9chiffrer le message \u00e0 l'aide de la cl\u00e9. Vous pourrez utiliser les sites suivants : https://www.rapidtables.com/convert/number/ascii-to-binary.html https://www.rapidtables.com/convert/number/binary-to-ascii.html afin d'assurer le passage texte -> code ASCII binaire et code ASCII binaire-> texte.","title":"activit\u00e9 12.2"},{"location":"c12a/#activite-123","text":"R\u00e9sumez en quelques lignes le principe du chiffrement sym\u00e9trique","title":"activit\u00e9 12.3"},{"location":"c12a/#activite-124","text":"R\u00e9sumez en quelques lignes le principe du protocole HTTPS.","title":"activit\u00e9 12.4"},{"location":"c12c/","text":"1) notion de chiffrement Soit 2 individus A et B qui cherchent \u00e0 s'envoyer des messages par l'interm\u00e9diaire d'un r\u00e9seau informatique. A et B d\u00e9sirent qu'une tierce personne (par exemple P) ne soit pas capable de lire les messages si par hasard ces derniers devaient \u00eatre intercept\u00e9s par P. Pour ce faire, A va chiffrer le message . Toute personne qui ne poss\u00e9dera pas le moyen de d\u00e9chiffrer ce message chiffr\u00e9 se verra dans l'impossibilit\u00e9 de comprendre le contenu du message (si P intercepte le message chiffr\u00e9 et qu'il ne poss\u00e8de pas le moyen de d\u00e9chiffrer ce message, l'interception aura \u00e9t\u00e9 totalement inutile puisque P sera dans l'incapacit\u00e9 de comprendre le contenu du message). Il existe 2 grands types de chiffrement : le chiffrement sym\u00e9trique et le chiffrement asym\u00e9trique. 2) le chiffrement sym\u00e9trique Pour chiffrer un message, A va utiliser une suite de caract\u00e8re que l'on appelle \"cl\u00e9 de chiffrement\". Dans le cas du chiffrement sym\u00e9trique, cette cl\u00e9 de chiffrement sera aussi utilis\u00e9e par B pour d\u00e9chiffrer le message envoy\u00e9 par A. Dans ce cas, la cl\u00e9 de chiffrement est identique \u00e0 la cl\u00e9 de d\u00e9chiffrement. Concr\u00e8tement comment cela se passe-t-il ? Avant d'entrer dans le vif du sujet, il faut savoir que l'id\u00e9e de chiffrer des messages (de les rendre illisibles pour des personnes non autoris\u00e9es) ne date pas du d\u00e9but de l'\u00e8re de l'informatique. En effet, d\u00e8s l'antiquit\u00e9, on cherchait d\u00e9j\u00e0 \u00e0 s\u00e9curiser les communications en chiffrant les messages sensibles (pour en savoir plus sur l'histoire du chiffrement, n'h\u00e9sitez pas \u00e0 consulter la page Wikip\u00e9dia consacr\u00e9e \u00e0 ce sujet). Nous nous int\u00e9resserons ici uniquement aux communications ayant lieu par l'interm\u00e9diaire d'un r\u00e9seau informatique. Comme nous avons d\u00e9j\u00e0 eu l'occasion de le voir en premi\u00e8re, toute \"donn\u00e9e informatique\" peut \u00eatre vue comme une suite de z\u00e9ro et de un. Nous chercherons donc \u00e0 chiffrer une suite de z\u00e9ro et de un : Soit le message \"Hello World!\" ce qui nous donnera en binaire : 010010000110010101101100011011000110111100100000010101110110111101110010011011000110010000100001 N.B. nous avons simplement utilis\u00e9 le code ASCII de chaque caract\u00e8re (par exemple, on peut v\u00e9rifier que le H correspond bien \u00e0 l'octet 01001000). Pour effectuer la \"conversion\" texte vers code binaire ASCII ou vis versa, vous pouvez utiliser le site https://www.rapidtables.com/convert/number/ascii-to-binary.html Choisissons maintenant un mot (ou une phrase) qui nous servira de cl\u00e9 de chiffrement, prenons pour exemple le mot \"toto\". \"toto\" nous donne en binaire : 01110100011011110111010001101111 Pour chiffrer le message nous allons effectuer un XOR bit \u00e0 bit. Pour rappel, vous trouverez la table de v\u00e9rit\u00e9 du XOR ci-dessous : Table de v\u00e9rit\u00e9 \"XOR\" : E1 E2 S 0 0 0 0 1 1 1 0 1 1 1 0 Comme la cl\u00e9 est plus courte que le message, il faut \"reproduire\" la cl\u00e9 vers la droite autant de fois que n\u00e9cessaire (si la taille du message n'est pas un multiple de la taille de la cl\u00e9, on peut reproduire seulement quelques bits de la cl\u00e9 pour la fin du message): Le signe + dans un cercle symbolise le XOR Apr\u00e8s ce XOR on obtient donc la suite de bits suivante : 001111000000101000011000000000110001101101001111001000110000000000000110000000110001000001001110 Soit la chaine de caract\u00e8res suivante (si on cherche \u00e0 afficher le message chiffr\u00e9 avec un \u00e9diteur de texte) : \u0018\u001bO#\u0006\u0010N Maintenant ce message est pr\u00eat pour \u00eatre envoy\u00e9 \u00e0 son destinataire B. Si P intercepte le message et cherche \u00e0 le lire avec un \u00e9diteur de texte, il obtiendra la suite de caract\u00e8re \u0018\u001bO#\u0006\u0010N B a maintenant re\u00e7u le message chiffr\u00e9, il poss\u00e8de la cl\u00e9 (toto), il va donc pouvoir d\u00e9chiffrer le message en appliquant un XOR entre le message chiffr\u00e9 et la cl\u00e9 (on applique exactement la m\u00eame m\u00e9thode que ci-dessus). On trouve le code binaire suivant : 010010000110010101101100011011000110111100100000010101110110111101110010011011000110010000100001 Vous pouvez remarquer que nous avons bien retrouv\u00e9 le code binaire d'origine. Si vous ne voulez pas vous emb\u00eater \u00e0 v\u00e9rifier bit par bit, vous pouvez utiliser ce site qui vous permettra de repasser du code binaire ASCII au texte. On retrouve bien le message d'origine : Hello World!, B a pu lire le message envoy\u00e9 par A alors que pour P, malgr\u00e9 le fait qu'il a pu intercepter le message, il n'a pas pu prendre connaissance de son contenu sans la cl\u00e9. La m\u00e9thode la plus utilis\u00e9e en mati\u00e8re de chiffrement sym\u00e9trique se nomme AES (Advanced Encryption Standard). Cette m\u00e9thode utilise une technique de chiffrement plus \u00e9labor\u00e9e que ce qui a \u00e9t\u00e9 vu ci-dessus, mais les grands principes restent identiques. Le gros probl\u00e8me avec le chiffrement sym\u00e9trique, c'est qu'il est n\u00e9cessaire pour A et B de se mettre d'accord \u00e0 l'avance sur la cl\u00e9 qui sera utilis\u00e9e lors des \u00e9changes. Le chiffrement asym\u00e9trique permet d'\u00e9viter ce probl\u00e8me. 3) le chiffrement asym\u00e9trique Dans le cas du chiffrement asym\u00e9trique A et B n'ont pas besoin de partager une \"cl\u00e9 secr\u00e8te\" : A poss\u00e8de une \"cl\u00e9 priv\u00e9e\" que l'on notera kprA et une \"cl\u00e9 publique\" que l'on notera kpuA. En aucun cas A ne devra divulguer sa cl\u00e9 priv\u00e9e \u00e0 quiconque, elle devra rester strictement secr\u00e8te. En revanche sa cl\u00e9 publique pourra \u00eatre connue de tout le monde sans aucun probl\u00e8me. B poss\u00e8de une \"cl\u00e9 priv\u00e9e\" que l'on notera kprB et une \"cl\u00e9 publique\" que l'on notera kpuB. En aucun cas B ne devra divulguer sa cl\u00e9 priv\u00e9e \u00e0 quiconque, elle devra rester strictement secr\u00e8te. En revanche sa cl\u00e9 publique pourra \u00eatre connue de tout le monde sans aucun probl\u00e8me. Si A d\u00e9sire envoyer un message m \u00e0 B, il va utiliser la cl\u00e9 publique de B afin de r\u00e9aliser le chiffrement (m est chiffr\u00e9 en m'). Le message chiffr\u00e9 (m') va ensuite pouvoir transiter entre A et B. Une fois le message m' en sa possession, B va utiliser sa cl\u00e9 priv\u00e9e afin de pouvoir d\u00e9chiffrer le message m' et ainsi obtenir le message m. Le processus peut \u00eatre r\u00e9sum\u00e9 par le sch\u00e9ma suivant : Si P intercepte le message m', il sera incapable de d\u00e9terminer m \u00e0 partir de m' sans la cl\u00e9 priv\u00e9e de B. Le chiffrement asym\u00e9trique repose sur des probl\u00e8mes tr\u00e8s difficiles \u00e0 r\u00e9soudre dans un sens et faciles \u00e0 r\u00e9soudre dans l'autre sens. Prenons un exemple : l'algorithme de chiffrement asym\u00e9trique RSA (du nom de ses 3 inventeurs : Rivest Shamir et Adleman), est tr\u00e8s couramment utilis\u00e9, notamment dans tout ce qui touche au commerce \u00e9lectronique. RSA se base sur la factorisation des tr\u00e8s grands nombres premiers. Si vous prenez un nombre premier A (par exemple A = 16813007) et un nombre premier B (par exemple B = 258027589), il facile de d\u00e9terminer C le produit de A par B (ici on a A x B = C avec C = 4338219660050123). En revanche si je vous donne C (ici 4338219660050123) il est tr\u00e8s difficile de retrouver A et B. En tous les cas, \u00e0 ce jour, aucun algorithme n'est capable de retrouver A et B connaissant C dans un temps \"raisonnable\". Nous avons donc bien ici un probl\u00e8me relativement facile dans un sens (trouver C \u00e0 partir de A et B) est extr\u00eamement difficile dans l'autre sens (trouver A et B \u00e0 partir de C). Les d\u00e9tails du fonctionnement de RSA sont relativement complexes (math\u00e9matiquement parlant) et ne seront pas abord\u00e9s ici. Vous devez juste savoir qu'il existe un lien entre une cl\u00e9 publique et la cl\u00e9 priv\u00e9e correspondante, mais qu'il est quasiment impossible de trouver la cl\u00e9 priv\u00e9e de quelqu'un \u00e0 partir de sa cl\u00e9 publique. 4) le protocole HTTPS Nous allons maintenant voir une utilisation concr\u00e8te de ces chiffrements sym\u00e9triques et asym\u00e9triques : le protocole HTTPS. Avant de parler du protocole HTTPS, petit retour sur le protocole HTTP : un client effectue une requ\u00eate HTTP vers un serveur, le serveur va alors r\u00e9pondre \u00e0 cette requ\u00eate (par exemple en envoyant une page HTML au client). Si n\u00e9cessaire n'h\u00e9sitez pas \u00e0 consulter ce qui a \u00e9t\u00e9 fait en premi\u00e8re pour plus de d\u00e9tails. Le protocole HTTP pose 2 probl\u00e8mes en termes de s\u00e9curit\u00e9 informatique : Un individu qui intercepterait les donn\u00e9es transitant entre le client et le serveur pourrait les lire sans aucun probl\u00e8me (ce qui serait probl\u00e9matique notamment avec un site de e-commerce au moment o\u00f9 le client envoie des donn\u00e9es bancaires) gr\u00e2ce \u00e0 une technique qui ne sera pas d\u00e9taill\u00e9e ici (le DNS spoofing), un serveur \"pirate\" peut se faire passer pour un site sur lequel vous avez l'habitude de vous rendre en toute confiance : imaginez vous voulez consulter vos comptes bancaires en ligne, vous saisissez l'adresse web de votre banque dans la barre d'adresse de votre navigateur favori, vous arrivez sur la page d'accueil d'un site en tout point identique au site de votre banque, en toute confiance, vous saisissez votre identifiant et votre mot de passe. C'est termin\u00e9 un \"pirate\" va pouvoir r\u00e9cup\u00e9rer votre identifiant et votre mot de passe ! Pourquoi ? Vous avez saisi l'adresse web de votre banque comme d'habitude ! Oui, sauf que gr\u00e2ce \u00e0 une attaque de type \"DNS spoofing\" vous avez \u00e9t\u00e9 redirig\u00e9 vers un site pirate, en tout point identique au site de votre banque. D\u00e8s vos identifiant et mot de passe saisis sur ce faux site, le pirate pourra les r\u00e9cup\u00e9rer et se rendre avec sur le v\u00e9ritable site de votre banque. \u00c0 noter qu'il existe d'autres techniques que le DNS spoofing qui permettent de substituer un serveur \u00e0 un autre, mais elles ne seront pas \u00e9voqu\u00e9es ici. HTTPS est donc la version s\u00e9curis\u00e9e de HTTP, le but de HTTPS est d'\u00e9viter les 2 probl\u00e8mes \u00e9voqu\u00e9s ci-dessus. HTTPS s'appuie sur le protocole TSL (Transport Layer Security) anciennement connu sous le nom de SSL (Secure Sockets Layer) Comment chiffrer les donn\u00e9es circulant entre le client et le serveur ? Les communications vont \u00eatre chiffr\u00e9es gr\u00e2ce \u00e0 une cl\u00e9 sym\u00e9trique. Probl\u00e8me : comment \u00e9changer cette cl\u00e9 entre le client et le serveur ? Simplement en utilisant une paire cl\u00e9 publique / cl\u00e9 priv\u00e9e ! Voici le d\u00e9roulement des op\u00e9rations : le client effectue une requ\u00eate HTTPS vers le serveur, en retour le serveur envoie sa cl\u00e9 publique (KpuS) au client le client \"fabrique\" une cl\u00e9 K (qui sera utilis\u00e9 pour chiffrer les futurs \u00e9changes), chiffre cette cl\u00e9 K avec KpuS et envoie la version chiffr\u00e9e de la cl\u00e9 K au serveur le serveur re\u00e7oit la version chiffr\u00e9e de la cl\u00e9 K et la d\u00e9chiffre en utilisant sa cl\u00e9 priv\u00e9e (KprS). \u00c0 partir de ce moment-l\u00e0, le client et le serveur sont en possession de la cl\u00e9 K le client et le serveur commencent \u00e0 \u00e9changer des donn\u00e9es en les chiffrant et en les d\u00e9chiffrant \u00e0 l'aide de la cl\u00e9 K (chiffrement sym\u00e9trique). On peut r\u00e9sumer ce processus avec le sch\u00e9ma suivant : Ce processus se r\u00e9p\u00e8te \u00e0 chaque fois qu'un nouveau client effectue une requ\u00eate HTTPS vers le serveur. Comment \u00e9viter les cons\u00e9quences f\u00e2cheuses d'une attaque de type DNS Spoofing ? Pour \u00e9viter tout probl\u00e8me, il faut que le serveur puisse justifier de son \"identit\u00e9\" (\"voici la preuve que je suis bien le site de la banque B et pas un site \"pirate\"\"). Pour ce faire, chaque site d\u00e9sirant proposer des transactions HTTPS doit, p\u00e9riodiquement, demander (acheter dans la plupart des cas) un certificat d'authentification (sorte de carte d'identit\u00e9 pour un site internet) aupr\u00e8s d'une autorit\u00e9 habilit\u00e9e \u00e0 fournir ce genre de certificats (chaque navigateur web poss\u00e8de une liste des autorit\u00e9s dont il accepte les certificats). Comme dit plus haut, ce certificat permet au site de prouver son \"identit\u00e9\" aupr\u00e8s des clients. Nous n'allons pas entrer dans les d\u00e9tails du fonctionnement de ces certificats, mais vous devez juste savoir que le serveur envoie ce certificat au client en m\u00eame temps que sa cl\u00e9 publique (\u00e9tape 2 du sch\u00e9ma ci-dessus). En cas d'absence de certificat (ou d'envoi de certificat non conforme), le client stoppe imm\u00e9diatement les \u00e9changes avec le serveur. Il peut arriver de temps en temps que le responsable d'un site oublie de renouveler son certificat \u00e0 temps (d\u00e9passe la date d'expiration), dans ce cas, le navigateur web c\u00f4t\u00e9 client affichera une page de mise en garde avec un message du style \"ATTENTION le certificat d'authentification du site XXX a expir\u00e9, il serait prudent de ne pas poursuivre vos \u00e9changes avec le site XXXX\".","title":"Cours"},{"location":"c12c/#1-notion-de-chiffrement","text":"Soit 2 individus A et B qui cherchent \u00e0 s'envoyer des messages par l'interm\u00e9diaire d'un r\u00e9seau informatique. A et B d\u00e9sirent qu'une tierce personne (par exemple P) ne soit pas capable de lire les messages si par hasard ces derniers devaient \u00eatre intercept\u00e9s par P. Pour ce faire, A va chiffrer le message . Toute personne qui ne poss\u00e9dera pas le moyen de d\u00e9chiffrer ce message chiffr\u00e9 se verra dans l'impossibilit\u00e9 de comprendre le contenu du message (si P intercepte le message chiffr\u00e9 et qu'il ne poss\u00e8de pas le moyen de d\u00e9chiffrer ce message, l'interception aura \u00e9t\u00e9 totalement inutile puisque P sera dans l'incapacit\u00e9 de comprendre le contenu du message). Il existe 2 grands types de chiffrement : le chiffrement sym\u00e9trique et le chiffrement asym\u00e9trique.","title":"1) notion de chiffrement"},{"location":"c12c/#2-le-chiffrement-symetrique","text":"Pour chiffrer un message, A va utiliser une suite de caract\u00e8re que l'on appelle \"cl\u00e9 de chiffrement\". Dans le cas du chiffrement sym\u00e9trique, cette cl\u00e9 de chiffrement sera aussi utilis\u00e9e par B pour d\u00e9chiffrer le message envoy\u00e9 par A. Dans ce cas, la cl\u00e9 de chiffrement est identique \u00e0 la cl\u00e9 de d\u00e9chiffrement. Concr\u00e8tement comment cela se passe-t-il ? Avant d'entrer dans le vif du sujet, il faut savoir que l'id\u00e9e de chiffrer des messages (de les rendre illisibles pour des personnes non autoris\u00e9es) ne date pas du d\u00e9but de l'\u00e8re de l'informatique. En effet, d\u00e8s l'antiquit\u00e9, on cherchait d\u00e9j\u00e0 \u00e0 s\u00e9curiser les communications en chiffrant les messages sensibles (pour en savoir plus sur l'histoire du chiffrement, n'h\u00e9sitez pas \u00e0 consulter la page Wikip\u00e9dia consacr\u00e9e \u00e0 ce sujet). Nous nous int\u00e9resserons ici uniquement aux communications ayant lieu par l'interm\u00e9diaire d'un r\u00e9seau informatique. Comme nous avons d\u00e9j\u00e0 eu l'occasion de le voir en premi\u00e8re, toute \"donn\u00e9e informatique\" peut \u00eatre vue comme une suite de z\u00e9ro et de un. Nous chercherons donc \u00e0 chiffrer une suite de z\u00e9ro et de un : Soit le message \"Hello World!\" ce qui nous donnera en binaire : 010010000110010101101100011011000110111100100000010101110110111101110010011011000110010000100001 N.B. nous avons simplement utilis\u00e9 le code ASCII de chaque caract\u00e8re (par exemple, on peut v\u00e9rifier que le H correspond bien \u00e0 l'octet 01001000). Pour effectuer la \"conversion\" texte vers code binaire ASCII ou vis versa, vous pouvez utiliser le site https://www.rapidtables.com/convert/number/ascii-to-binary.html Choisissons maintenant un mot (ou une phrase) qui nous servira de cl\u00e9 de chiffrement, prenons pour exemple le mot \"toto\". \"toto\" nous donne en binaire : 01110100011011110111010001101111 Pour chiffrer le message nous allons effectuer un XOR bit \u00e0 bit. Pour rappel, vous trouverez la table de v\u00e9rit\u00e9 du XOR ci-dessous : Table de v\u00e9rit\u00e9 \"XOR\" : E1 E2 S 0 0 0 0 1 1 1 0 1 1 1 0 Comme la cl\u00e9 est plus courte que le message, il faut \"reproduire\" la cl\u00e9 vers la droite autant de fois que n\u00e9cessaire (si la taille du message n'est pas un multiple de la taille de la cl\u00e9, on peut reproduire seulement quelques bits de la cl\u00e9 pour la fin du message): Le signe + dans un cercle symbolise le XOR Apr\u00e8s ce XOR on obtient donc la suite de bits suivante : 001111000000101000011000000000110001101101001111001000110000000000000110000000110001000001001110 Soit la chaine de caract\u00e8res suivante (si on cherche \u00e0 afficher le message chiffr\u00e9 avec un \u00e9diteur de texte) : \u0018\u001bO#\u0006\u0010N Maintenant ce message est pr\u00eat pour \u00eatre envoy\u00e9 \u00e0 son destinataire B. Si P intercepte le message et cherche \u00e0 le lire avec un \u00e9diteur de texte, il obtiendra la suite de caract\u00e8re \u0018\u001bO#\u0006\u0010N B a maintenant re\u00e7u le message chiffr\u00e9, il poss\u00e8de la cl\u00e9 (toto), il va donc pouvoir d\u00e9chiffrer le message en appliquant un XOR entre le message chiffr\u00e9 et la cl\u00e9 (on applique exactement la m\u00eame m\u00e9thode que ci-dessus). On trouve le code binaire suivant : 010010000110010101101100011011000110111100100000010101110110111101110010011011000110010000100001 Vous pouvez remarquer que nous avons bien retrouv\u00e9 le code binaire d'origine. Si vous ne voulez pas vous emb\u00eater \u00e0 v\u00e9rifier bit par bit, vous pouvez utiliser ce site qui vous permettra de repasser du code binaire ASCII au texte. On retrouve bien le message d'origine : Hello World!, B a pu lire le message envoy\u00e9 par A alors que pour P, malgr\u00e9 le fait qu'il a pu intercepter le message, il n'a pas pu prendre connaissance de son contenu sans la cl\u00e9. La m\u00e9thode la plus utilis\u00e9e en mati\u00e8re de chiffrement sym\u00e9trique se nomme AES (Advanced Encryption Standard). Cette m\u00e9thode utilise une technique de chiffrement plus \u00e9labor\u00e9e que ce qui a \u00e9t\u00e9 vu ci-dessus, mais les grands principes restent identiques. Le gros probl\u00e8me avec le chiffrement sym\u00e9trique, c'est qu'il est n\u00e9cessaire pour A et B de se mettre d'accord \u00e0 l'avance sur la cl\u00e9 qui sera utilis\u00e9e lors des \u00e9changes. Le chiffrement asym\u00e9trique permet d'\u00e9viter ce probl\u00e8me.","title":"2) le chiffrement sym\u00e9trique"},{"location":"c12c/#3-le-chiffrement-asymetrique","text":"Dans le cas du chiffrement asym\u00e9trique A et B n'ont pas besoin de partager une \"cl\u00e9 secr\u00e8te\" : A poss\u00e8de une \"cl\u00e9 priv\u00e9e\" que l'on notera kprA et une \"cl\u00e9 publique\" que l'on notera kpuA. En aucun cas A ne devra divulguer sa cl\u00e9 priv\u00e9e \u00e0 quiconque, elle devra rester strictement secr\u00e8te. En revanche sa cl\u00e9 publique pourra \u00eatre connue de tout le monde sans aucun probl\u00e8me. B poss\u00e8de une \"cl\u00e9 priv\u00e9e\" que l'on notera kprB et une \"cl\u00e9 publique\" que l'on notera kpuB. En aucun cas B ne devra divulguer sa cl\u00e9 priv\u00e9e \u00e0 quiconque, elle devra rester strictement secr\u00e8te. En revanche sa cl\u00e9 publique pourra \u00eatre connue de tout le monde sans aucun probl\u00e8me. Si A d\u00e9sire envoyer un message m \u00e0 B, il va utiliser la cl\u00e9 publique de B afin de r\u00e9aliser le chiffrement (m est chiffr\u00e9 en m'). Le message chiffr\u00e9 (m') va ensuite pouvoir transiter entre A et B. Une fois le message m' en sa possession, B va utiliser sa cl\u00e9 priv\u00e9e afin de pouvoir d\u00e9chiffrer le message m' et ainsi obtenir le message m. Le processus peut \u00eatre r\u00e9sum\u00e9 par le sch\u00e9ma suivant : Si P intercepte le message m', il sera incapable de d\u00e9terminer m \u00e0 partir de m' sans la cl\u00e9 priv\u00e9e de B. Le chiffrement asym\u00e9trique repose sur des probl\u00e8mes tr\u00e8s difficiles \u00e0 r\u00e9soudre dans un sens et faciles \u00e0 r\u00e9soudre dans l'autre sens. Prenons un exemple : l'algorithme de chiffrement asym\u00e9trique RSA (du nom de ses 3 inventeurs : Rivest Shamir et Adleman), est tr\u00e8s couramment utilis\u00e9, notamment dans tout ce qui touche au commerce \u00e9lectronique. RSA se base sur la factorisation des tr\u00e8s grands nombres premiers. Si vous prenez un nombre premier A (par exemple A = 16813007) et un nombre premier B (par exemple B = 258027589), il facile de d\u00e9terminer C le produit de A par B (ici on a A x B = C avec C = 4338219660050123). En revanche si je vous donne C (ici 4338219660050123) il est tr\u00e8s difficile de retrouver A et B. En tous les cas, \u00e0 ce jour, aucun algorithme n'est capable de retrouver A et B connaissant C dans un temps \"raisonnable\". Nous avons donc bien ici un probl\u00e8me relativement facile dans un sens (trouver C \u00e0 partir de A et B) est extr\u00eamement difficile dans l'autre sens (trouver A et B \u00e0 partir de C). Les d\u00e9tails du fonctionnement de RSA sont relativement complexes (math\u00e9matiquement parlant) et ne seront pas abord\u00e9s ici. Vous devez juste savoir qu'il existe un lien entre une cl\u00e9 publique et la cl\u00e9 priv\u00e9e correspondante, mais qu'il est quasiment impossible de trouver la cl\u00e9 priv\u00e9e de quelqu'un \u00e0 partir de sa cl\u00e9 publique.","title":"3) le chiffrement asym\u00e9trique"},{"location":"c12c/#4-le-protocole-https","text":"Nous allons maintenant voir une utilisation concr\u00e8te de ces chiffrements sym\u00e9triques et asym\u00e9triques : le protocole HTTPS. Avant de parler du protocole HTTPS, petit retour sur le protocole HTTP : un client effectue une requ\u00eate HTTP vers un serveur, le serveur va alors r\u00e9pondre \u00e0 cette requ\u00eate (par exemple en envoyant une page HTML au client). Si n\u00e9cessaire n'h\u00e9sitez pas \u00e0 consulter ce qui a \u00e9t\u00e9 fait en premi\u00e8re pour plus de d\u00e9tails. Le protocole HTTP pose 2 probl\u00e8mes en termes de s\u00e9curit\u00e9 informatique : Un individu qui intercepterait les donn\u00e9es transitant entre le client et le serveur pourrait les lire sans aucun probl\u00e8me (ce qui serait probl\u00e9matique notamment avec un site de e-commerce au moment o\u00f9 le client envoie des donn\u00e9es bancaires) gr\u00e2ce \u00e0 une technique qui ne sera pas d\u00e9taill\u00e9e ici (le DNS spoofing), un serveur \"pirate\" peut se faire passer pour un site sur lequel vous avez l'habitude de vous rendre en toute confiance : imaginez vous voulez consulter vos comptes bancaires en ligne, vous saisissez l'adresse web de votre banque dans la barre d'adresse de votre navigateur favori, vous arrivez sur la page d'accueil d'un site en tout point identique au site de votre banque, en toute confiance, vous saisissez votre identifiant et votre mot de passe. C'est termin\u00e9 un \"pirate\" va pouvoir r\u00e9cup\u00e9rer votre identifiant et votre mot de passe ! Pourquoi ? Vous avez saisi l'adresse web de votre banque comme d'habitude ! Oui, sauf que gr\u00e2ce \u00e0 une attaque de type \"DNS spoofing\" vous avez \u00e9t\u00e9 redirig\u00e9 vers un site pirate, en tout point identique au site de votre banque. D\u00e8s vos identifiant et mot de passe saisis sur ce faux site, le pirate pourra les r\u00e9cup\u00e9rer et se rendre avec sur le v\u00e9ritable site de votre banque. \u00c0 noter qu'il existe d'autres techniques que le DNS spoofing qui permettent de substituer un serveur \u00e0 un autre, mais elles ne seront pas \u00e9voqu\u00e9es ici. HTTPS est donc la version s\u00e9curis\u00e9e de HTTP, le but de HTTPS est d'\u00e9viter les 2 probl\u00e8mes \u00e9voqu\u00e9s ci-dessus. HTTPS s'appuie sur le protocole TSL (Transport Layer Security) anciennement connu sous le nom de SSL (Secure Sockets Layer) Comment chiffrer les donn\u00e9es circulant entre le client et le serveur ? Les communications vont \u00eatre chiffr\u00e9es gr\u00e2ce \u00e0 une cl\u00e9 sym\u00e9trique. Probl\u00e8me : comment \u00e9changer cette cl\u00e9 entre le client et le serveur ? Simplement en utilisant une paire cl\u00e9 publique / cl\u00e9 priv\u00e9e ! Voici le d\u00e9roulement des op\u00e9rations : le client effectue une requ\u00eate HTTPS vers le serveur, en retour le serveur envoie sa cl\u00e9 publique (KpuS) au client le client \"fabrique\" une cl\u00e9 K (qui sera utilis\u00e9 pour chiffrer les futurs \u00e9changes), chiffre cette cl\u00e9 K avec KpuS et envoie la version chiffr\u00e9e de la cl\u00e9 K au serveur le serveur re\u00e7oit la version chiffr\u00e9e de la cl\u00e9 K et la d\u00e9chiffre en utilisant sa cl\u00e9 priv\u00e9e (KprS). \u00c0 partir de ce moment-l\u00e0, le client et le serveur sont en possession de la cl\u00e9 K le client et le serveur commencent \u00e0 \u00e9changer des donn\u00e9es en les chiffrant et en les d\u00e9chiffrant \u00e0 l'aide de la cl\u00e9 K (chiffrement sym\u00e9trique). On peut r\u00e9sumer ce processus avec le sch\u00e9ma suivant : Ce processus se r\u00e9p\u00e8te \u00e0 chaque fois qu'un nouveau client effectue une requ\u00eate HTTPS vers le serveur. Comment \u00e9viter les cons\u00e9quences f\u00e2cheuses d'une attaque de type DNS Spoofing ? Pour \u00e9viter tout probl\u00e8me, il faut que le serveur puisse justifier de son \"identit\u00e9\" (\"voici la preuve que je suis bien le site de la banque B et pas un site \"pirate\"\"). Pour ce faire, chaque site d\u00e9sirant proposer des transactions HTTPS doit, p\u00e9riodiquement, demander (acheter dans la plupart des cas) un certificat d'authentification (sorte de carte d'identit\u00e9 pour un site internet) aupr\u00e8s d'une autorit\u00e9 habilit\u00e9e \u00e0 fournir ce genre de certificats (chaque navigateur web poss\u00e8de une liste des autorit\u00e9s dont il accepte les certificats). Comme dit plus haut, ce certificat permet au site de prouver son \"identit\u00e9\" aupr\u00e8s des clients. Nous n'allons pas entrer dans les d\u00e9tails du fonctionnement de ces certificats, mais vous devez juste savoir que le serveur envoie ce certificat au client en m\u00eame temps que sa cl\u00e9 publique (\u00e9tape 2 du sch\u00e9ma ci-dessus). En cas d'absence de certificat (ou d'envoi de certificat non conforme), le client stoppe imm\u00e9diatement les \u00e9changes avec le serveur. Il peut arriver de temps en temps que le responsable d'un site oublie de renouveler son certificat \u00e0 temps (d\u00e9passe la date d'expiration), dans ce cas, le navigateur web c\u00f4t\u00e9 client affichera une page de mise en garde avec un message du style \"ATTENTION le certificat d'authentification du site XXX a expir\u00e9, il serait prudent de ne pas poursuivre vos \u00e9changes avec le site XXXX\".","title":"4) le protocole HTTPS"},{"location":"c12e/","text":"exercice 12.1 1) Apr\u00e8s un chiffrement sym\u00e9trique on obtient la message suivant : ri. Sachant que la cl\u00e9 de chiffrement est : 00001010 (la cl\u00e9 est directement donn\u00e9e en binaire), d\u00e9terminez le message d\u2019origine. On donne l\u2019extrait de la table ASCII suivant : 2) Un utilisateur B souhaite \u00e9changer un message chiffr\u00e9 avec un utilisateur A en utilisant un chiffrement asym\u00e9trique. A poss\u00e8de une cl\u00e9 publique (AKpub) et une cl\u00e9 priv\u00e9e (AKpriv). B poss\u00e8de une cl\u00e9 publique (BKpub) et une cl\u00e9 priv\u00e9e (BKpriv). B souhaite chiffrer un message m afin de pouvoir l\u2019envoyer \u00e0 A : a) Quelle cl\u00e9 va \u00eatre utilis\u00e9e par B pour chiffrer le message m ? Qb) uelle cl\u00e9 va \u00eatre utilis\u00e9e par A pour d\u00e9chiffrer le message m ? 3) Expliquez en quelques lignes le principe du protocole HTTPS (on s\u2019int\u00e9ressera uniquement \u00e0 l\u2019aspect S\u00e9curit\u00e9 du protocole) exercice 12.2 Exercice tir\u00e9 du bac 2021 Pour chiffrer un message, une m\u00e9thode, dite du masque jetable, consiste \u00e0 le combiner avec une cha\u00eene de caract\u00e8res de longueur comparable. Une impl\u00e9mentation possible utilise l\u2019op\u00e9rateur XOR (ou exclusif). Dans la suite, les nombres \u00e9crits en binaire seront pr\u00e9c\u00e9d\u00e9s du pr\u00e9fixe 0b. 1) Pour chiffrer un message, on convertit chacun de ses caract\u00e8res en binaire (\u00e0 l\u2019aide du format Unicode), et on r\u00e9alise l\u2019op\u00e9ration XOR bit \u00e0 bit avec la cl\u00e9. Apr\u00e8s conversion en binaire, et avant que l\u2019op\u00e9ration XOR bit \u00e0 bit avec la cl\u00e9 n\u2019ait \u00e9t\u00e9 effectu\u00e9e, Alice obtient le message suivant : m = 0b 0110 0011 0100 0110 a) Le message m correspond \u00e0 deux caract\u00e8res cod\u00e9s chacun sur 8 bits : d\u00e9terminer quels sont ces caract\u00e8res. On fournit pour cela la table ci-dessous qui associe \u00e0 l\u2019\u00e9criture hexad\u00e9cimale d\u2019un octet le caract\u00e8re correspondant (figure 2). Exemple de lecture : le caract\u00e8re correspondant \u00e0 l\u2019octet cod\u00e9 4A en hexad\u00e9cimal est la lettre J. b) Pour chiffrer le message d\u2019Alice, on r\u00e9alise l\u2019op\u00e9ration XOR bit \u00e0 bit avec la cl\u00e9 suivante : k = 0b 1110 1110 1111 0000 Donner l\u2019\u00e9criture binaire du message obtenu. 2) a) Dresser la table de v\u00e9rit\u00e9 de l\u2019expression bool\u00e9enne suivante : (a XOR b) XOR b b) Bob conna\u00eet la cha\u00eene de caract\u00e8res utilis\u00e9e par Alice pour chiffrer le message. Quelle op\u00e9ration doit-il r\u00e9aliser pour d\u00e9chiffrer son message ?","title":"Exercices"},{"location":"c12e/#exercice-121","text":"1) Apr\u00e8s un chiffrement sym\u00e9trique on obtient la message suivant : ri. Sachant que la cl\u00e9 de chiffrement est : 00001010 (la cl\u00e9 est directement donn\u00e9e en binaire), d\u00e9terminez le message d\u2019origine. On donne l\u2019extrait de la table ASCII suivant : 2) Un utilisateur B souhaite \u00e9changer un message chiffr\u00e9 avec un utilisateur A en utilisant un chiffrement asym\u00e9trique. A poss\u00e8de une cl\u00e9 publique (AKpub) et une cl\u00e9 priv\u00e9e (AKpriv). B poss\u00e8de une cl\u00e9 publique (BKpub) et une cl\u00e9 priv\u00e9e (BKpriv). B souhaite chiffrer un message m afin de pouvoir l\u2019envoyer \u00e0 A : a) Quelle cl\u00e9 va \u00eatre utilis\u00e9e par B pour chiffrer le message m ? Qb) uelle cl\u00e9 va \u00eatre utilis\u00e9e par A pour d\u00e9chiffrer le message m ? 3) Expliquez en quelques lignes le principe du protocole HTTPS (on s\u2019int\u00e9ressera uniquement \u00e0 l\u2019aspect S\u00e9curit\u00e9 du protocole)","title":"exercice 12.1"},{"location":"c12e/#exercice-122","text":"Exercice tir\u00e9 du bac 2021 Pour chiffrer un message, une m\u00e9thode, dite du masque jetable, consiste \u00e0 le combiner avec une cha\u00eene de caract\u00e8res de longueur comparable. Une impl\u00e9mentation possible utilise l\u2019op\u00e9rateur XOR (ou exclusif). Dans la suite, les nombres \u00e9crits en binaire seront pr\u00e9c\u00e9d\u00e9s du pr\u00e9fixe 0b. 1) Pour chiffrer un message, on convertit chacun de ses caract\u00e8res en binaire (\u00e0 l\u2019aide du format Unicode), et on r\u00e9alise l\u2019op\u00e9ration XOR bit \u00e0 bit avec la cl\u00e9. Apr\u00e8s conversion en binaire, et avant que l\u2019op\u00e9ration XOR bit \u00e0 bit avec la cl\u00e9 n\u2019ait \u00e9t\u00e9 effectu\u00e9e, Alice obtient le message suivant : m = 0b 0110 0011 0100 0110 a) Le message m correspond \u00e0 deux caract\u00e8res cod\u00e9s chacun sur 8 bits : d\u00e9terminer quels sont ces caract\u00e8res. On fournit pour cela la table ci-dessous qui associe \u00e0 l\u2019\u00e9criture hexad\u00e9cimale d\u2019un octet le caract\u00e8re correspondant (figure 2). Exemple de lecture : le caract\u00e8re correspondant \u00e0 l\u2019octet cod\u00e9 4A en hexad\u00e9cimal est la lettre J. b) Pour chiffrer le message d\u2019Alice, on r\u00e9alise l\u2019op\u00e9ration XOR bit \u00e0 bit avec la cl\u00e9 suivante : k = 0b 1110 1110 1111 0000 Donner l\u2019\u00e9criture binaire du message obtenu. 2) a) Dresser la table de v\u00e9rit\u00e9 de l\u2019expression bool\u00e9enne suivante : (a XOR b) XOR b b) Bob conna\u00eet la cha\u00eene de caract\u00e8res utilis\u00e9e par Alice pour chiffrer le message. Quelle op\u00e9ration doit-il r\u00e9aliser pour d\u00e9chiffrer son message ?","title":"exercice 12.2"},{"location":"c12r/","text":"Ce qu\u2019il faut savoir conna\u00eetre le principe du chiffrement sym\u00e9trique => utilisation d\u2019une cl\u00e9 de chiffrement priv\u00e9 partag\u00e9e par les 2 interlocuteurs. Utilisation de la fonction XOR bit \u00e0 bit pour chiffrer (et d\u00e9chiffrer un message) \u00e0 l\u2019aide d\u2019une cl\u00e9 (voir le cours). conna\u00eetre le principe du chiffrement asym\u00e9trique => utilisation d\u2019une cl\u00e9 publique et d\u2019une cl\u00e9 priv\u00e9e. Seule la cl\u00e9 publique est diffus\u00e9e (voir le cours). A chiffre un message \u00e0 l\u2019aide de la cl\u00e9 publique de B puis envoie ce message chiffr\u00e9 \u00e0 B, B utilise sa cl\u00e9 priv\u00e9e pour d\u00e9chiffrer le message envoy\u00e9 par A (voir le cours). conna\u00eetre le principe du protocole HTTPS => utilisation du chiffrement asym\u00e9trique pour partager une cl\u00e9 K puis utilisation du chiffrement sym\u00e9trique (utilisation de la cl\u00e9 K) afin de chiffrer les donn\u00e9es qui transitent sur le r\u00e9seau (voir le cours) Ce qu\u2019il faut savoir faire Dans le cadre du chiffrement sym\u00e9trique, vous devez \u00eatre capable de chiffrer et d\u00e9chiffrer un message \u00e0 l\u2019aide d\u2019une cl\u00e9 => utilisation de la fonction XOR bit \u00e0 bit","title":"R\u00e9vision"},{"location":"c12r/#ce-quil-faut-savoir","text":"conna\u00eetre le principe du chiffrement sym\u00e9trique => utilisation d\u2019une cl\u00e9 de chiffrement priv\u00e9 partag\u00e9e par les 2 interlocuteurs. Utilisation de la fonction XOR bit \u00e0 bit pour chiffrer (et d\u00e9chiffrer un message) \u00e0 l\u2019aide d\u2019une cl\u00e9 (voir le cours). conna\u00eetre le principe du chiffrement asym\u00e9trique => utilisation d\u2019une cl\u00e9 publique et d\u2019une cl\u00e9 priv\u00e9e. Seule la cl\u00e9 publique est diffus\u00e9e (voir le cours). A chiffre un message \u00e0 l\u2019aide de la cl\u00e9 publique de B puis envoie ce message chiffr\u00e9 \u00e0 B, B utilise sa cl\u00e9 priv\u00e9e pour d\u00e9chiffrer le message envoy\u00e9 par A (voir le cours). conna\u00eetre le principe du protocole HTTPS => utilisation du chiffrement asym\u00e9trique pour partager une cl\u00e9 K puis utilisation du chiffrement sym\u00e9trique (utilisation de la cl\u00e9 K) afin de chiffrer les donn\u00e9es qui transitent sur le r\u00e9seau (voir le cours)","title":"Ce qu\u2019il faut savoir"},{"location":"c12r/#ce-quil-faut-savoir-faire","text":"Dans le cadre du chiffrement sym\u00e9trique, vous devez \u00eatre capable de chiffrer et d\u00e9chiffrer un message \u00e0 l\u2019aide d\u2019une cl\u00e9 => utilisation de la fonction XOR bit \u00e0 bit","title":"Ce qu\u2019il faut savoir faire"},{"location":"c13a/","text":"activit\u00e9 13.1 Expliquez en quelques lignes la notion de \"probl\u00e8me ind\u00e9cidable\". Donnez un exemple de probl\u00e8me ind\u00e9cidable","title":"Activit\u00e9s"},{"location":"c13a/#activite-131","text":"Expliquez en quelques lignes la notion de \"probl\u00e8me ind\u00e9cidable\". Donnez un exemple de probl\u00e8me ind\u00e9cidable","title":"activit\u00e9 13.1"},{"location":"c13c/","text":"Certains programmes utilisent comme donn\u00e9es le code source d'autres programmes. Les compilateurs sont des bons exemples. Nous avons eu l'ann\u00e9e derni\u00e8re l'occasion de travailler sur le langage C, et nous avons vu que ce langage est un langage compil\u00e9 : une fois le code source termin\u00e9e, le compilateur (qui est un logiciel comme un autre) \"transforme\" ce code source en langage machine. Il existe d'autres exemples de programmes qui utilisent comme donn\u00e9es d'autres programmes : un syst\u00e8me d'exploitation peut \u00eatre vu comme un programme qui fait \"tourner\" d'autres programme pour t\u00e9l\u00e9charger un logiciel on utilise un gestionnaire de t\u00e9l\u00e9chargement qui est lui-m\u00eame un logiciel. On trouve m\u00eame des programmes capables de d\u00e9tecter certaines erreurs dans le code source d'autres programmes ou m\u00eame encore des programmes capables de prouver (math\u00e9matiquement parlant) qu'un autre programme est correct (qu'il fait bien ce pour quoi il a \u00e9t\u00e9 con\u00e7u). Le d\u00e9veloppement de programmes de \"d\u00e9tection d'erreurs\" ou encore de \"preuve de correction\" a connu une forte croissance en France, notamment depuis l'accident du vol 501 d'Ariane 5 du 4 juin 1996 ou encore de la mise au point du m\u00e9tro automatique Meteor (ligne 14 \u00e0 Paris). Le \"cauchemar\" d'un programmeur est que son programme, dans certains cas, \"tombe\" dans une boucle infinie et ne s'arr\u00eate jamais. Dans ce cas, le logiciel est incapable de fournir la r\u00e9ponse attendue par l'utilisateur. Un programme qui permettrait de tester si un autre programme va finir par s'arr\u00eater, quel que soit le cas trait\u00e9, serait d'une grande aide pour tous les d\u00e9veloppeurs du monde ! Pourtant, depuis 1937 et les travaux d'Alonzo Church et d'Alan Turing, on sait qu'un tel programme ne peut pas exister. Alonzo Church (1903-1995) Alan Turing (1912-1954) Nous allons essayer de d\u00e9montrer qu'un programme capable de r\u00e9pondre \u00e0 la question \"ce programme va-t-il s'arr\u00eater\" (r\u00e9ponse oui/non) ne peut pas exister : Soit un programme (ou un algorithme, cela revient au m\u00eame) que l'on va nommer \"Arr\u00eat?\", ce programme prend en entr\u00e9e un programme P et des donn\u00e9es x (les donn\u00e9es x sont les donn\u00e9es qui vont \u00eatre utilis\u00e9es par le programme P). Le programme \"Arr\u00eat?\" r\u00e9pond \"oui\" si le programme P (qui utilise les donn\u00e9es x) s'arr\u00eate. Le programme \"Arr\u00eat?\" r\u00e9pond \"non\" si le programme P (qui utilise les donn\u00e9es x) ne s'arr\u00eate jamais. Partons du principe que ce programme \"Arr\u00eat?\" existe (raisonnement par l'absurde). Imaginons un autre programme que nous appellerons D. D utilise, entre autres, le programme \"Arr\u00eat?\" : D prend en entr\u00e9e une donn\u00e9e x (une chaine de caract\u00e8res). La donn\u00e9e x est d'abord dupliqu\u00e9e (on obtient (x,x)). En sortie : dans le cas o\u00f9 le programme \"Arr\u00eat?\" renvoie \"OUI\", le programme D \"tombe\" dans une boucle infinie (il ne s'arr\u00eate jamais) dans le cas o\u00f9 le programme \"Arr\u00eat?\" renvoie \"NON\", le programme D s'arr\u00eate. Le programme D poss\u00e8de un code source (une chaine de caract\u00e8re), il est donc tout \u00e0 fait possible de \"placer\" le code source de D \u00e0 l'entr\u00e9e du programme D : Analysons ce qui se passe : supposons que D s'arr\u00eate quand on lui donne D => \"Arr\u00eat?\" r\u00e9pond \"OUI\", donc D tombe dans une boucle infinie, donc D ne s'arr\u00eate pas. Donc quand D s'arr\u00eate, D ne s'arr\u00eate pas... ce qui est une contradiction supposons que D ne s'arr\u00eate pas quand on lui donne D => \"Arr\u00eat?\" r\u00e9pond \"NON\", donc D s'arr\u00eate. Donc quand D ne s'arr\u00eate pas, D s'arr\u00eate...ici aussi nous avons une contradiction ! Dans les 2 cas, nous avons une contradiction, nous pouvons donc en conclure que le programme D ne peut pas exister. Mais du coup, si le programme D ne peut pas exister, cela signifie que le programme \"Arr\u00eat?\" ne peut pas exister (puisque le programme D se base sur le programme \"Arr\u00eat?\"). Nous venons donc bien de d\u00e9montrer que le programme \"Arr\u00eat?\" ne peut pas exister. Cette id\u00e9e d'avoir un probl\u00e8me (probl\u00e8me de l'arr\u00eat) qui ne peut pas \u00eatre r\u00e9solu par un algorithme peut \u00eatre g\u00e9n\u00e9ralis\u00e9e : il existe en effet une s\u00e9rie de probl\u00e8mes qui ne peuvent pas \u00eatre r\u00e9solus par un algorithme. On dit que ces probl\u00e8mes sont \"ind\u00e9cidables\". Le probl\u00e8me de l'arr\u00eat est donc ind\u00e9cidable. A contrario, les probl\u00e8mes qui peuvent \u00eatre r\u00e9solus par un algorithme sont dits d\u00e9cidables. Nous venons de voir qu'un algorithme peut permettre de r\u00e9soudre des probl\u00e8mes (par exemple r\u00e9pondre \u00e0 une question par oui ou non), \u00e0 condition que le probl\u00e8me soit d\u00e9cidable. Un algorithme peut aussi r\u00e9aliser des calculs et donner un r\u00e9sultat. Un algorithme peut donc aussi calculer l'image d'une valeur x par une fonction f (si on prend une fonction f telle que f(x)=5x+3, il est ais\u00e9 de programmer un algorithme qui donnera l'image de x par f quel que soit x). Pourtant Church et Turing ont d\u00e9montr\u00e9 que pour certaines fonctions il n'existait pas d'algorithme capable de calculer l'image de x. Ces fonctions sont dites non-calculables. Attention, ce n'est pas parce qu'une fonction f n'est pas calculable qu'il n'est possible de trouver l'image de x par f. Cela veut juste dire qu'il n'existe pas d'algorithme capable d'effectuer ce calcul. Au contraire, s'il existe un algorithme capable de calculer l'image de x par une fonction f, alors cette fonction f est dite calculable. Les notions de d\u00e9cidabilit\u00e9 et de calculabilit\u00e9 sont \u00e9troitement li\u00e9es, mais cela sort du cadre de ce cours.","title":"Cours"},{"location":"c13e/","text":"\u00c0 venir","title":"Exercices"},{"location":"c13r/","text":"Ce qu\u2019il faut savoir en 1937 Alonzo Church et Alan Turing ont d\u00e9montr\u00e9 que certains probl\u00e8mes ne pouvaient pas \u00eatre r\u00e9solus avec un algorithme s\u2019il n\u2019existe pas d\u2019algorithme capable de r\u00e9soudre un probl\u00e8me et que la r\u00e9ponse attendue \u00e0 ce probl\u00e8me est \u201coui\u201d ou \u201cnon\u201d, on dira que ce probl\u00e8me est ind\u00e9cidable. Quand ce genre de probl\u00e8me peut \u00eatre r\u00e9solu \u00e0 l\u2019aide d\u2019un algorithme, on dit que ce probl\u00e8me est d\u00e9cidable. s\u2019il n\u2019existe pas d\u2019algorithme capable de r\u00e9soudre un probl\u00e8me et que la r\u00e9ponse attendue \u00e0 ce probl\u00e8me est une valeur (issue d\u2019un calcul), on dira que ce probl\u00e8me est non-calculable. Quand ce genre de probl\u00e8me peut \u00eatre r\u00e9solu \u00e0 l\u2019aide d\u2019un algorithme, on dit que ce probl\u00e8me est calculable si un probl\u00e8me est ind\u00e9cidable (ou non-calculable) cela ne veut pas dire que l\u2019on n\u2019est pas capable de r\u00e9soudre ce probl\u00e8me, cela veut juste dire qu\u2019il n\u2019existe pas d\u2019algorithme capable de r\u00e9soudre ce probl\u00e8me. le probl\u00e8me dit de l\u2019arr\u00eat est ind\u00e9cidable Ce qu\u2019il faut savoir faire vous devez \u00eatre capable de montrer que le probl\u00e8me dit de l\u2019arr\u00eat est ind\u00e9cidable","title":"R\u00e9vision"},{"location":"c13r/#ce-quil-faut-savoir","text":"en 1937 Alonzo Church et Alan Turing ont d\u00e9montr\u00e9 que certains probl\u00e8mes ne pouvaient pas \u00eatre r\u00e9solus avec un algorithme s\u2019il n\u2019existe pas d\u2019algorithme capable de r\u00e9soudre un probl\u00e8me et que la r\u00e9ponse attendue \u00e0 ce probl\u00e8me est \u201coui\u201d ou \u201cnon\u201d, on dira que ce probl\u00e8me est ind\u00e9cidable. Quand ce genre de probl\u00e8me peut \u00eatre r\u00e9solu \u00e0 l\u2019aide d\u2019un algorithme, on dit que ce probl\u00e8me est d\u00e9cidable. s\u2019il n\u2019existe pas d\u2019algorithme capable de r\u00e9soudre un probl\u00e8me et que la r\u00e9ponse attendue \u00e0 ce probl\u00e8me est une valeur (issue d\u2019un calcul), on dira que ce probl\u00e8me est non-calculable. Quand ce genre de probl\u00e8me peut \u00eatre r\u00e9solu \u00e0 l\u2019aide d\u2019un algorithme, on dit que ce probl\u00e8me est calculable si un probl\u00e8me est ind\u00e9cidable (ou non-calculable) cela ne veut pas dire que l\u2019on n\u2019est pas capable de r\u00e9soudre ce probl\u00e8me, cela veut juste dire qu\u2019il n\u2019existe pas d\u2019algorithme capable de r\u00e9soudre ce probl\u00e8me. le probl\u00e8me dit de l\u2019arr\u00eat est ind\u00e9cidable","title":"Ce qu\u2019il faut savoir"},{"location":"c13r/#ce-quil-faut-savoir-faire","text":"vous devez \u00eatre capable de montrer que le probl\u00e8me dit de l\u2019arr\u00eat est ind\u00e9cidable","title":"Ce qu\u2019il faut savoir faire"},{"location":"c14a/","text":"activit\u00e9 14.1 Soit la classe Personnage suivante : class Personnage : def __init__ ( self , nbreDeVie ): self . vie = nbreDeVie def donneEtat ( self ): return self . vie def perdVie ( self , nbPoint ): self . vie = self . vie - nbPoint Ajoutez une m\u00e9thode soigne qui permettra d'augmenter l'attribut vie d'une valeur nbr ( nbr sera un param\u00e8tre de la m\u00e9thode soigne ). Testez cette m\u00e9thode en saisissant dans la console Python les instructions suivantes (les unes apr\u00e8s les autres) : toto = Personnage(15) toto.donneEtat() toto.perdVie(2) toto.soigne(3) toto.donneEtat() activit\u00e9 14.2 \u00c9crivez une classe Voiture qui aura un attribut vitesse et 3 m\u00e9thodes : une m\u00e9thode accelere qui permettra d'incr\u00e9menter l'attribut vitesse d'une unit\u00e9 une m\u00e9thode freine qui permettra de diminuer la vitesse une m\u00e9thode getVitesse qui renverra la valeur de la vitesse activit\u00e9 14.3 \u00c0 partir de la classe cr\u00e9\u00e9e \u00e0 l'activit\u00e9 14.2, \u00e9crivez un programme qui permettra d'atteindre la vitesse de 3 km/h, d'afficher cette vitesse dans la console puis de freiner jusqu'\u00e0 l'arr\u00eat complet du v\u00e9hicule. activit\u00e9 14.4 Le but de cette longue activit\u00e9 est d'impl\u00e9menter en Python les algorithmes sur les arbres binaires pr\u00e9c\u00e9demment \u00e9tudi\u00e9s. Il sera donc sans doute n\u00e9cessaire de reprendre ce qui a \u00e9t\u00e9 vu sur la structure de donn\u00e9es \"arbre\" et sur \"les algorithmes sur les arbres binaires\". Comme nous l'avons d\u00e9j\u00e0 dit, Python ne propose pas de structure de donn\u00e9es permettant d'impl\u00e9menter directement les arbres binaires. Il va donc \u00eatre n\u00e9cessaire de cr\u00e9er cette structure. Pour programmer ce type de structure, nous allons utiliser le paradigme objet. Vous trouverez ci-dessous la classe ArbreBinaire qui va nous permettre d'impl\u00e9menter des arbres binaires. class ArbreBinaire : def __init__ ( self , valeur ): self . valeur = valeur self . enfant_gauche = None self . enfant_droit = None def insert_gauche ( self , valeur ): if self . enfant_gauche == None : self . enfant_gauche = ArbreBinaire ( valeur ) else : new_node = ArbreBinaire ( valeur ) new_node . enfant_gauche = self . enfant_gauche self . enfant_gauche = new_node def insert_droit ( self , valeur ): if self . enfant_droit == None : self . enfant_droit = ArbreBinaire ( valeur ) else : new_node = ArbreBinaire ( valeur ) new_node . enfant_droit = self . enfant_droit self . enfant_droit = new_node def get_valeur ( self ): return self . valeur def get_gauche ( self ): return self . enfant_gauche def get_droit ( self ): return self . enfant_droit 1- \u00c9tudiez attentivement la classe ArbreBinaire (m\u00e9thodes et attributs). Vous pouvez, par exemple, vous interroger sur l'utilit\u00e9 de toutes les m\u00e9thodes de cette classe. Voici un exemple d'utilisation de cette classe pour construire un arbre binaire : Soit l'arbre binaire suivant (arbre 1) : Voici le programme qui va permettre de construire cet arbre \u00e0 l'aide de la classe ArbreBinaire : class ArbreBinaire : def __init__ ( self , valeur ): self . valeur = valeur self . enfant_gauche = None self . enfant_droit = None def insert_gauche ( self , valeur ): if self . enfant_gauche == None : self . enfant_gauche = ArbreBinaire ( valeur ) else : new_node = ArbreBinaire ( valeur ) new_node . enfant_gauche = self . enfant_gauche self . enfant_gauche = new_node def insert_droit ( self , valeur ): if self . enfant_droit == None : self . enfant_droit = ArbreBinaire ( valeur ) else : new_node = ArbreBinaire ( valeur ) new_node . enfant_droit = self . enfant_droit self . enfant_droit = new_node def get_valeur ( self ): return self . valeur def get_gauche ( self ): return self . enfant_gauche def get_droit ( self ): return self . enfant_droit #######fin de la classe######## ######d\u00e9but de la construction de l'arbre binaire########### racine = ArbreBinaire ( 'A' ) racine . insert_gauche ( 'B' ) racine . insert_droit ( 'F' ) b_node = racine . get_gauche () b_node . insert_gauche ( 'C' ) b_node . insert_droit ( 'D' ) f_node = racine . get_droit () f_node . insert_gauche ( 'G' ) f_node . insert_droit ( 'H' ) c_node = b_node . get_gauche () c_node . insert_droit ( 'E' ) g_node = f_node . get_gauche () g_node . insert_gauche ( 'I' ) h_node = f_node . get_droit () h_node . insert_droit ( 'J' ) ######fin de la construction de l'arbre binaire########### 2- \u00c9tudiez attentivement le programme ci-dessus afin de comprendre le principe de \"construction d'un arbre binaire\" Il est possible d'afficher un arbre binaire dans la console Python, pour cela, nous allons \u00e9crire une fonction \"affiche\". Cette fonction renvoie une s\u00e9rie de tuples de la forme (valeur,arbre_gauche, arbre_droite), comme \"arbre_gauche\" et \"arbre_droite\" seront eux-m\u00eames affich\u00e9s sous forme de tuples, on aura donc un affichage qui ressemblera \u00e0 : (valeur,(valeur_gauche,arbre_gauche_gauche,arbre_gauche_droite),(valeur_droite,arbre_droite_gauche,arbre_droite_droite)), mais comme \"arbre_gauche_gauche\" sera lui-m\u00eame repr\u00e9sent\u00e9 par un tuple... Nous allons donc avoir des tuples qui contiendront des tuples qui eux-m\u00eames contiendront des tuples... Pour l'arbre binaire d\u00e9fini ci-dessus, on aura : ('A', ('B', ('C', None, ('E', None, None)), ('D', None, None)), ('F', ('G', ('I', None, None), None), ('H', None, ('J', None, None)))) Voici le programme augment\u00e9 de la fonction affiche : class ArbreBinaire : def __init__ ( self , valeur ): self . valeur = valeur self . enfant_gauche = None self . enfant_droit = None def insert_gauche ( self , valeur ): if self . enfant_gauche == None : self . enfant_gauche = ArbreBinaire ( valeur ) else : new_node = ArbreBinaire ( valeur ) new_node . enfant_gauche = self . enfant_gauche self . enfant_gauche = new_node def insert_droit ( self , valeur ): if self . enfant_droit == None : self . enfant_droit = ArbreBinaire ( valeur ) else : new_node = ArbreBinaire ( valeur ) new_node . enfant_droit = self . enfant_droit self . enfant_droit = new_node def get_valeur ( self ): return self . valeur def get_gauche ( self ): return self . enfant_gauche def get_droit ( self ): return self . enfant_droit #######fin de la classe######## ######d\u00e9but de la construction de l'arbre binaire########### racine = ArbreBinaire ( 'A' ) racine . insert_gauche ( 'B' ) racine . insert_droit ( 'F' ) b_node = racine . get_gauche () b_node . insert_gauche ( 'C' ) b_node . insert_droit ( 'D' ) f_node = racine . get_droit () f_node . insert_gauche ( 'G' ) f_node . insert_droit ( 'H' ) c_node = b_node . get_gauche () c_node . insert_droit ( 'E' ) g_node = f_node . get_gauche () g_node . insert_gauche ( 'I' ) h_node = f_node . get_droit () h_node . insert_droit ( 'J' ) ######fin de la construction de l'arbre binaire########### def affiche ( T ): if T != None : return ( T . get_valeur (), affiche ( T . get_gauche ()), affiche ( T . get_droit ())) 3- V\u00e9rifiez que \"affiche(racine)\" renvoie bien : ('A', ('B', ('C', None, ('E', None, None)), ('D', None, None)), ('F', ('G', ('I', None, None), None), ('H', None, ('J', None, None)))) N.B : la fonction affiche n'a pas une importance fondamentale, elle sert uniquement \u00e0 v\u00e9rifier que les arbres programm\u00e9s sont bien corrects. 4- Programmez \u00e0 l'aide de la classe ArbreBinaire , l'arbre binaire suivant (arbre 2) : V\u00e9rifiez votre programme \u00e0 l'aide de la fonction \"affiche\" Vous allez maintenant pouvoir commencer \u00e0 travailler sur l'impl\u00e9mentation des algorithmes sur les arbres binaires : 5- Programmez la fonction hauteur qui prend un arbre binaire T en param\u00e8tre et renvoie la hauteur de T Testez votre fonction en utilisant l'arbre vu plus haut (sch\u00e9ma \"arbre 1\"). 6- Programmez la fonction taille qui prend un arbre binaire T en param\u00e8tre et renvoie la taille de T Testez votre fonction en utilisant l'arbre vu plus haut (sch\u00e9ma \"arbre 1\"). 7- Programmez la fonction parcours_infixe qui prend un arbre binaire T en param\u00e8tre et qui permet d'obtenir le parcours infixe de l'arbre T Testez votre fonction en utilisant l'arbre vu plus haut (sch\u00e9ma \"arbre 1\"). 8- Programmez la fonction parcours_prefixe qui prend un arbre binaire T en param\u00e8tre et qui permet d'obtenir le parcours pr\u00e9fixe de l'arbre T Testez votre fonction en utilisant l'arbre vu plus haut (sch\u00e9ma \"arbre 1\"). 9- Programmez la fonction parcours_suffixe qui prend un arbre binaire T en param\u00e8tre et qui permet d'obtenir le parcours suffixe de l'arbre T Testez votre fonction en utilisant l'arbre vu plus haut (sch\u00e9ma \"arbre 1\"). 10- Programmez la fonction parcours_largeur qui prend un arbre binaire T en param\u00e8tre et qui permet d'obtenir le parcours en largeur de l'arbre T Testez votre fonction en utilisant l'arbre vu plus haut (sch\u00e9ma \"arbre 1\"). Nous allons maintenant travailler sur les arbres binaires de recherche. 11- Programmez, \u00e0 l'aide de la classe ArbreBinaire , l'arbre binaire de recherche ci-dessous (arbre 3) : V\u00e9rifiez votre r\u00e9ponse \u00e0 l'aide de la fonction affichage 12- Afin de v\u00e9rifier que l'arbre binaire \"Arbre 3\" est bien un arbre binaire de recherche, utilisez la fonction parcours_infixe programm\u00e9e dans le \"projet 3.7\". 13- Programmez la fonction arbre_recherche qui prend un arbre binaire T et un entier k en param\u00e8tres et qui renvoie True si k appartient \u00e0 T et False dans le cas contraire Testez votre fonction en utilisant l'arbre vu plus haut (sch\u00e9ma \"arbre 3\") avec k = 13 et k = 16. 14- Programmez la fonction arbre_recherche_ite (version it\u00e9rative de la fonction arbre_recherche ) qui prend un arbre binaire T et un entier k en param\u00e8tres et qui renvoie True si k appartient \u00e0 T et False dans le cas contraire Testez votre fonction en utilisant l'arbre vu plus haut (sch\u00e9ma \"arbre 3\") avec k = 13 et k = 16. 15- Programmez la fonction \"arbre_insertion\" qui prend T (un arbre binaire) et y (un objet de type ArbreBinaire ) en param\u00e8tres et qui insert y dans T Testez votre fonction en utilisant l'arbre vu plus haut (sch\u00e9ma \"arbre 3\") avec y.valeur = 16. activit\u00e9 14.5 Cette activit\u00e9 porte sur le probl\u00e8me des Tours de Hanoi. Voici un extrait de l'article Wikip\u00e9dia consacr\u00e9 aux Tours de Hanoi ( https://fr.wikipedia.org/wiki/Tours_de_Hano%C3%AF ) : Les tours de Hano\u00ef (originellement, la tour d'Hano\u00efa) sont un jeu de r\u00e9flexion imagin\u00e9 par le math\u00e9maticien fran\u00e7ais \u00c9douard Lucas, et consistant \u00e0 d\u00e9placer des disques de diam\u00e8tres diff\u00e9rents d'une tour de \u00ab d\u00e9part \u00bb \u00e0 une tour d'\u00ab arriv\u00e9e \u00bb en passant par une tour \u00ab interm\u00e9diaire \u00bb, et ceci en un minimum de coups, tout en respectant les r\u00e8gles suivantes : on ne peut d\u00e9placer plus d'un disque \u00e0 la fois ; on ne peut placer un disque que sur un autre disque plus grand que lui ou sur un emplacement vide. On suppose que cette derni\u00e8re r\u00e8gle est \u00e9galement respect\u00e9e dans la configuration de d\u00e9part. Dans la suite de cette activit\u00e9 nous allons utiliser la classe Tour donn\u00e9e ci-dessous : class Tour : def __init__ ( self , nom , n = 0 ): self . s = [] self . nom = nom for i in range ( n , 0 , - 1 ): self . s . append ( i ) def empile ( self , d ): assert len ( self . s ) == 0 or self . s [ - 1 ] > d , 'Mouvement interdit' self . s . append ( d ) print ( f \"Ajout du disque { d } sur la tour \" , self . nom ) def depile ( self ): assert len ( self . s ) != 0 , 'Impossible, la tour est vide' d = self . s . pop () print ( f \"Retire le disque { d } de la tour \" , self . nom ) return d def affiche ( self ): if len ( self . s ) == 0 : print ( f \"la tour { self . nom } est vide\" ) else : print ( f \"Tour { self . nom } \" ) for d in reversed ( self . s ): print ( \"| \" , d , \" |\" ) 1- Apr\u00e8s avoir \u00e9tudi\u00e9 attentivement la classe Tour, \u00e9crivez les instructions Python permettant de cr\u00e9er 3 instances de la classe Tour (une instance permettant de mod\u00e9liser une tour du jeu). Une tour sera cr\u00e9\u00e9e avec 2 disques (cette tour sera nomm\u00e9e \"A\"), les 2 autres tours seront au d\u00e9part vide (tour \"B\" et tour \"C\"). On notera que chaque disque est identifi\u00e9 par un entier (cet entier repr\u00e9sente le diam\u00e8tre du disque correspondant). 2- \u00c9crivez une fonction mouvement , cette fonction prendra 2 param\u00e8tres t1 et t2 , tous les deux de type Tour (instance de Tour). Le but de cette fonction est de permettre le passage d'un disque de la tour t1 vers la tour t2 . 3- \u00c9crivez la suite d'instructions permettant de r\u00e9soudre le jeu avec 2 disques (la tour \"A\" sera la tour de \"d\u00e9part\", la tour \"B\" sera la tour \"interm\u00e9diaire\" et la tour \"C\" sera la tour \"arriv\u00e9e\"). Vous v\u00e9rifierez votre r\u00e9ponse en affichant le contenu de la tour \"C\" apr\u00e8s l'ex\u00e9cution de votre programme. 4- \u00c9crivez une fonction r\u00e9cursive resoudre permettant de r\u00e9soudre le jeu \"Tours de Hanoi\" dans tous les cas (avec n disques). Cette fonction prendra 4 param\u00e8tres : un entier repr\u00e9sentant le nombre de disques et trois instances de la classe Tour (repr\u00e9sentant la tour \"d\u00e9part\", la tour \"arriv\u00e9e\" et la tour \"interm\u00e9diaire\"). Deux conseils : r\u00e9fl\u00e9chissez bien au cas de base de votre fonction r\u00e9cursive inspirez-vous de ce que vous avez fait dans la question 3 activit\u00e9 14.6 * Vous avez d\u00e9j\u00e0 eu l'occasion de travailler sur les listes dans le chapitre 5 . Dans ce chapitre, nous avons utilis\u00e9 les tuples pour r\u00e9aliser l'impl\u00e9mentation de cette structure de donn\u00e9es. Le but de cette activit\u00e9 est de r\u00e9aliser une autre impl\u00e9mentation des listes, non plus cette fois en utilisant des tuples mais des listes cha\u00een\u00e9es (revoir aussi le chapitre 5 pour les listes cha\u00een\u00e9es). Rappels sur les listes cha\u00een\u00e9es : Dans une liste cha\u00een\u00e9e, \u00e0 chaque \u00e9l\u00e9ment de la liste on associe 2 cases m\u00e9moire : la premi\u00e8re case contient l'\u00e9l\u00e9ment et la deuxi\u00e8me contient l'adresse m\u00e9moire de l'\u00e9l\u00e9ment suivant. Pour dans un premier temps impl\u00e9menter les listes cha\u00een\u00e9es en Python, nous allons utiliser 2 classes : la classe Node la classe LinkedList class Node : def __init__ ( self , value ): self . value = value self . next = None def __str__ ( self ): return str ( self . value ) La classe Node permet d'impl\u00e9menter un \u00e9l\u00e9ment de la liste cha\u00een\u00e9e (les 2 cases : celle qui contient la valeur et celle qui pointe vers l'\u00e9l\u00e9ment suivant). Cette classe Node poss\u00e8de deux attributs : l'attribut self.value qui correspond \u00e0 la case qui contient la valeur (premi\u00e8re case) l'attribut self.next qui correspond \u00e0 la case qui \"pointe\" vers la valeur suivante (deuxi\u00e8me case) Ne vous souciez pas de la m\u00e9thode __str__ qui permet juste d'afficher la valeur d'un \u00e9l\u00e9ment. class LinkedList : def __init__ ( self ): self . head = None self . tail = None def __iter__ ( self ): cur_node = self . head while cur_node : yield cur_node cur_node = cur_node . next def copy ( self ): l = LinkedList () node = self . head while node is not None : new_node = Node ( node . value ) if l . head is None : l . head = new_node l . tail = new_node else : l . tail . next = new_node l . tail = l . tail . next node = node . next return l La classe LinkedList permet d'impl\u00e9menter une liste cha\u00een\u00e9e. Cette classe LinkedList poss\u00e8de deux attributs : l'attribut self.head correspond au premier \u00e9l\u00e9ment de la liste cha\u00een\u00e9e. l'attribut self.tail correspond au dernier \u00e9l\u00e9ment de la liste cha\u00een\u00e9e. Ne vous souciez pas de la m\u00e9thode __iter__ qui permet de parcourir une liste \u00e0 l'aide d'une boucle \"for\" (vous n'aurez pas \u00e0 l'utiliser directement) et de la m\u00e9thode \"copy\" qui permet de r\u00e9aliser la copie d'une liste. Le but de cette activit\u00e9 est d'\u00e9crire les fonctions qui ont d\u00e9j\u00e0 \u00e9t\u00e9 \u00e9crites dans le chapitre 5, mais en utilisant les classes Nodes et LinkedList \u00e0 la place des tuples : fonction \"newList\" : permet d'obtenir une liste vide (la fonction ne prend aucun param\u00e8tre et renvoie une liste vide) fonction \"showList\" : permet d'afficher une liste (la fonction prend en param\u00e8tre une liste et renvoie une cha\u00eene de caract\u00e8res) fonction \"isEmpty\" : permet de tester si une liste est vide (la fonction prend en param\u00e8tre une liste et renvoie True si la liste est vide et False dans le cas contraire) fonction \"car\" : permet d'obtenir le dernier \u00e9l\u00e9ment ajout\u00e9 \u00e0 la liste (la fonction prend en param\u00e8tre une liste et renvoie un entier) fonction \"cdr\" : permet d'obtenir une liste contenant tous les \u00e9l\u00e9ments d'une liste \u00e0 l'exception du dernier \u00e9l\u00e9ment ajout\u00e9 (la fonction prend en param\u00e8tre une liste et renvoie une liste) fonction \"cons\" : permet de construire une liste \u00e0 partir d'un \u00e9l\u00e9ment et d'un autre liste (la fonction prend en param\u00e8tres une valeur et une liste et renvoie une liste) On donne ci-dessous les fonctions \u00e0 compl\u00e9ter. Les fonctions \"newList\", \"isEmpty\" et \"showList\" sont fournies. \u00c0 noter les lignes \"l1 = l.copy()\" dans la fonction cons et la fonction cdr. Ces 2 lignes permettent de cr\u00e9er une copie de la liste qui a \u00e9t\u00e9 pass\u00e9e en param\u00e8tre afin d'\u00e9viter de modifier cette m\u00eame liste. Un simple \"l1 = l\" pour cr\u00e9er la copie ne suffirait pas (une modification de l1 entra\u00eenerait une modification de l), il est donc n\u00e9cessaire d'utiliser la m\u00e9thode \"copy\" de la classe LinkedList. def newList (): return LinkedList () def showList ( l ): li = [ str ( x ) for x in l ] return \" - \" . join ( li ) def isEmpty ( l ): return l . head is None def cons ( v , l ): l1 = l . copy () .... def car ( l ): .... def cdr ( l ): l1 = l . copy () .... Apr\u00e8s avoir compl\u00e9t\u00e9 les fonctions ci-dessus, ex\u00e9cutez le programme ci-dessous : l = newList () l1 = cons ( 15 , cons ( 12 , cons ( 2 , l ))) v = car ( l1 ) l2 = cdr ( l1 ) l3 = cons ( 4 , cons ( 5 , l2 )) Ensuite, tapez successivement dans la console : v showList(l1) showList(l2) showList(l3) Voici les r\u00e9sultats que vous devriez obtenir : >>> v 15 >>> showList(l1) '2 - 12 - 15' >>> showList(l2) '2 - 12' >>> showList(l3) '2 - 12 - 5 - 4' activit\u00e9 14.7 * Vous avez d\u00e9j\u00e0 eu l'occasion de travailler sur les piles dans le chapitre 5 . Dans ce chapitre, nous avons utilis\u00e9 les tableaux (listes Python) pour r\u00e9aliser l'impl\u00e9mentation de cette structure de donn\u00e9es. Le but de cette activit\u00e9 est de r\u00e9aliser une autre impl\u00e9mentation des piles, non plus cette fois en utilisant des tableaux, mais des listes cha\u00een\u00e9es (revoir aussi le chapitre 5 pour les listes cha\u00een\u00e9es). Rappels sur les listes cha\u00een\u00e9es : Dans une liste cha\u00een\u00e9e, \u00e0 chaque \u00e9l\u00e9ment de la liste on associe 2 cases m\u00e9moire : la premi\u00e8re case contient l'\u00e9l\u00e9ment et la deuxi\u00e8me contient l'adresse m\u00e9moire de l'\u00e9l\u00e9ment suivant. Pour dans un premier temps impl\u00e9menter les listes cha\u00een\u00e9es en Python, nous allons utiliser 2 classes : la classe Node la classe LinkedList class Node : def __init__ ( self , value ): self . value = value self . next = None def __str__ ( self ): return str ( self . value ) La classe Node permet d'impl\u00e9menter un \u00e9l\u00e9ment de la liste cha\u00een\u00e9e (les 2 cases : celle qui contient la valeur et celle qui pointe vers l'\u00e9l\u00e9ment suivant). Cette classe Node poss\u00e8de deux attributs : l'attribut self.value qui correspond \u00e0 la case qui contient la valeur (premi\u00e8re case) l'attribut self.next qui correspond \u00e0 la case qui \"pointe\" vers la valeur suivante (deuxi\u00e8me case) Ne vous souciez pas de la m\u00e9thode __str__ qui permet juste d'afficher la valeur d'un \u00e9l\u00e9ment. class LinkedList : def __init__ ( self ): self . head = None self . tail = None def __iter__ ( self ): cur_node = self . head while cur_node : yield cur_node cur_node = cur_node . next La classe LinkedList permet d'impl\u00e9menter une liste cha\u00een\u00e9e. Cette classe LinkedList poss\u00e8de deux attributs : l'attribut self.head correspond au premier \u00e9l\u00e9ment de la liste cha\u00een\u00e9e. l'attribut self.tail correspond au dernier \u00e9l\u00e9ment de la liste cha\u00een\u00e9e. Ne vous souciez pas de la m\u00e9thode __iter__ qui permet de parcourir une liste \u00e0 l'aide d'une boucle \"for\" (vous n'aurez pas \u00e0 l'utiliser directement) Le but de cette activit\u00e9 est d'\u00e9crire une classe \"Stack\" (\"Pile\" en fran\u00e7ais). Cette classe vous permettra d'impl\u00e9menter la structure de donn\u00e9es pile. La classe \"Stack\" utilisera les classes \"LinkedList\" et \"Node\". class Stack : def __init__ ( self ): self . ll = LinkedList () def isEmpty ( self ): return self . ll . head is None def show ( self ): print ( \"\" ) if self . isEmpty (): print ( \"La pile est vide\" ) else : for n in self . ll : print ( \"|\" , n . value , \"|\" ) print ( \"-----\" ) def push ( self , v ): ...... def pop ( self ): ...... Comme vous pouvez le constater ci-dessus, les m\u00e9thodes \"__init__\", \"isEmpty\" (renvoie True si la pile est vide et False dans le cas contraire), \"show\" (permet d'afficher la pile) sont donn\u00e9es. Il vous reste donc \u00e0 impl\u00e9menter la m\u00e9thode \"push\" (permet de placer un \u00e9l\u00e9ment v au sommet de la pile) et la m\u00e9thode \"pop\" (permet de \"d\u00e9piler\" la pile, cette m\u00e9thode renvoie la valeur qui vient d'\u00eatre \"d\u00e9pil\u00e9e\"). Pour v\u00e9rifier la correction des m\u00e9thodes \"push\" et \"pop\" que vous aurez \u00e9crites, vous pourrez ex\u00e9cuter le programme suivant : p = Stack () p . push ( 5 ) p . push ( 8 ) p . show () v = p . pop () print ( \"valeur renvoy\u00e9e par pop : \" , v ) p . show () v = p . pop () print ( \"valeur renvoy\u00e9e par pop : \" , v ) p . show () Vous devriez alors obtenir le r\u00e9sultat suivant : | 8 | | 5 | ----- valeur renvoy\u00e9e par pop : 8 | 5 | ----- valeur renvoy\u00e9e par pop : 5 La pile est vide activit\u00e9 14.8 * Vous avez d\u00e9j\u00e0 eu l'occasion de travailler sur les files dans le chapitre 5 . Dans ce chapitre, nous avons utilis\u00e9 les tableaux (listes Python) pour r\u00e9aliser l'impl\u00e9mentation de cette structure de donn\u00e9es. Le but de cette activit\u00e9 est de r\u00e9aliser une autre impl\u00e9mentation des files, non plus cette fois en utilisant des tableaux, mais des listes cha\u00een\u00e9es (revoir aussi le chapitre 5 pour les listes cha\u00een\u00e9es). Rappels sur les listes cha\u00een\u00e9es : Dans une liste cha\u00een\u00e9e, \u00e0 chaque \u00e9l\u00e9ment de la liste on associe 2 cases m\u00e9moire : la premi\u00e8re case contient l'\u00e9l\u00e9ment et la deuxi\u00e8me contient l'adresse m\u00e9moire de l'\u00e9l\u00e9ment suivant. Pour dans un premier temps impl\u00e9menter les listes cha\u00een\u00e9es en Python, nous allons utiliser 2 classes : la classe Node la classe LinkedList class Node : def __init__ ( self , value ): self . value = value self . next = None def __str__ ( self ): return str ( self . value ) La classe Node permet d'impl\u00e9menter un \u00e9l\u00e9ment de la liste cha\u00een\u00e9e (les 2 cases : celle qui contient la valeur et celle qui pointe vers l'\u00e9l\u00e9ment suivant). Cette classe Node poss\u00e8de deux attributs : l'attribut self.value qui correspond \u00e0 la case qui contient la valeur (premi\u00e8re case) l'attribut self.next qui correspond \u00e0 la case qui \"pointe\" vers la valeur suivante (deuxi\u00e8me case) Ne vous souciez pas de la m\u00e9thode __str__ qui permet juste d'afficher la valeur d'un \u00e9l\u00e9ment. class LinkedList : def __init__ ( self ): self . head = None self . tail = None def __iter__ ( self ): cur_node = self . head while cur_node : yield cur_node cur_node = cur_node . next La classe LinkedList permet d'impl\u00e9menter une liste cha\u00een\u00e9e. Cette classe LinkedList poss\u00e8de deux attributs : l'attribut self.head correspond au premier \u00e9l\u00e9ment de la liste cha\u00een\u00e9e. l'attribut self.tail correspond au dernier \u00e9l\u00e9ment de la liste cha\u00een\u00e9e. Ne vous souciez pas de la m\u00e9thode __iter__ qui permet de parcourir une liste \u00e0 l'aide d'une boucle \"for\" (vous n'aurez pas \u00e0 l'utiliser directement) Le but de cette activit\u00e9 est d'\u00e9crire une classe \"Queue\" (\"File\" en fran\u00e7ais). Cette classe vous permettra d'impl\u00e9menter la structure de donn\u00e9es file. La classe \"Queue\" utilisera les classes \"LinkedList\" et \"Node\". class Queue : def __init__ ( self ): self . ll = LinkedList () def isEmpty ( self ): return self . ll . head is None def show ( self ): if self . isEmpty () : print ( \"la file est vide\" ) else : l = [ str ( x ) for x in self . ll ] print ( \" - \" . join ( l )) def enQueue ( self , v ): ...... def deQueue ( self ): ...... Comme vous pouvez le constater ci-dessus, les m\u00e9thodes \"__init__\", \"isEmpty\" (renvoie True si la file est vide et False dans le cas contraire), \"show\" (permet d'afficher la file) sont donn\u00e9es. Il vous reste donc \u00e0 impl\u00e9menter la m\u00e9thode \"enQueue\" (permet de placer un \u00e9l\u00e9ment v dans la file) et la m\u00e9thode \"deQueue\" (permet de \"d\u00e9filer\" la file, cette m\u00e9thode renvoie la valeur qui vient d'\u00eatre \"d\u00e9fil\u00e9e\"). Pour v\u00e9rifier la correction des m\u00e9thodes \"enQueue\" et \"deQueue\" que vous aurez \u00e9crites, vous pourrez ex\u00e9cuter le programme suivant : q = Queue () q . enQueue ( 5 ) q . enQueue ( 8 ) q . show () v = q . deQueue () print ( \"valeur renvoy\u00e9e par deQueue : \" , v ) q . show () v = q . deQueue () print ( \"valeur renvoy\u00e9e par deQueue : \" , v ) q . show () Vous devriez alors obtenir le r\u00e9sultat suivant : 5 - 8 valeur renvoy\u00e9e par deQueue : 5 8 valeur renvoy\u00e9e par deQueue : 8 la file est vide","title":"Activit\u00e9s"},{"location":"c14a/#activite-141","text":"Soit la classe Personnage suivante : class Personnage : def __init__ ( self , nbreDeVie ): self . vie = nbreDeVie def donneEtat ( self ): return self . vie def perdVie ( self , nbPoint ): self . vie = self . vie - nbPoint Ajoutez une m\u00e9thode soigne qui permettra d'augmenter l'attribut vie d'une valeur nbr ( nbr sera un param\u00e8tre de la m\u00e9thode soigne ). Testez cette m\u00e9thode en saisissant dans la console Python les instructions suivantes (les unes apr\u00e8s les autres) : toto = Personnage(15) toto.donneEtat() toto.perdVie(2) toto.soigne(3) toto.donneEtat()","title":"activit\u00e9 14.1"},{"location":"c14a/#activite-142","text":"\u00c9crivez une classe Voiture qui aura un attribut vitesse et 3 m\u00e9thodes : une m\u00e9thode accelere qui permettra d'incr\u00e9menter l'attribut vitesse d'une unit\u00e9 une m\u00e9thode freine qui permettra de diminuer la vitesse une m\u00e9thode getVitesse qui renverra la valeur de la vitesse","title":"activit\u00e9 14.2"},{"location":"c14a/#activite-143","text":"\u00c0 partir de la classe cr\u00e9\u00e9e \u00e0 l'activit\u00e9 14.2, \u00e9crivez un programme qui permettra d'atteindre la vitesse de 3 km/h, d'afficher cette vitesse dans la console puis de freiner jusqu'\u00e0 l'arr\u00eat complet du v\u00e9hicule.","title":"activit\u00e9 14.3"},{"location":"c14a/#activite-144","text":"Le but de cette longue activit\u00e9 est d'impl\u00e9menter en Python les algorithmes sur les arbres binaires pr\u00e9c\u00e9demment \u00e9tudi\u00e9s. Il sera donc sans doute n\u00e9cessaire de reprendre ce qui a \u00e9t\u00e9 vu sur la structure de donn\u00e9es \"arbre\" et sur \"les algorithmes sur les arbres binaires\". Comme nous l'avons d\u00e9j\u00e0 dit, Python ne propose pas de structure de donn\u00e9es permettant d'impl\u00e9menter directement les arbres binaires. Il va donc \u00eatre n\u00e9cessaire de cr\u00e9er cette structure. Pour programmer ce type de structure, nous allons utiliser le paradigme objet. Vous trouverez ci-dessous la classe ArbreBinaire qui va nous permettre d'impl\u00e9menter des arbres binaires. class ArbreBinaire : def __init__ ( self , valeur ): self . valeur = valeur self . enfant_gauche = None self . enfant_droit = None def insert_gauche ( self , valeur ): if self . enfant_gauche == None : self . enfant_gauche = ArbreBinaire ( valeur ) else : new_node = ArbreBinaire ( valeur ) new_node . enfant_gauche = self . enfant_gauche self . enfant_gauche = new_node def insert_droit ( self , valeur ): if self . enfant_droit == None : self . enfant_droit = ArbreBinaire ( valeur ) else : new_node = ArbreBinaire ( valeur ) new_node . enfant_droit = self . enfant_droit self . enfant_droit = new_node def get_valeur ( self ): return self . valeur def get_gauche ( self ): return self . enfant_gauche def get_droit ( self ): return self . enfant_droit","title":"activit\u00e9 14.4"},{"location":"c14a/#1-","text":"\u00c9tudiez attentivement la classe ArbreBinaire (m\u00e9thodes et attributs). Vous pouvez, par exemple, vous interroger sur l'utilit\u00e9 de toutes les m\u00e9thodes de cette classe. Voici un exemple d'utilisation de cette classe pour construire un arbre binaire : Soit l'arbre binaire suivant (arbre 1) : Voici le programme qui va permettre de construire cet arbre \u00e0 l'aide de la classe ArbreBinaire : class ArbreBinaire : def __init__ ( self , valeur ): self . valeur = valeur self . enfant_gauche = None self . enfant_droit = None def insert_gauche ( self , valeur ): if self . enfant_gauche == None : self . enfant_gauche = ArbreBinaire ( valeur ) else : new_node = ArbreBinaire ( valeur ) new_node . enfant_gauche = self . enfant_gauche self . enfant_gauche = new_node def insert_droit ( self , valeur ): if self . enfant_droit == None : self . enfant_droit = ArbreBinaire ( valeur ) else : new_node = ArbreBinaire ( valeur ) new_node . enfant_droit = self . enfant_droit self . enfant_droit = new_node def get_valeur ( self ): return self . valeur def get_gauche ( self ): return self . enfant_gauche def get_droit ( self ): return self . enfant_droit #######fin de la classe######## ######d\u00e9but de la construction de l'arbre binaire########### racine = ArbreBinaire ( 'A' ) racine . insert_gauche ( 'B' ) racine . insert_droit ( 'F' ) b_node = racine . get_gauche () b_node . insert_gauche ( 'C' ) b_node . insert_droit ( 'D' ) f_node = racine . get_droit () f_node . insert_gauche ( 'G' ) f_node . insert_droit ( 'H' ) c_node = b_node . get_gauche () c_node . insert_droit ( 'E' ) g_node = f_node . get_gauche () g_node . insert_gauche ( 'I' ) h_node = f_node . get_droit () h_node . insert_droit ( 'J' ) ######fin de la construction de l'arbre binaire###########","title":"1-"},{"location":"c14a/#2-","text":"\u00c9tudiez attentivement le programme ci-dessus afin de comprendre le principe de \"construction d'un arbre binaire\" Il est possible d'afficher un arbre binaire dans la console Python, pour cela, nous allons \u00e9crire une fonction \"affiche\". Cette fonction renvoie une s\u00e9rie de tuples de la forme (valeur,arbre_gauche, arbre_droite), comme \"arbre_gauche\" et \"arbre_droite\" seront eux-m\u00eames affich\u00e9s sous forme de tuples, on aura donc un affichage qui ressemblera \u00e0 : (valeur,(valeur_gauche,arbre_gauche_gauche,arbre_gauche_droite),(valeur_droite,arbre_droite_gauche,arbre_droite_droite)), mais comme \"arbre_gauche_gauche\" sera lui-m\u00eame repr\u00e9sent\u00e9 par un tuple... Nous allons donc avoir des tuples qui contiendront des tuples qui eux-m\u00eames contiendront des tuples... Pour l'arbre binaire d\u00e9fini ci-dessus, on aura : ('A', ('B', ('C', None, ('E', None, None)), ('D', None, None)), ('F', ('G', ('I', None, None), None), ('H', None, ('J', None, None)))) Voici le programme augment\u00e9 de la fonction affiche : class ArbreBinaire : def __init__ ( self , valeur ): self . valeur = valeur self . enfant_gauche = None self . enfant_droit = None def insert_gauche ( self , valeur ): if self . enfant_gauche == None : self . enfant_gauche = ArbreBinaire ( valeur ) else : new_node = ArbreBinaire ( valeur ) new_node . enfant_gauche = self . enfant_gauche self . enfant_gauche = new_node def insert_droit ( self , valeur ): if self . enfant_droit == None : self . enfant_droit = ArbreBinaire ( valeur ) else : new_node = ArbreBinaire ( valeur ) new_node . enfant_droit = self . enfant_droit self . enfant_droit = new_node def get_valeur ( self ): return self . valeur def get_gauche ( self ): return self . enfant_gauche def get_droit ( self ): return self . enfant_droit #######fin de la classe######## ######d\u00e9but de la construction de l'arbre binaire########### racine = ArbreBinaire ( 'A' ) racine . insert_gauche ( 'B' ) racine . insert_droit ( 'F' ) b_node = racine . get_gauche () b_node . insert_gauche ( 'C' ) b_node . insert_droit ( 'D' ) f_node = racine . get_droit () f_node . insert_gauche ( 'G' ) f_node . insert_droit ( 'H' ) c_node = b_node . get_gauche () c_node . insert_droit ( 'E' ) g_node = f_node . get_gauche () g_node . insert_gauche ( 'I' ) h_node = f_node . get_droit () h_node . insert_droit ( 'J' ) ######fin de la construction de l'arbre binaire########### def affiche ( T ): if T != None : return ( T . get_valeur (), affiche ( T . get_gauche ()), affiche ( T . get_droit ()))","title":"2-"},{"location":"c14a/#3-","text":"V\u00e9rifiez que \"affiche(racine)\" renvoie bien : ('A', ('B', ('C', None, ('E', None, None)), ('D', None, None)), ('F', ('G', ('I', None, None), None), ('H', None, ('J', None, None)))) N.B : la fonction affiche n'a pas une importance fondamentale, elle sert uniquement \u00e0 v\u00e9rifier que les arbres programm\u00e9s sont bien corrects.","title":"3-"},{"location":"c14a/#4-","text":"Programmez \u00e0 l'aide de la classe ArbreBinaire , l'arbre binaire suivant (arbre 2) : V\u00e9rifiez votre programme \u00e0 l'aide de la fonction \"affiche\" Vous allez maintenant pouvoir commencer \u00e0 travailler sur l'impl\u00e9mentation des algorithmes sur les arbres binaires :","title":"4-"},{"location":"c14a/#5-","text":"Programmez la fonction hauteur qui prend un arbre binaire T en param\u00e8tre et renvoie la hauteur de T Testez votre fonction en utilisant l'arbre vu plus haut (sch\u00e9ma \"arbre 1\").","title":"5-"},{"location":"c14a/#6-","text":"Programmez la fonction taille qui prend un arbre binaire T en param\u00e8tre et renvoie la taille de T Testez votre fonction en utilisant l'arbre vu plus haut (sch\u00e9ma \"arbre 1\").","title":"6-"},{"location":"c14a/#7-","text":"Programmez la fonction parcours_infixe qui prend un arbre binaire T en param\u00e8tre et qui permet d'obtenir le parcours infixe de l'arbre T Testez votre fonction en utilisant l'arbre vu plus haut (sch\u00e9ma \"arbre 1\").","title":"7-"},{"location":"c14a/#8-","text":"Programmez la fonction parcours_prefixe qui prend un arbre binaire T en param\u00e8tre et qui permet d'obtenir le parcours pr\u00e9fixe de l'arbre T Testez votre fonction en utilisant l'arbre vu plus haut (sch\u00e9ma \"arbre 1\").","title":"8-"},{"location":"c14a/#9-","text":"Programmez la fonction parcours_suffixe qui prend un arbre binaire T en param\u00e8tre et qui permet d'obtenir le parcours suffixe de l'arbre T Testez votre fonction en utilisant l'arbre vu plus haut (sch\u00e9ma \"arbre 1\").","title":"9-"},{"location":"c14a/#10-","text":"Programmez la fonction parcours_largeur qui prend un arbre binaire T en param\u00e8tre et qui permet d'obtenir le parcours en largeur de l'arbre T Testez votre fonction en utilisant l'arbre vu plus haut (sch\u00e9ma \"arbre 1\"). Nous allons maintenant travailler sur les arbres binaires de recherche.","title":"10-"},{"location":"c14a/#11-","text":"Programmez, \u00e0 l'aide de la classe ArbreBinaire , l'arbre binaire de recherche ci-dessous (arbre 3) : V\u00e9rifiez votre r\u00e9ponse \u00e0 l'aide de la fonction affichage","title":"11-"},{"location":"c14a/#12-","text":"Afin de v\u00e9rifier que l'arbre binaire \"Arbre 3\" est bien un arbre binaire de recherche, utilisez la fonction parcours_infixe programm\u00e9e dans le \"projet 3.7\".","title":"12-"},{"location":"c14a/#13-","text":"Programmez la fonction arbre_recherche qui prend un arbre binaire T et un entier k en param\u00e8tres et qui renvoie True si k appartient \u00e0 T et False dans le cas contraire Testez votre fonction en utilisant l'arbre vu plus haut (sch\u00e9ma \"arbre 3\") avec k = 13 et k = 16.","title":"13-"},{"location":"c14a/#14-","text":"Programmez la fonction arbre_recherche_ite (version it\u00e9rative de la fonction arbre_recherche ) qui prend un arbre binaire T et un entier k en param\u00e8tres et qui renvoie True si k appartient \u00e0 T et False dans le cas contraire Testez votre fonction en utilisant l'arbre vu plus haut (sch\u00e9ma \"arbre 3\") avec k = 13 et k = 16.","title":"14-"},{"location":"c14a/#15-","text":"Programmez la fonction \"arbre_insertion\" qui prend T (un arbre binaire) et y (un objet de type ArbreBinaire ) en param\u00e8tres et qui insert y dans T Testez votre fonction en utilisant l'arbre vu plus haut (sch\u00e9ma \"arbre 3\") avec y.valeur = 16.","title":"15-"},{"location":"c14a/#activite-145","text":"Cette activit\u00e9 porte sur le probl\u00e8me des Tours de Hanoi. Voici un extrait de l'article Wikip\u00e9dia consacr\u00e9 aux Tours de Hanoi ( https://fr.wikipedia.org/wiki/Tours_de_Hano%C3%AF ) : Les tours de Hano\u00ef (originellement, la tour d'Hano\u00efa) sont un jeu de r\u00e9flexion imagin\u00e9 par le math\u00e9maticien fran\u00e7ais \u00c9douard Lucas, et consistant \u00e0 d\u00e9placer des disques de diam\u00e8tres diff\u00e9rents d'une tour de \u00ab d\u00e9part \u00bb \u00e0 une tour d'\u00ab arriv\u00e9e \u00bb en passant par une tour \u00ab interm\u00e9diaire \u00bb, et ceci en un minimum de coups, tout en respectant les r\u00e8gles suivantes : on ne peut d\u00e9placer plus d'un disque \u00e0 la fois ; on ne peut placer un disque que sur un autre disque plus grand que lui ou sur un emplacement vide. On suppose que cette derni\u00e8re r\u00e8gle est \u00e9galement respect\u00e9e dans la configuration de d\u00e9part. Dans la suite de cette activit\u00e9 nous allons utiliser la classe Tour donn\u00e9e ci-dessous : class Tour : def __init__ ( self , nom , n = 0 ): self . s = [] self . nom = nom for i in range ( n , 0 , - 1 ): self . s . append ( i ) def empile ( self , d ): assert len ( self . s ) == 0 or self . s [ - 1 ] > d , 'Mouvement interdit' self . s . append ( d ) print ( f \"Ajout du disque { d } sur la tour \" , self . nom ) def depile ( self ): assert len ( self . s ) != 0 , 'Impossible, la tour est vide' d = self . s . pop () print ( f \"Retire le disque { d } de la tour \" , self . nom ) return d def affiche ( self ): if len ( self . s ) == 0 : print ( f \"la tour { self . nom } est vide\" ) else : print ( f \"Tour { self . nom } \" ) for d in reversed ( self . s ): print ( \"| \" , d , \" |\" )","title":"activit\u00e9 14.5"},{"location":"c14a/#1-_1","text":"Apr\u00e8s avoir \u00e9tudi\u00e9 attentivement la classe Tour, \u00e9crivez les instructions Python permettant de cr\u00e9er 3 instances de la classe Tour (une instance permettant de mod\u00e9liser une tour du jeu). Une tour sera cr\u00e9\u00e9e avec 2 disques (cette tour sera nomm\u00e9e \"A\"), les 2 autres tours seront au d\u00e9part vide (tour \"B\" et tour \"C\"). On notera que chaque disque est identifi\u00e9 par un entier (cet entier repr\u00e9sente le diam\u00e8tre du disque correspondant).","title":"1-"},{"location":"c14a/#2-_1","text":"\u00c9crivez une fonction mouvement , cette fonction prendra 2 param\u00e8tres t1 et t2 , tous les deux de type Tour (instance de Tour). Le but de cette fonction est de permettre le passage d'un disque de la tour t1 vers la tour t2 .","title":"2-"},{"location":"c14a/#3-_1","text":"\u00c9crivez la suite d'instructions permettant de r\u00e9soudre le jeu avec 2 disques (la tour \"A\" sera la tour de \"d\u00e9part\", la tour \"B\" sera la tour \"interm\u00e9diaire\" et la tour \"C\" sera la tour \"arriv\u00e9e\"). Vous v\u00e9rifierez votre r\u00e9ponse en affichant le contenu de la tour \"C\" apr\u00e8s l'ex\u00e9cution de votre programme.","title":"3-"},{"location":"c14a/#4-_1","text":"\u00c9crivez une fonction r\u00e9cursive resoudre permettant de r\u00e9soudre le jeu \"Tours de Hanoi\" dans tous les cas (avec n disques). Cette fonction prendra 4 param\u00e8tres : un entier repr\u00e9sentant le nombre de disques et trois instances de la classe Tour (repr\u00e9sentant la tour \"d\u00e9part\", la tour \"arriv\u00e9e\" et la tour \"interm\u00e9diaire\"). Deux conseils : r\u00e9fl\u00e9chissez bien au cas de base de votre fonction r\u00e9cursive inspirez-vous de ce que vous avez fait dans la question 3","title":"4-"},{"location":"c14a/#activite-146","text":"Vous avez d\u00e9j\u00e0 eu l'occasion de travailler sur les listes dans le chapitre 5 . Dans ce chapitre, nous avons utilis\u00e9 les tuples pour r\u00e9aliser l'impl\u00e9mentation de cette structure de donn\u00e9es. Le but de cette activit\u00e9 est de r\u00e9aliser une autre impl\u00e9mentation des listes, non plus cette fois en utilisant des tuples mais des listes cha\u00een\u00e9es (revoir aussi le chapitre 5 pour les listes cha\u00een\u00e9es). Rappels sur les listes cha\u00een\u00e9es : Dans une liste cha\u00een\u00e9e, \u00e0 chaque \u00e9l\u00e9ment de la liste on associe 2 cases m\u00e9moire : la premi\u00e8re case contient l'\u00e9l\u00e9ment et la deuxi\u00e8me contient l'adresse m\u00e9moire de l'\u00e9l\u00e9ment suivant. Pour dans un premier temps impl\u00e9menter les listes cha\u00een\u00e9es en Python, nous allons utiliser 2 classes : la classe Node la classe LinkedList class Node : def __init__ ( self , value ): self . value = value self . next = None def __str__ ( self ): return str ( self . value ) La classe Node permet d'impl\u00e9menter un \u00e9l\u00e9ment de la liste cha\u00een\u00e9e (les 2 cases : celle qui contient la valeur et celle qui pointe vers l'\u00e9l\u00e9ment suivant). Cette classe Node poss\u00e8de deux attributs : l'attribut self.value qui correspond \u00e0 la case qui contient la valeur (premi\u00e8re case) l'attribut self.next qui correspond \u00e0 la case qui \"pointe\" vers la valeur suivante (deuxi\u00e8me case) Ne vous souciez pas de la m\u00e9thode __str__ qui permet juste d'afficher la valeur d'un \u00e9l\u00e9ment. class LinkedList : def __init__ ( self ): self . head = None self . tail = None def __iter__ ( self ): cur_node = self . head while cur_node : yield cur_node cur_node = cur_node . next def copy ( self ): l = LinkedList () node = self . head while node is not None : new_node = Node ( node . value ) if l . head is None : l . head = new_node l . tail = new_node else : l . tail . next = new_node l . tail = l . tail . next node = node . next return l La classe LinkedList permet d'impl\u00e9menter une liste cha\u00een\u00e9e. Cette classe LinkedList poss\u00e8de deux attributs : l'attribut self.head correspond au premier \u00e9l\u00e9ment de la liste cha\u00een\u00e9e. l'attribut self.tail correspond au dernier \u00e9l\u00e9ment de la liste cha\u00een\u00e9e. Ne vous souciez pas de la m\u00e9thode __iter__ qui permet de parcourir une liste \u00e0 l'aide d'une boucle \"for\" (vous n'aurez pas \u00e0 l'utiliser directement) et de la m\u00e9thode \"copy\" qui permet de r\u00e9aliser la copie d'une liste. Le but de cette activit\u00e9 est d'\u00e9crire les fonctions qui ont d\u00e9j\u00e0 \u00e9t\u00e9 \u00e9crites dans le chapitre 5, mais en utilisant les classes Nodes et LinkedList \u00e0 la place des tuples : fonction \"newList\" : permet d'obtenir une liste vide (la fonction ne prend aucun param\u00e8tre et renvoie une liste vide) fonction \"showList\" : permet d'afficher une liste (la fonction prend en param\u00e8tre une liste et renvoie une cha\u00eene de caract\u00e8res) fonction \"isEmpty\" : permet de tester si une liste est vide (la fonction prend en param\u00e8tre une liste et renvoie True si la liste est vide et False dans le cas contraire) fonction \"car\" : permet d'obtenir le dernier \u00e9l\u00e9ment ajout\u00e9 \u00e0 la liste (la fonction prend en param\u00e8tre une liste et renvoie un entier) fonction \"cdr\" : permet d'obtenir une liste contenant tous les \u00e9l\u00e9ments d'une liste \u00e0 l'exception du dernier \u00e9l\u00e9ment ajout\u00e9 (la fonction prend en param\u00e8tre une liste et renvoie une liste) fonction \"cons\" : permet de construire une liste \u00e0 partir d'un \u00e9l\u00e9ment et d'un autre liste (la fonction prend en param\u00e8tres une valeur et une liste et renvoie une liste) On donne ci-dessous les fonctions \u00e0 compl\u00e9ter. Les fonctions \"newList\", \"isEmpty\" et \"showList\" sont fournies. \u00c0 noter les lignes \"l1 = l.copy()\" dans la fonction cons et la fonction cdr. Ces 2 lignes permettent de cr\u00e9er une copie de la liste qui a \u00e9t\u00e9 pass\u00e9e en param\u00e8tre afin d'\u00e9viter de modifier cette m\u00eame liste. Un simple \"l1 = l\" pour cr\u00e9er la copie ne suffirait pas (une modification de l1 entra\u00eenerait une modification de l), il est donc n\u00e9cessaire d'utiliser la m\u00e9thode \"copy\" de la classe LinkedList. def newList (): return LinkedList () def showList ( l ): li = [ str ( x ) for x in l ] return \" - \" . join ( li ) def isEmpty ( l ): return l . head is None def cons ( v , l ): l1 = l . copy () .... def car ( l ): .... def cdr ( l ): l1 = l . copy () .... Apr\u00e8s avoir compl\u00e9t\u00e9 les fonctions ci-dessus, ex\u00e9cutez le programme ci-dessous : l = newList () l1 = cons ( 15 , cons ( 12 , cons ( 2 , l ))) v = car ( l1 ) l2 = cdr ( l1 ) l3 = cons ( 4 , cons ( 5 , l2 )) Ensuite, tapez successivement dans la console : v showList(l1) showList(l2) showList(l3) Voici les r\u00e9sultats que vous devriez obtenir : >>> v 15 >>> showList(l1) '2 - 12 - 15' >>> showList(l2) '2 - 12' >>> showList(l3) '2 - 12 - 5 - 4'","title":"activit\u00e9 14.6*"},{"location":"c14a/#activite-147","text":"Vous avez d\u00e9j\u00e0 eu l'occasion de travailler sur les piles dans le chapitre 5 . Dans ce chapitre, nous avons utilis\u00e9 les tableaux (listes Python) pour r\u00e9aliser l'impl\u00e9mentation de cette structure de donn\u00e9es. Le but de cette activit\u00e9 est de r\u00e9aliser une autre impl\u00e9mentation des piles, non plus cette fois en utilisant des tableaux, mais des listes cha\u00een\u00e9es (revoir aussi le chapitre 5 pour les listes cha\u00een\u00e9es). Rappels sur les listes cha\u00een\u00e9es : Dans une liste cha\u00een\u00e9e, \u00e0 chaque \u00e9l\u00e9ment de la liste on associe 2 cases m\u00e9moire : la premi\u00e8re case contient l'\u00e9l\u00e9ment et la deuxi\u00e8me contient l'adresse m\u00e9moire de l'\u00e9l\u00e9ment suivant. Pour dans un premier temps impl\u00e9menter les listes cha\u00een\u00e9es en Python, nous allons utiliser 2 classes : la classe Node la classe LinkedList class Node : def __init__ ( self , value ): self . value = value self . next = None def __str__ ( self ): return str ( self . value ) La classe Node permet d'impl\u00e9menter un \u00e9l\u00e9ment de la liste cha\u00een\u00e9e (les 2 cases : celle qui contient la valeur et celle qui pointe vers l'\u00e9l\u00e9ment suivant). Cette classe Node poss\u00e8de deux attributs : l'attribut self.value qui correspond \u00e0 la case qui contient la valeur (premi\u00e8re case) l'attribut self.next qui correspond \u00e0 la case qui \"pointe\" vers la valeur suivante (deuxi\u00e8me case) Ne vous souciez pas de la m\u00e9thode __str__ qui permet juste d'afficher la valeur d'un \u00e9l\u00e9ment. class LinkedList : def __init__ ( self ): self . head = None self . tail = None def __iter__ ( self ): cur_node = self . head while cur_node : yield cur_node cur_node = cur_node . next La classe LinkedList permet d'impl\u00e9menter une liste cha\u00een\u00e9e. Cette classe LinkedList poss\u00e8de deux attributs : l'attribut self.head correspond au premier \u00e9l\u00e9ment de la liste cha\u00een\u00e9e. l'attribut self.tail correspond au dernier \u00e9l\u00e9ment de la liste cha\u00een\u00e9e. Ne vous souciez pas de la m\u00e9thode __iter__ qui permet de parcourir une liste \u00e0 l'aide d'une boucle \"for\" (vous n'aurez pas \u00e0 l'utiliser directement) Le but de cette activit\u00e9 est d'\u00e9crire une classe \"Stack\" (\"Pile\" en fran\u00e7ais). Cette classe vous permettra d'impl\u00e9menter la structure de donn\u00e9es pile. La classe \"Stack\" utilisera les classes \"LinkedList\" et \"Node\". class Stack : def __init__ ( self ): self . ll = LinkedList () def isEmpty ( self ): return self . ll . head is None def show ( self ): print ( \"\" ) if self . isEmpty (): print ( \"La pile est vide\" ) else : for n in self . ll : print ( \"|\" , n . value , \"|\" ) print ( \"-----\" ) def push ( self , v ): ...... def pop ( self ): ...... Comme vous pouvez le constater ci-dessus, les m\u00e9thodes \"__init__\", \"isEmpty\" (renvoie True si la pile est vide et False dans le cas contraire), \"show\" (permet d'afficher la pile) sont donn\u00e9es. Il vous reste donc \u00e0 impl\u00e9menter la m\u00e9thode \"push\" (permet de placer un \u00e9l\u00e9ment v au sommet de la pile) et la m\u00e9thode \"pop\" (permet de \"d\u00e9piler\" la pile, cette m\u00e9thode renvoie la valeur qui vient d'\u00eatre \"d\u00e9pil\u00e9e\"). Pour v\u00e9rifier la correction des m\u00e9thodes \"push\" et \"pop\" que vous aurez \u00e9crites, vous pourrez ex\u00e9cuter le programme suivant : p = Stack () p . push ( 5 ) p . push ( 8 ) p . show () v = p . pop () print ( \"valeur renvoy\u00e9e par pop : \" , v ) p . show () v = p . pop () print ( \"valeur renvoy\u00e9e par pop : \" , v ) p . show () Vous devriez alors obtenir le r\u00e9sultat suivant : | 8 | | 5 | ----- valeur renvoy\u00e9e par pop : 8 | 5 | ----- valeur renvoy\u00e9e par pop : 5 La pile est vide","title":"activit\u00e9 14.7*"},{"location":"c14a/#activite-148","text":"Vous avez d\u00e9j\u00e0 eu l'occasion de travailler sur les files dans le chapitre 5 . Dans ce chapitre, nous avons utilis\u00e9 les tableaux (listes Python) pour r\u00e9aliser l'impl\u00e9mentation de cette structure de donn\u00e9es. Le but de cette activit\u00e9 est de r\u00e9aliser une autre impl\u00e9mentation des files, non plus cette fois en utilisant des tableaux, mais des listes cha\u00een\u00e9es (revoir aussi le chapitre 5 pour les listes cha\u00een\u00e9es). Rappels sur les listes cha\u00een\u00e9es : Dans une liste cha\u00een\u00e9e, \u00e0 chaque \u00e9l\u00e9ment de la liste on associe 2 cases m\u00e9moire : la premi\u00e8re case contient l'\u00e9l\u00e9ment et la deuxi\u00e8me contient l'adresse m\u00e9moire de l'\u00e9l\u00e9ment suivant. Pour dans un premier temps impl\u00e9menter les listes cha\u00een\u00e9es en Python, nous allons utiliser 2 classes : la classe Node la classe LinkedList class Node : def __init__ ( self , value ): self . value = value self . next = None def __str__ ( self ): return str ( self . value ) La classe Node permet d'impl\u00e9menter un \u00e9l\u00e9ment de la liste cha\u00een\u00e9e (les 2 cases : celle qui contient la valeur et celle qui pointe vers l'\u00e9l\u00e9ment suivant). Cette classe Node poss\u00e8de deux attributs : l'attribut self.value qui correspond \u00e0 la case qui contient la valeur (premi\u00e8re case) l'attribut self.next qui correspond \u00e0 la case qui \"pointe\" vers la valeur suivante (deuxi\u00e8me case) Ne vous souciez pas de la m\u00e9thode __str__ qui permet juste d'afficher la valeur d'un \u00e9l\u00e9ment. class LinkedList : def __init__ ( self ): self . head = None self . tail = None def __iter__ ( self ): cur_node = self . head while cur_node : yield cur_node cur_node = cur_node . next La classe LinkedList permet d'impl\u00e9menter une liste cha\u00een\u00e9e. Cette classe LinkedList poss\u00e8de deux attributs : l'attribut self.head correspond au premier \u00e9l\u00e9ment de la liste cha\u00een\u00e9e. l'attribut self.tail correspond au dernier \u00e9l\u00e9ment de la liste cha\u00een\u00e9e. Ne vous souciez pas de la m\u00e9thode __iter__ qui permet de parcourir une liste \u00e0 l'aide d'une boucle \"for\" (vous n'aurez pas \u00e0 l'utiliser directement) Le but de cette activit\u00e9 est d'\u00e9crire une classe \"Queue\" (\"File\" en fran\u00e7ais). Cette classe vous permettra d'impl\u00e9menter la structure de donn\u00e9es file. La classe \"Queue\" utilisera les classes \"LinkedList\" et \"Node\". class Queue : def __init__ ( self ): self . ll = LinkedList () def isEmpty ( self ): return self . ll . head is None def show ( self ): if self . isEmpty () : print ( \"la file est vide\" ) else : l = [ str ( x ) for x in self . ll ] print ( \" - \" . join ( l )) def enQueue ( self , v ): ...... def deQueue ( self ): ...... Comme vous pouvez le constater ci-dessus, les m\u00e9thodes \"__init__\", \"isEmpty\" (renvoie True si la file est vide et False dans le cas contraire), \"show\" (permet d'afficher la file) sont donn\u00e9es. Il vous reste donc \u00e0 impl\u00e9menter la m\u00e9thode \"enQueue\" (permet de placer un \u00e9l\u00e9ment v dans la file) et la m\u00e9thode \"deQueue\" (permet de \"d\u00e9filer\" la file, cette m\u00e9thode renvoie la valeur qui vient d'\u00eatre \"d\u00e9fil\u00e9e\"). Pour v\u00e9rifier la correction des m\u00e9thodes \"enQueue\" et \"deQueue\" que vous aurez \u00e9crites, vous pourrez ex\u00e9cuter le programme suivant : q = Queue () q . enQueue ( 5 ) q . enQueue ( 8 ) q . show () v = q . deQueue () print ( \"valeur renvoy\u00e9e par deQueue : \" , v ) q . show () v = q . deQueue () print ( \"valeur renvoy\u00e9e par deQueue : \" , v ) q . show () Vous devriez alors obtenir le r\u00e9sultat suivant : 5 - 8 valeur renvoy\u00e9e par deQueue : 5 8 valeur renvoy\u00e9e par deQueue : 8 la file est vide","title":"activit\u00e9 14.8*"},{"location":"c14c/","text":"1) introduction Jusqu'\u00e0 pr\u00e9sent nous avons vu un seul paradigme de programmation (un paradigme est une mani\u00e8re de voir les choses, une repr\u00e9sentation du monde) : la programmation imp\u00e9rative. La programmation imp\u00e9rative repose sur des notions qui vous sont famili\u00e8res : la s\u00e9quence d'instructions (les instructions d'un programme s'ex\u00e9cutent l'une apr\u00e8s l'autre) l'affectation (on attribue une valeur \u00e0 une variable, par exemple : a = 5) l'instruction conditionnelle (if / else) la boucle (while et for) La programmation imp\u00e9rative est loin d'\u00eatre le seul paradigme de programmation (m\u00eame si c'est sans doute le plus courant). Nous allons \u00e9tudier deux autres paradigmes : le paradigme objet et le paradigme fonctionnel. 2) le paradigme fonctionnel Comme dit l'ann\u00e9e derni\u00e8re dans la partie du cours consacr\u00e9e aux effets de bord, le paradigme fonctionnel cherche \u00e0 \u00e9viter au maximum les effets de bord, dit autrement, en programmation fonctionnelle on va \u00e9viter de modifier les valeurs associ\u00e9es \u00e0 des variables. Pour ce faire, on va chercher au maximum \u00e0 utiliser les fonctions (d'o\u00f9 le nom de programmation fonctionnelle), mais ces fonctions ne devront pas modifier les variables : en programmation fonctionnelle, on s\u2019efforce de coder des fonctions qui ne modifient pas l\u2019\u00e9tat courant des variables. Les fonctions utilis\u00e9es en programmation fonctionnelle sont parfois appel\u00e9es \"fonction pure\" : le r\u00e9sultat renvoy\u00e9 par une fonction pure doit uniquement d\u00e9pendre des param\u00e8tres pass\u00e9s \u00e0 la fonction et pas des valeurs externes \u00e0 la fonction (elle ne doit pas non plus engendrer d'effet de bord): Int\u00e9ressons-nous au programme Python suivant : i = 5 def fct (): if i > 5 : return True else : return False fct () La fonction ci-dessus n'est pas une fonction pure, car la valeur renvoy\u00e9e par la fonction fct (True ou False) d\u00e9pend d'une valeur ext\u00e9rieure \u00e0 la fonction. Alors que dans ce cas : def fct ( i ): if i > 5 : return True else : return False fct ( 5 ) La fonction ci-dessus est une fonction pure, car la valeur renvoy\u00e9e par la fonction fct (True ou False) d\u00e9pend uniquement du param\u00e8tre pass\u00e9 \u00e0 la fonction. M\u00eame si certains langages de programmation ont \u00e9t\u00e9 con\u00e7us pour \"imposer\" au programmeur le paradigme fonctionnel (Lisp, Scheme, Haskell...), il est tout \u00e0 fait possible d'utiliser le paradigme fonctionnel avec des langages de programmation plus \"g\u00e9n\u00e9ralistes\" (Python par exemple). Nous allons maintenant travailler sur un exemple de programme Python utilisant le paradigme fonctionnel : Consid\u00e9rons le programme suivant : l = [ 4 , 7 , 3 ] def ajout ( i ): l . append ( i ) Le programme ci-dessus ne respecte pas le paradigme fonctionnel, car nous avons un effet de bord (la variable l est modifi\u00e9e par la fonction ajout). Alors que dans le cas ci-dessous : def ajout ( i , l ): tab = l + [ i ] return tab La fonction ajout ne modifie aucune variable, elle cr\u00e9e un nouveau tableau (tab) \u00e0 partir du tableau l et du param\u00e8tre i (le signe + permet de cr\u00e9er un nouveau tableau, ce nouveau tableau est constitu\u00e9 des \u00e9l\u00e9ments contenus dans le tableau l auxquels on ajoute la valeur i), la fonction renvoie le tableau ainsi cr\u00e9\u00e9. D'une fa\u00e7on plus g\u00e9n\u00e9rale, la m\u00e9thode append de Python ne respecte pas le paradigme fonctionnel puisque append modifie une donn\u00e9e existante. Le paradigme fonctionnel va amener le programmeur non pas \u00e0 modifier une valeur existante, mais plut\u00f4t \u00e0 cr\u00e9er une nouvelle grandeur \u00e0 partir de la grandeur existante : une grandeur existante n'est jamais modifi\u00e9e, donc aucun risque d'effet de bord. 3) le paradigme objet La programmation orient\u00e9e objet repose, comme son nom l'indique, sur le concept d'objet. Un objet dans la vie de tous les jours, vous connaissez, mais en informatique, qu'est ce que c'est ? Une variable ? Une fonction ? Ni l'un ni l'autre, c'est un nouveau concept. Imaginez un objet (de la vie de tous les jours) tr\u00e8s complexe (par exemple un moteur de voiture) : il est \u00e9vident qu'en regardant cet objet, on est frapp\u00e9 par sa complexit\u00e9 (pour un non sp\u00e9cialiste). Imaginez que l'on enferme cet objet dans une caisse et que l'utilisateur de l'objet n'ait pas besoin d'en conna\u00eetre son principe de fonctionnement interne pour pouvoir l'utiliser. L'utilisateur a, \u00e0 sa disposition, des boutons, des manettes et des \u00e9crans de contr\u00f4le pour faire fonctionner l'objet, ce qui rend son utilisation relativement simple. La mise au point de l'objet (par des ing\u00e9nieurs) a \u00e9t\u00e9 tr\u00e8s complexe, en revanche son utilisation est relativement simple. Programmer de mani\u00e8re orient\u00e9e objet, c'est un peu reprendre cette id\u00e9e : utiliser des objets sans se soucier de leur complexit\u00e9 interne. Pour utiliser ces objets, nous n'avons pas \u00e0 notre disposition des boutons, des manettes ou encore des \u00e9crans de contr\u00f4le, mais des attributs et des m\u00e9thodes (nous aurons l'occasion de revenir longuement sur ces 2 concepts). Un des nombreux avantages de la programmation orient\u00e9e objet (POO), est qu'il existe des milliers d'objets (on parle plut\u00f4t de classes, mais l\u00e0 aussi nous reviendrons sur ce terme de classe est peu plus loin) pr\u00eats \u00e0 \u00eatre utilis\u00e9s (vous en avez d\u00e9j\u00e0 utilis\u00e9 de nombreuses fois sans le savoir). On peut r\u00e9aliser des programmes extr\u00eamement complexes uniquement en utilisant des classes pr\u00e9existantes. Les id\u00e9es sous-tendant le paradigme objet datent des ann\u00e9es 60. Mais il faudra attendre le d\u00e9but des ann\u00e9es 70 et la mise au point du langage Smalltalk pour que le paradigme objet gagne en popularit\u00e9 chez les informaticiens. Aujourd'hui de nombreux langages permettent d'utiliser le paradigme objet : C++, Java,... Pour nous initier \u00e0 la programmation orient\u00e9e objet nous allons utiliser un langage que vous connaissez bien : Python. Python permet d'utiliser le paradigme imp\u00e9ratif (comme nous l'avons fait jusqu'\u00e0 pr\u00e9sent), mais il permet aussi d'utiliser le paradigme objet. Il est m\u00eame possible, comme nous le verrons plus loin, d'utiliser les 2 paradigmes dans un m\u00eame programme. La cr\u00e9ation d'une classe en python commence toujours par le mot class. Ensuite toutes les instructions de la classe seront indent\u00e9es : class LeNomDeMaClasse : #instructions de la classe #La d\u00e9finition de la classe est termin\u00e9e. La classe est une esp\u00e8ce de moule (nous reviendrons plus tard sur cette analogie qui a ses limites), \u00e0 partir de ce moule nous allons cr\u00e9er des objets (plus exactement nous parlerons d'instances). Par exemple, nous pouvons cr\u00e9er une classe voiture, puis cr\u00e9er diff\u00e9rentes instances de cette classe (Peugeot407, Renault Espace,...). Pour cr\u00e9er une de ces instances, la proc\u00e9dure est relativement simple : peugeot407 = Voiture () Cette ligne veut tout simplement dire : \"cr\u00e9e un objet (une instance) de la classe Voiture que l'on nommera peugeot407.\" Ensuite, rien ne nous emp\u00eache de cr\u00e9er une deuxi\u00e8me instance de la classe Voiture : renaultEspace = Voiture () Nous rencontrons ici la limite de notre analogie avec le moule. En effet 2 objets fabriqu\u00e9s avec le m\u00eame moule seront (d\u00e9finitivement) identiques, alors qu'ici nos 2 instances pourront \u00e9voluer diff\u00e9remment. Pour d\u00e9velopper toutes ces notions (et d'autres), nous allons \u00e9crire un premier programme : Nous allons commencer par \u00e9crire une classe Personnage (qui sera dans un premier temps une coquille vide) et, \u00e0 partir de cette classe cr\u00e9er 2 instances : bilbo et gollum : class Personnage : pass gollum = Personnage () bilbo = Personnage () Pour l'instant, notre classe ne sert \u00e0 rien et nos instances d'objet ne peuvent rien faire. Comme il n'est pas possible de cr\u00e9er une classe totalement vide, nous avons utilis\u00e9 l'instruction pass qui ne fait rien. Ensuite nous avons cr\u00e9\u00e9 2 instances de la classe Personnage : gollum et bilbo. Comme expliqu\u00e9 pr\u00e9c\u00e9demment, une instance de classe poss\u00e8de des attributs et des m\u00e9thodes. Commen\u00e7ons par les attributs : Un attribut poss\u00e8de une valeur (un peu comme une variable). Nous allons associer un attribut vie \u00e0 notre classe Personnage (chaque instance aura un attribut vie, quand la valeur de vie deviendra nulle, le personnage sera mort !) Ces attributs s'utilisent comme des variables, l'attribut vie pour bilbo sera not\u00e9 : bilbo . vie de la m\u00eame fa\u00e7on l'attribut vie de l'instance gollum sera not\u00e9 : gollum . vie Consid\u00e9rons maintenant le programme suivant : class Personnage : pass gollum = Personnage () gollum . vie = 20 bilbo = Personnage () bilbo . vie = 20 Comme pour une variable il est possible d'utiliser la console Python pour afficher la valeur r\u00e9f\u00e9renc\u00e9e par un attribut. Il suffit de taper dans la console gollum.vie ou bilbo.vie (sans bien s\u00fbr avoir oubli\u00e9 d'ex\u00e9cuter le programme au pr\u00e9alable.). Si nous tapons dans la console gollum.vie nous aurons 20 comme r\u00e9ponse, m\u00eame chose si nous tapons bilbo.vie Cette fa\u00e7on de faire n'est pas tr\u00e8s \"propre\" et n'est pas une bonne pratique En effet, nous ne respectons pas un principe de base de la POO : l'encapsulation Il ne faut pas oublier que notre classe doit \u00eatre \"enferm\u00e9e dans une caisse\" pour que l'utilisateur puisse l'utiliser facilement sans se pr\u00e9occuper de ce qui se passe \u00e0 l'int\u00e9rieur, or, ici, ce n'est pas vraiment le cas. En effet, les attributs (gollum.vie et bilbo.vie), font partie de la classe et devraient donc \u00eatre enferm\u00e9s dans la \"caisse\" ! Pour r\u00e9soudre ce probl\u00e8me, nous allons d\u00e9finir les attributs, dans la classe, \u00e0 l'aide d'une m\u00e9thode (une m\u00e9thode est une fonction d\u00e9finie dans une classe) d'initialisation des attributs. Cette m\u00e9thode est d\u00e9finie dans le code source par la ligne : def __init__ ( self ) La m\u00e9thode init est automatiquement ex\u00e9cut\u00e9e au moment de la cr\u00e9ation d'une instance. Le mot self est obligatoirement le premier argument d'une m\u00e9thode (nous reviendrons ci-dessous sur ce mot self) Nous retrouvons ce mot self lors de la d\u00e9finition des attributs. La d\u00e9finition des attributs sera de la forme : self . vie = 20 Le mot self repr\u00e9sente l'instance. Quand vous d\u00e9finissez une instance de classe (bilbo ou gollum) le nom de votre instance va remplacer le mot self. Dans le code source, nous allons avoir : class Personnage : def __init__ ( self ): self . vie = 20 Ensuite lors de la cr\u00e9ation de l'instance gollum, python va automatiquement remplacer self par gollum et ainsi cr\u00e9er un attribut gollum.vie qui aura pour valeur de d\u00e9part la valeur donn\u00e9e \u00e0 self.vie dans la m\u00e9thode init Il se passera exactement la m\u00eame chose au moment de la cr\u00e9ation de l'instance bilbo, on aura automatiquement la cr\u00e9ation de l'attribut bilbo.vie. Si nous saisissons le programme suivant : class Personnage : def __init__ ( self ): self . vie = 20 gollum = Personnage () bilbo = Personnage () et que nous tapons dans la console Python gollum.vie , nous obtiendrons bien 20. Au moment de la cr\u00e9ation de l'instance gollum, on passe comme argument le nombre de vies (gollum=Personnage (20)). Ce nombre de vies est attribu\u00e9 au premier argument de la m\u00e9thode init , la variable nbreDeVie (nbreDeVie n'est pas tout \u00e0 fait le premier argument de la m\u00e9thode init puisque devant il y a self, mais bon, self \u00e9tant obligatoire, nous pouvons dire que nbreDeVie est le premier argument non obligatoire). N.B. Je parle bien de variable pour nbreDeVie (car ce n'est pas un attribut de la classe personnage puisqu'elle ne commence pas par self). Nous pouvons passer plusieurs arguments \u00e0 la m\u00e9thode init (comme pour n'importe quelle fonction). Nous allons cr\u00e9er 2 nouvelles m\u00e9thodes : Une m\u00e9thode qui enl\u00e8vera un point de vie au personnage bless\u00e9 Une m\u00e9thode qui renverra le nombre de vies restantes Int\u00e9ressons-nous \u00e0 ce programme : class Personnage : def __init__ ( self , nbreDeVie ): self . vie = nbreDeVie def donneEtat ( self ): return self . vie def perdVie ( self ): self . vie = self . vie - 1 gollum = Personnage ( 20 ) bilbo = Personnage ( 15 ) si dans la console Python vous tapez successivement : gollum.donneEtat() vous allez obtenir 20 bilbo.donneEtat() vous allez obtenir 15 gollum.perdVie() gollum.donneEtat() vous allez obtenir 19 bilbo.perdVie() bilbo.donneEtat() vous allez obtenir 14 Vous avez sans doute remarqu\u00e9 que lors de \"l'utilisation\" des instances biblo et gollum, nous avons uniquement utilis\u00e9 des m\u00e9thodes et nous n'avons plus directement utilis\u00e9 des attributs (plus de \"gollum.vie\"). Il est important de savoir qu'en dehors de la classe l'utilisation des attributs est une mauvaise pratique en programmation orient\u00e9e objet : les attributs doivent rester \"\u00e0 l'int\u00e9rieur\" de la classe, l'utilisateur de la classe ne doit pas les utiliser directement. Il peut les manipuler, mais uniquement par l'interm\u00e9diaire d'une m\u00e9thode (la m\u00e9thode self.perdVie() permet de manipuler l'attribut self.vie) Pour l'instant nous avons utilis\u00e9 les m\u00e9thodes uniquement en tapant des instructions dans la console, il est \u00e9videmment possible d'utiliser ces m\u00e9thodes directement dans votre programme : class Personnage : def __init__ ( self , nbreDeVie ): self . vie = nbreDeVie def donneEtat ( self ): return self . vie def perdVie ( self ): self . vie = self . vie - 1 bilbo = Personnage ( 15 ) bilbo . perdVie () point = bilbo . donneEtat () Apr\u00e8s l'ex\u00e9cution du programme ci-dessus, la variable point aura pour valeur 14 Selon le type d'attaque subit, le personnage peut perdre plus ou moins de points de vie. Pour tenir compte de cet \u00e9l\u00e9ment, il est possible d'ajouter un param\u00e8tre \u00e0 la m\u00e9thode perdVie : class Personnage : def __init__ ( self , nbreDeVie ): self . vie = nbreDeVie def donneEtat ( self ): return self . vie def perdVie ( self , nbPoint ): self . vie = self . vie - nbPoint bilbo = Personnage ( 15 ) bilbo . perdVie ( 2 ) point = bilbo . donneEtat () Apr\u00e8s l'ex\u00e9cution du programme ci-dessus, la variable point aura pour valeur 13 Il est possible d'ajouter une part d'al\u00e9atoire dans la m\u00e9thode perdVie : import random class Personnage : def __init__ ( self , nbreDeVie ): self . vie = nbreDeVie def donneEtat ( self ): return self . vie def perdVie ( self ): if random . random () > 0.5 : nbPoint = 1 else : nbPoint = 2 self . vie = self . vie - nbPoint bilbo = Personnage ( 15 ) bilbo . perdVie () point = bilbo . donneEtat () N.B : random.random() renvoie une valeur al\u00e9atoire comprise entre 0 et 1 Comme vous l'avez remarqu\u00e9, il est possible d'utiliser une instruction conditionnelle (if / else) dans une m\u00e9thode. Il est donc possible d'utiliser dans le m\u00eame programme le paradigme objet et le paradigme imp\u00e9ratif. Il est maintenant possible d'organiser un combat virtuel entre nos 2 personnages gr\u00e2ce \u00e0 la classe Personnage que nous venons de cr\u00e9er : import random class Personnage : def __init__ ( self , nbreDeVie ): self . vie = nbreDeVie def donneEtat ( self ): return self . vie def perdVie ( self ): if random . random () > 0.5 : nbPoint = 1 else : nbPoint = 2 self . vie = self . vie - nbPoint def game (): bilbo = Personnage ( 20 ) gollum = Personnage ( 20 ) while bilbo . donneEtat () > 0 and gollum . donneEtat () > 0 : bilbo . perdVie () gollum . perdVie () if bilbo . donneEtat () <= 0 and gollum . donneEtat () > 0 : msg = f \"Gollum est vainqueur, il lui reste encore { gollum . donneEtat () } points alors que Bilbo est mort\" elif gollum . donneEtat () <= 0 and bilbo . donneEtat () > 0 : msg = f \"Bilbo est vainqueur, il lui reste encore { bilbo . donneEtat () } points alors que Gollum est mort\" else : msg = \"Les deux combattants sont morts en m\u00eame temps\" return msg Nous avons encore ici la d\u00e9monstration qu'il est possible d'utiliser le paradigme objet et le paradigme imp\u00e9ratif dans un m\u00eame programme. 4) conclusion Il est important de bien comprendre qu'un programmeur doit maitriser plusieurs paradigmes de programmation (imp\u00e9ratif, objet ou encore fonctionnelle). En effet, il sera plus facile d'utiliser le paradigme objet dans certains cas alors que dans d'autres situations, l'utilisation du paradigme fonctionnel sera pr\u00e9f\u00e9rable. \u00catre capable de choisir le \"bon\" paradigme en fonction des situations fait partie du bagage de tout bon programmeur. Il est aussi important de bien comprendre que la fronti\u00e8re entre ces diff\u00e9rents paradigmes est parfois floue, par exemple on utilise tr\u00e8s souvent de l'imp\u00e9ratif en programmation orient\u00e9e objet.","title":"Cours"},{"location":"c14c/#1-introduction","text":"Jusqu'\u00e0 pr\u00e9sent nous avons vu un seul paradigme de programmation (un paradigme est une mani\u00e8re de voir les choses, une repr\u00e9sentation du monde) : la programmation imp\u00e9rative. La programmation imp\u00e9rative repose sur des notions qui vous sont famili\u00e8res : la s\u00e9quence d'instructions (les instructions d'un programme s'ex\u00e9cutent l'une apr\u00e8s l'autre) l'affectation (on attribue une valeur \u00e0 une variable, par exemple : a = 5) l'instruction conditionnelle (if / else) la boucle (while et for) La programmation imp\u00e9rative est loin d'\u00eatre le seul paradigme de programmation (m\u00eame si c'est sans doute le plus courant). Nous allons \u00e9tudier deux autres paradigmes : le paradigme objet et le paradigme fonctionnel.","title":"1) introduction"},{"location":"c14c/#2-le-paradigme-fonctionnel","text":"Comme dit l'ann\u00e9e derni\u00e8re dans la partie du cours consacr\u00e9e aux effets de bord, le paradigme fonctionnel cherche \u00e0 \u00e9viter au maximum les effets de bord, dit autrement, en programmation fonctionnelle on va \u00e9viter de modifier les valeurs associ\u00e9es \u00e0 des variables. Pour ce faire, on va chercher au maximum \u00e0 utiliser les fonctions (d'o\u00f9 le nom de programmation fonctionnelle), mais ces fonctions ne devront pas modifier les variables : en programmation fonctionnelle, on s\u2019efforce de coder des fonctions qui ne modifient pas l\u2019\u00e9tat courant des variables. Les fonctions utilis\u00e9es en programmation fonctionnelle sont parfois appel\u00e9es \"fonction pure\" : le r\u00e9sultat renvoy\u00e9 par une fonction pure doit uniquement d\u00e9pendre des param\u00e8tres pass\u00e9s \u00e0 la fonction et pas des valeurs externes \u00e0 la fonction (elle ne doit pas non plus engendrer d'effet de bord): Int\u00e9ressons-nous au programme Python suivant : i = 5 def fct (): if i > 5 : return True else : return False fct () La fonction ci-dessus n'est pas une fonction pure, car la valeur renvoy\u00e9e par la fonction fct (True ou False) d\u00e9pend d'une valeur ext\u00e9rieure \u00e0 la fonction. Alors que dans ce cas : def fct ( i ): if i > 5 : return True else : return False fct ( 5 ) La fonction ci-dessus est une fonction pure, car la valeur renvoy\u00e9e par la fonction fct (True ou False) d\u00e9pend uniquement du param\u00e8tre pass\u00e9 \u00e0 la fonction. M\u00eame si certains langages de programmation ont \u00e9t\u00e9 con\u00e7us pour \"imposer\" au programmeur le paradigme fonctionnel (Lisp, Scheme, Haskell...), il est tout \u00e0 fait possible d'utiliser le paradigme fonctionnel avec des langages de programmation plus \"g\u00e9n\u00e9ralistes\" (Python par exemple). Nous allons maintenant travailler sur un exemple de programme Python utilisant le paradigme fonctionnel : Consid\u00e9rons le programme suivant : l = [ 4 , 7 , 3 ] def ajout ( i ): l . append ( i ) Le programme ci-dessus ne respecte pas le paradigme fonctionnel, car nous avons un effet de bord (la variable l est modifi\u00e9e par la fonction ajout). Alors que dans le cas ci-dessous : def ajout ( i , l ): tab = l + [ i ] return tab La fonction ajout ne modifie aucune variable, elle cr\u00e9e un nouveau tableau (tab) \u00e0 partir du tableau l et du param\u00e8tre i (le signe + permet de cr\u00e9er un nouveau tableau, ce nouveau tableau est constitu\u00e9 des \u00e9l\u00e9ments contenus dans le tableau l auxquels on ajoute la valeur i), la fonction renvoie le tableau ainsi cr\u00e9\u00e9. D'une fa\u00e7on plus g\u00e9n\u00e9rale, la m\u00e9thode append de Python ne respecte pas le paradigme fonctionnel puisque append modifie une donn\u00e9e existante. Le paradigme fonctionnel va amener le programmeur non pas \u00e0 modifier une valeur existante, mais plut\u00f4t \u00e0 cr\u00e9er une nouvelle grandeur \u00e0 partir de la grandeur existante : une grandeur existante n'est jamais modifi\u00e9e, donc aucun risque d'effet de bord.","title":"2) le paradigme fonctionnel"},{"location":"c14c/#3-le-paradigme-objet","text":"La programmation orient\u00e9e objet repose, comme son nom l'indique, sur le concept d'objet. Un objet dans la vie de tous les jours, vous connaissez, mais en informatique, qu'est ce que c'est ? Une variable ? Une fonction ? Ni l'un ni l'autre, c'est un nouveau concept. Imaginez un objet (de la vie de tous les jours) tr\u00e8s complexe (par exemple un moteur de voiture) : il est \u00e9vident qu'en regardant cet objet, on est frapp\u00e9 par sa complexit\u00e9 (pour un non sp\u00e9cialiste). Imaginez que l'on enferme cet objet dans une caisse et que l'utilisateur de l'objet n'ait pas besoin d'en conna\u00eetre son principe de fonctionnement interne pour pouvoir l'utiliser. L'utilisateur a, \u00e0 sa disposition, des boutons, des manettes et des \u00e9crans de contr\u00f4le pour faire fonctionner l'objet, ce qui rend son utilisation relativement simple. La mise au point de l'objet (par des ing\u00e9nieurs) a \u00e9t\u00e9 tr\u00e8s complexe, en revanche son utilisation est relativement simple. Programmer de mani\u00e8re orient\u00e9e objet, c'est un peu reprendre cette id\u00e9e : utiliser des objets sans se soucier de leur complexit\u00e9 interne. Pour utiliser ces objets, nous n'avons pas \u00e0 notre disposition des boutons, des manettes ou encore des \u00e9crans de contr\u00f4le, mais des attributs et des m\u00e9thodes (nous aurons l'occasion de revenir longuement sur ces 2 concepts). Un des nombreux avantages de la programmation orient\u00e9e objet (POO), est qu'il existe des milliers d'objets (on parle plut\u00f4t de classes, mais l\u00e0 aussi nous reviendrons sur ce terme de classe est peu plus loin) pr\u00eats \u00e0 \u00eatre utilis\u00e9s (vous en avez d\u00e9j\u00e0 utilis\u00e9 de nombreuses fois sans le savoir). On peut r\u00e9aliser des programmes extr\u00eamement complexes uniquement en utilisant des classes pr\u00e9existantes. Les id\u00e9es sous-tendant le paradigme objet datent des ann\u00e9es 60. Mais il faudra attendre le d\u00e9but des ann\u00e9es 70 et la mise au point du langage Smalltalk pour que le paradigme objet gagne en popularit\u00e9 chez les informaticiens. Aujourd'hui de nombreux langages permettent d'utiliser le paradigme objet : C++, Java,... Pour nous initier \u00e0 la programmation orient\u00e9e objet nous allons utiliser un langage que vous connaissez bien : Python. Python permet d'utiliser le paradigme imp\u00e9ratif (comme nous l'avons fait jusqu'\u00e0 pr\u00e9sent), mais il permet aussi d'utiliser le paradigme objet. Il est m\u00eame possible, comme nous le verrons plus loin, d'utiliser les 2 paradigmes dans un m\u00eame programme. La cr\u00e9ation d'une classe en python commence toujours par le mot class. Ensuite toutes les instructions de la classe seront indent\u00e9es : class LeNomDeMaClasse : #instructions de la classe #La d\u00e9finition de la classe est termin\u00e9e. La classe est une esp\u00e8ce de moule (nous reviendrons plus tard sur cette analogie qui a ses limites), \u00e0 partir de ce moule nous allons cr\u00e9er des objets (plus exactement nous parlerons d'instances). Par exemple, nous pouvons cr\u00e9er une classe voiture, puis cr\u00e9er diff\u00e9rentes instances de cette classe (Peugeot407, Renault Espace,...). Pour cr\u00e9er une de ces instances, la proc\u00e9dure est relativement simple : peugeot407 = Voiture () Cette ligne veut tout simplement dire : \"cr\u00e9e un objet (une instance) de la classe Voiture que l'on nommera peugeot407.\" Ensuite, rien ne nous emp\u00eache de cr\u00e9er une deuxi\u00e8me instance de la classe Voiture : renaultEspace = Voiture () Nous rencontrons ici la limite de notre analogie avec le moule. En effet 2 objets fabriqu\u00e9s avec le m\u00eame moule seront (d\u00e9finitivement) identiques, alors qu'ici nos 2 instances pourront \u00e9voluer diff\u00e9remment. Pour d\u00e9velopper toutes ces notions (et d'autres), nous allons \u00e9crire un premier programme : Nous allons commencer par \u00e9crire une classe Personnage (qui sera dans un premier temps une coquille vide) et, \u00e0 partir de cette classe cr\u00e9er 2 instances : bilbo et gollum : class Personnage : pass gollum = Personnage () bilbo = Personnage () Pour l'instant, notre classe ne sert \u00e0 rien et nos instances d'objet ne peuvent rien faire. Comme il n'est pas possible de cr\u00e9er une classe totalement vide, nous avons utilis\u00e9 l'instruction pass qui ne fait rien. Ensuite nous avons cr\u00e9\u00e9 2 instances de la classe Personnage : gollum et bilbo. Comme expliqu\u00e9 pr\u00e9c\u00e9demment, une instance de classe poss\u00e8de des attributs et des m\u00e9thodes. Commen\u00e7ons par les attributs : Un attribut poss\u00e8de une valeur (un peu comme une variable). Nous allons associer un attribut vie \u00e0 notre classe Personnage (chaque instance aura un attribut vie, quand la valeur de vie deviendra nulle, le personnage sera mort !) Ces attributs s'utilisent comme des variables, l'attribut vie pour bilbo sera not\u00e9 : bilbo . vie de la m\u00eame fa\u00e7on l'attribut vie de l'instance gollum sera not\u00e9 : gollum . vie Consid\u00e9rons maintenant le programme suivant : class Personnage : pass gollum = Personnage () gollum . vie = 20 bilbo = Personnage () bilbo . vie = 20 Comme pour une variable il est possible d'utiliser la console Python pour afficher la valeur r\u00e9f\u00e9renc\u00e9e par un attribut. Il suffit de taper dans la console gollum.vie ou bilbo.vie (sans bien s\u00fbr avoir oubli\u00e9 d'ex\u00e9cuter le programme au pr\u00e9alable.). Si nous tapons dans la console gollum.vie nous aurons 20 comme r\u00e9ponse, m\u00eame chose si nous tapons bilbo.vie Cette fa\u00e7on de faire n'est pas tr\u00e8s \"propre\" et n'est pas une bonne pratique En effet, nous ne respectons pas un principe de base de la POO : l'encapsulation Il ne faut pas oublier que notre classe doit \u00eatre \"enferm\u00e9e dans une caisse\" pour que l'utilisateur puisse l'utiliser facilement sans se pr\u00e9occuper de ce qui se passe \u00e0 l'int\u00e9rieur, or, ici, ce n'est pas vraiment le cas. En effet, les attributs (gollum.vie et bilbo.vie), font partie de la classe et devraient donc \u00eatre enferm\u00e9s dans la \"caisse\" ! Pour r\u00e9soudre ce probl\u00e8me, nous allons d\u00e9finir les attributs, dans la classe, \u00e0 l'aide d'une m\u00e9thode (une m\u00e9thode est une fonction d\u00e9finie dans une classe) d'initialisation des attributs. Cette m\u00e9thode est d\u00e9finie dans le code source par la ligne : def __init__ ( self ) La m\u00e9thode init est automatiquement ex\u00e9cut\u00e9e au moment de la cr\u00e9ation d'une instance. Le mot self est obligatoirement le premier argument d'une m\u00e9thode (nous reviendrons ci-dessous sur ce mot self) Nous retrouvons ce mot self lors de la d\u00e9finition des attributs. La d\u00e9finition des attributs sera de la forme : self . vie = 20 Le mot self repr\u00e9sente l'instance. Quand vous d\u00e9finissez une instance de classe (bilbo ou gollum) le nom de votre instance va remplacer le mot self. Dans le code source, nous allons avoir : class Personnage : def __init__ ( self ): self . vie = 20 Ensuite lors de la cr\u00e9ation de l'instance gollum, python va automatiquement remplacer self par gollum et ainsi cr\u00e9er un attribut gollum.vie qui aura pour valeur de d\u00e9part la valeur donn\u00e9e \u00e0 self.vie dans la m\u00e9thode init Il se passera exactement la m\u00eame chose au moment de la cr\u00e9ation de l'instance bilbo, on aura automatiquement la cr\u00e9ation de l'attribut bilbo.vie. Si nous saisissons le programme suivant : class Personnage : def __init__ ( self ): self . vie = 20 gollum = Personnage () bilbo = Personnage () et que nous tapons dans la console Python gollum.vie , nous obtiendrons bien 20. Au moment de la cr\u00e9ation de l'instance gollum, on passe comme argument le nombre de vies (gollum=Personnage (20)). Ce nombre de vies est attribu\u00e9 au premier argument de la m\u00e9thode init , la variable nbreDeVie (nbreDeVie n'est pas tout \u00e0 fait le premier argument de la m\u00e9thode init puisque devant il y a self, mais bon, self \u00e9tant obligatoire, nous pouvons dire que nbreDeVie est le premier argument non obligatoire). N.B. Je parle bien de variable pour nbreDeVie (car ce n'est pas un attribut de la classe personnage puisqu'elle ne commence pas par self). Nous pouvons passer plusieurs arguments \u00e0 la m\u00e9thode init (comme pour n'importe quelle fonction). Nous allons cr\u00e9er 2 nouvelles m\u00e9thodes : Une m\u00e9thode qui enl\u00e8vera un point de vie au personnage bless\u00e9 Une m\u00e9thode qui renverra le nombre de vies restantes Int\u00e9ressons-nous \u00e0 ce programme : class Personnage : def __init__ ( self , nbreDeVie ): self . vie = nbreDeVie def donneEtat ( self ): return self . vie def perdVie ( self ): self . vie = self . vie - 1 gollum = Personnage ( 20 ) bilbo = Personnage ( 15 ) si dans la console Python vous tapez successivement : gollum.donneEtat() vous allez obtenir 20 bilbo.donneEtat() vous allez obtenir 15 gollum.perdVie() gollum.donneEtat() vous allez obtenir 19 bilbo.perdVie() bilbo.donneEtat() vous allez obtenir 14 Vous avez sans doute remarqu\u00e9 que lors de \"l'utilisation\" des instances biblo et gollum, nous avons uniquement utilis\u00e9 des m\u00e9thodes et nous n'avons plus directement utilis\u00e9 des attributs (plus de \"gollum.vie\"). Il est important de savoir qu'en dehors de la classe l'utilisation des attributs est une mauvaise pratique en programmation orient\u00e9e objet : les attributs doivent rester \"\u00e0 l'int\u00e9rieur\" de la classe, l'utilisateur de la classe ne doit pas les utiliser directement. Il peut les manipuler, mais uniquement par l'interm\u00e9diaire d'une m\u00e9thode (la m\u00e9thode self.perdVie() permet de manipuler l'attribut self.vie) Pour l'instant nous avons utilis\u00e9 les m\u00e9thodes uniquement en tapant des instructions dans la console, il est \u00e9videmment possible d'utiliser ces m\u00e9thodes directement dans votre programme : class Personnage : def __init__ ( self , nbreDeVie ): self . vie = nbreDeVie def donneEtat ( self ): return self . vie def perdVie ( self ): self . vie = self . vie - 1 bilbo = Personnage ( 15 ) bilbo . perdVie () point = bilbo . donneEtat () Apr\u00e8s l'ex\u00e9cution du programme ci-dessus, la variable point aura pour valeur 14 Selon le type d'attaque subit, le personnage peut perdre plus ou moins de points de vie. Pour tenir compte de cet \u00e9l\u00e9ment, il est possible d'ajouter un param\u00e8tre \u00e0 la m\u00e9thode perdVie : class Personnage : def __init__ ( self , nbreDeVie ): self . vie = nbreDeVie def donneEtat ( self ): return self . vie def perdVie ( self , nbPoint ): self . vie = self . vie - nbPoint bilbo = Personnage ( 15 ) bilbo . perdVie ( 2 ) point = bilbo . donneEtat () Apr\u00e8s l'ex\u00e9cution du programme ci-dessus, la variable point aura pour valeur 13 Il est possible d'ajouter une part d'al\u00e9atoire dans la m\u00e9thode perdVie : import random class Personnage : def __init__ ( self , nbreDeVie ): self . vie = nbreDeVie def donneEtat ( self ): return self . vie def perdVie ( self ): if random . random () > 0.5 : nbPoint = 1 else : nbPoint = 2 self . vie = self . vie - nbPoint bilbo = Personnage ( 15 ) bilbo . perdVie () point = bilbo . donneEtat () N.B : random.random() renvoie une valeur al\u00e9atoire comprise entre 0 et 1 Comme vous l'avez remarqu\u00e9, il est possible d'utiliser une instruction conditionnelle (if / else) dans une m\u00e9thode. Il est donc possible d'utiliser dans le m\u00eame programme le paradigme objet et le paradigme imp\u00e9ratif. Il est maintenant possible d'organiser un combat virtuel entre nos 2 personnages gr\u00e2ce \u00e0 la classe Personnage que nous venons de cr\u00e9er : import random class Personnage : def __init__ ( self , nbreDeVie ): self . vie = nbreDeVie def donneEtat ( self ): return self . vie def perdVie ( self ): if random . random () > 0.5 : nbPoint = 1 else : nbPoint = 2 self . vie = self . vie - nbPoint def game (): bilbo = Personnage ( 20 ) gollum = Personnage ( 20 ) while bilbo . donneEtat () > 0 and gollum . donneEtat () > 0 : bilbo . perdVie () gollum . perdVie () if bilbo . donneEtat () <= 0 and gollum . donneEtat () > 0 : msg = f \"Gollum est vainqueur, il lui reste encore { gollum . donneEtat () } points alors que Bilbo est mort\" elif gollum . donneEtat () <= 0 and bilbo . donneEtat () > 0 : msg = f \"Bilbo est vainqueur, il lui reste encore { bilbo . donneEtat () } points alors que Gollum est mort\" else : msg = \"Les deux combattants sont morts en m\u00eame temps\" return msg Nous avons encore ici la d\u00e9monstration qu'il est possible d'utiliser le paradigme objet et le paradigme imp\u00e9ratif dans un m\u00eame programme.","title":"3) le paradigme objet"},{"location":"c14c/#4-conclusion","text":"Il est important de bien comprendre qu'un programmeur doit maitriser plusieurs paradigmes de programmation (imp\u00e9ratif, objet ou encore fonctionnelle). En effet, il sera plus facile d'utiliser le paradigme objet dans certains cas alors que dans d'autres situations, l'utilisation du paradigme fonctionnel sera pr\u00e9f\u00e9rable. \u00catre capable de choisir le \"bon\" paradigme en fonction des situations fait partie du bagage de tout bon programmeur. Il est aussi important de bien comprendre que la fronti\u00e8re entre ces diff\u00e9rents paradigmes est parfois floue, par exemple on utilise tr\u00e8s souvent de l'imp\u00e9ratif en programmation orient\u00e9e objet.","title":"4) conclusion"},{"location":"c14e/","text":"exercices du bac Sujet 3 2021 Exercice 1 Sujet 4 2021 Exercice 2 Sujet 5 2021 Exercice 3 Sujet 6 2021 Exercice 1 Sujet 10 2021 Exercice 4 Sujet 2 2022 Exercice 5 Sujet 3 2022 Exercice 1 Sujet 5 2022 Exercice 1 Sujet 6 2022 Exercice 2 Sujet 7 2022 Exercice 4 Sujet 8 2022 Exercice 4 Sujet 10 2022 Exercice 2 Sujet 12 2022 Exercice 3 Sujet 14 2022 Exercice 2","title":"Exercices"},{"location":"c14e/#exercices-du-bac","text":"Sujet 3 2021 Exercice 1 Sujet 4 2021 Exercice 2 Sujet 5 2021 Exercice 3 Sujet 6 2021 Exercice 1 Sujet 10 2021 Exercice 4 Sujet 2 2022 Exercice 5 Sujet 3 2022 Exercice 1 Sujet 5 2022 Exercice 1 Sujet 6 2022 Exercice 2 Sujet 7 2022 Exercice 4 Sujet 8 2022 Exercice 4 Sujet 10 2022 Exercice 2 Sujet 12 2022 Exercice 3 Sujet 14 2022 Exercice 2","title":"exercices du bac"},{"location":"c14r/","text":"Ce qu\u2019il faut savoir paradigme fonctionnel la programmation fonctionnelle est un paradigme de programmation comme la programmation imp\u00e9rative ou la programmation orient\u00e9e objet. le paradigme fonctionnel repose sur l\u2019utilisation de fonction le paradigme fonctionnel cherche \u00e0 \u00e9viter au maximum les effets de bord => en programmation fonctionnelle, on s\u2019efforce de coder des fonctions qui ne modifient pas l\u2019\u00e9tat courant des variables globales. Les fonctions utilis\u00e9es en programmation fonctionnelle sont parfois appel\u00e9es \"fonction pure\" : le r\u00e9sultat renvoy\u00e9 par une fonction pure doit uniquement d\u00e9pendre des param\u00e8tres pass\u00e9s \u00e0 la fonction et pas des valeurs externes \u00e0 la fonction paradigme objet La programmation orient\u00e9e objet (poo) est un paradigme de programmation qui repose sur la notion de classe, la notion d\u2019attribut et la notion de m\u00e9thode (la poo repose aussi sur les notions d\u2019h\u00e9ritage et de polymorphisme, mais ces 2 notions ne sont pas au programme de NSI). En poo on travaille sur des objets (des instances plus exactement), chaque instance est cr\u00e9\u00e9e \u00e0 partir d\u2019un \u201cmoule\u201d : la classe. Les attributs repr\u00e9sentent l\u2019\u00e9tat d\u2019un objet alors que les m\u00e9thodes repr\u00e9sentent le comportement d\u2019un objet. Ce qu\u2019il faut savoir faire paradigme fonctionnel \u00eatre capable d\u2019\u00e9crire un programme simple en Python qui respecte le paradigme fonctionnel paradigme objet vous devez \u00eatre capable d\u2019analyser et comprendre un programme Python simple qui utilise le paradigme objet vous devez \u00eatre capable d\u2019\u00e9crire un programme Python simple qui utilise le paradigme objet","title":"R\u00e9vision"},{"location":"c14r/#ce-quil-faut-savoir","text":"","title":"Ce qu\u2019il faut savoir"},{"location":"c14r/#paradigme-fonctionnel","text":"la programmation fonctionnelle est un paradigme de programmation comme la programmation imp\u00e9rative ou la programmation orient\u00e9e objet. le paradigme fonctionnel repose sur l\u2019utilisation de fonction le paradigme fonctionnel cherche \u00e0 \u00e9viter au maximum les effets de bord => en programmation fonctionnelle, on s\u2019efforce de coder des fonctions qui ne modifient pas l\u2019\u00e9tat courant des variables globales. Les fonctions utilis\u00e9es en programmation fonctionnelle sont parfois appel\u00e9es \"fonction pure\" : le r\u00e9sultat renvoy\u00e9 par une fonction pure doit uniquement d\u00e9pendre des param\u00e8tres pass\u00e9s \u00e0 la fonction et pas des valeurs externes \u00e0 la fonction","title":"paradigme fonctionnel"},{"location":"c14r/#paradigme-objet","text":"La programmation orient\u00e9e objet (poo) est un paradigme de programmation qui repose sur la notion de classe, la notion d\u2019attribut et la notion de m\u00e9thode (la poo repose aussi sur les notions d\u2019h\u00e9ritage et de polymorphisme, mais ces 2 notions ne sont pas au programme de NSI). En poo on travaille sur des objets (des instances plus exactement), chaque instance est cr\u00e9\u00e9e \u00e0 partir d\u2019un \u201cmoule\u201d : la classe. Les attributs repr\u00e9sentent l\u2019\u00e9tat d\u2019un objet alors que les m\u00e9thodes repr\u00e9sentent le comportement d\u2019un objet.","title":"paradigme objet"},{"location":"c14r/#ce-quil-faut-savoir-faire","text":"","title":"Ce qu\u2019il faut savoir faire"},{"location":"c14r/#paradigme-fonctionnel_1","text":"\u00eatre capable d\u2019\u00e9crire un programme simple en Python qui respecte le paradigme fonctionnel","title":"paradigme fonctionnel"},{"location":"c14r/#paradigme-objet_1","text":"vous devez \u00eatre capable d\u2019analyser et comprendre un programme Python simple qui utilise le paradigme objet vous devez \u00eatre capable d\u2019\u00e9crire un programme Python simple qui utilise le paradigme objet","title":"paradigme objet"},{"location":"c15a/","text":"activit\u00e9 15.1 R\u00e9sumez en quelques lignes le principe de la m\u00e9thode \"diviser pour r\u00e9gner\" activit\u00e9 15.2 Appliquez l'algorithme de tri-fusion au tableau T = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]. Vous n'h\u00e9siterez pas \u00e0 faire un sch\u00e9ma et \u00e0 expliquer la fusion de 2 tableaux tri\u00e9s. activit\u00e9 15.3 Impl\u00e9mentez en Python l'algorithme de tri-fusion. Vous testerez votre programme \u00e0 l'aide du tableau suivant A = [23, 12, 4, 56, 35, 32, 42, 57, 3] activit\u00e9 15.4 Voici une autre impl\u00e9mentation possible du tri-fusion en Python. def tri_fusion ( tab ): n = len ( tab ) if n > 1 : mil = n //... L = tab [: mil ] R = tab [ mil :] tri_fusion ( L ) tri_fusion ( R ) i = 0 j = 0 k = 0 while i < len ( L ) and j < len ( R ): if L [ i ] < R [ ... ]: tab [ k ] = L [ ... ] ... = ... + 1 else : tab [ k ] = R [ ... ] j = j + 1 ... = ... + 1 while i < len ( L ): tab [ ... ] = L [ i ] i = i + 1 k = k + 1 while j < len ( ... ): tab [ k ] = R [ j ] j = j + 1 k = k + 1 Compl\u00e9tez la fonction ci-dessus. Quelques informations pour vous aider : Cette impl\u00e9mentation utilise le slicing. Le slicing permet de r\u00e9cup\u00e9rer une partie d'une liste python en \u00e9crivant : S = L [ deb : fin ] o\u00f9 L est une liste Python et S une autre liste Python contenant uniquement les \u00e9l\u00e9ments d'index \"deb\" \u00e0 \"fin\" de la liste L (l'\u00e9l\u00e9ment d'indice \"deb\" est inclus alors que l'\u00e9l\u00e9ment d'indice \"fin\" est exclu). Voici un exemple : L = [ 4 , 5 , 7 , 9 , 15 , 25 ] S = L [ 1 : 4 ] Dans l'exemple ci-dessus, on a S = [5, 7, 9]. On a bien l'\u00e9l\u00e9ment d'indice 1 (c'est-\u00e0-dire 5) jusqu'\u00e0 l'\u00e9l\u00e9ment d'indice 3 (c'est-\u00e0-dire 9). Attention de ne pas oublier que l'\u00e9l\u00e9ment d'indice 4 (c'est-\u00e0-dire 15) est exclu. Il est possible d'utiliser des \"raccourcis\" : S = L [: 4 ] a exactement la m\u00eame signification que : S = L [ 0 : 4 ] De la m\u00eame mani\u00e8re : S = L [ 3 :] permet de r\u00e9cup\u00e9rer tous les \u00e9l\u00e9ments de la liste L \u00e0 partir de l'\u00e9l\u00e9ment d'indice 3. Par exemple, pour : L = [ 4 , 5 , 7 , 9 , 15 , 25 ] S = L [ 2 :] On a S = [7, 9, 15, 25]. activit\u00e9 15.5 * Nous avons vu que le tri fusion repose sur le principe algorithmique du \"diviser pour r\u00e9gner\", un autre algorithme de tri c\u00e9l\u00e8bre utilise aussi ce principe du \"diviser pour r\u00e9gner\" : le tri rapide (quicksort en anglais). En vous aidant de la vid\u00e9o (en anglais, mais assez facilement compr\u00e9hensible) dont le lien est donn\u00e9 ci-dessous (vous pouvez arr\u00eater la vid\u00e9o \u00e0 18 minutes et 59 secondes), impl\u00e9mentez l'algorithme du tri rapide en Python https://www.youtube.com/watch?v=COk73cpQbFQ","title":"Activit\u00e9s"},{"location":"c15a/#activite-151","text":"R\u00e9sumez en quelques lignes le principe de la m\u00e9thode \"diviser pour r\u00e9gner\"","title":"activit\u00e9 15.1"},{"location":"c15a/#activite-152","text":"Appliquez l'algorithme de tri-fusion au tableau T = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]. Vous n'h\u00e9siterez pas \u00e0 faire un sch\u00e9ma et \u00e0 expliquer la fusion de 2 tableaux tri\u00e9s.","title":"activit\u00e9 15.2"},{"location":"c15a/#activite-153","text":"Impl\u00e9mentez en Python l'algorithme de tri-fusion. Vous testerez votre programme \u00e0 l'aide du tableau suivant A = [23, 12, 4, 56, 35, 32, 42, 57, 3]","title":"activit\u00e9 15.3"},{"location":"c15a/#activite-154","text":"Voici une autre impl\u00e9mentation possible du tri-fusion en Python. def tri_fusion ( tab ): n = len ( tab ) if n > 1 : mil = n //... L = tab [: mil ] R = tab [ mil :] tri_fusion ( L ) tri_fusion ( R ) i = 0 j = 0 k = 0 while i < len ( L ) and j < len ( R ): if L [ i ] < R [ ... ]: tab [ k ] = L [ ... ] ... = ... + 1 else : tab [ k ] = R [ ... ] j = j + 1 ... = ... + 1 while i < len ( L ): tab [ ... ] = L [ i ] i = i + 1 k = k + 1 while j < len ( ... ): tab [ k ] = R [ j ] j = j + 1 k = k + 1 Compl\u00e9tez la fonction ci-dessus. Quelques informations pour vous aider : Cette impl\u00e9mentation utilise le slicing. Le slicing permet de r\u00e9cup\u00e9rer une partie d'une liste python en \u00e9crivant : S = L [ deb : fin ] o\u00f9 L est une liste Python et S une autre liste Python contenant uniquement les \u00e9l\u00e9ments d'index \"deb\" \u00e0 \"fin\" de la liste L (l'\u00e9l\u00e9ment d'indice \"deb\" est inclus alors que l'\u00e9l\u00e9ment d'indice \"fin\" est exclu). Voici un exemple : L = [ 4 , 5 , 7 , 9 , 15 , 25 ] S = L [ 1 : 4 ] Dans l'exemple ci-dessus, on a S = [5, 7, 9]. On a bien l'\u00e9l\u00e9ment d'indice 1 (c'est-\u00e0-dire 5) jusqu'\u00e0 l'\u00e9l\u00e9ment d'indice 3 (c'est-\u00e0-dire 9). Attention de ne pas oublier que l'\u00e9l\u00e9ment d'indice 4 (c'est-\u00e0-dire 15) est exclu. Il est possible d'utiliser des \"raccourcis\" : S = L [: 4 ] a exactement la m\u00eame signification que : S = L [ 0 : 4 ] De la m\u00eame mani\u00e8re : S = L [ 3 :] permet de r\u00e9cup\u00e9rer tous les \u00e9l\u00e9ments de la liste L \u00e0 partir de l'\u00e9l\u00e9ment d'indice 3. Par exemple, pour : L = [ 4 , 5 , 7 , 9 , 15 , 25 ] S = L [ 2 :] On a S = [7, 9, 15, 25].","title":"activit\u00e9 15.4"},{"location":"c15a/#activite-155","text":"Nous avons vu que le tri fusion repose sur le principe algorithmique du \"diviser pour r\u00e9gner\", un autre algorithme de tri c\u00e9l\u00e8bre utilise aussi ce principe du \"diviser pour r\u00e9gner\" : le tri rapide (quicksort en anglais). En vous aidant de la vid\u00e9o (en anglais, mais assez facilement compr\u00e9hensible) dont le lien est donn\u00e9 ci-dessous (vous pouvez arr\u00eater la vid\u00e9o \u00e0 18 minutes et 59 secondes), impl\u00e9mentez l'algorithme du tri rapide en Python https://www.youtube.com/watch?v=COk73cpQbFQ","title":"activit\u00e9 15.5*"},{"location":"c15c/","text":"1) diviser pour r\u00e9gner Le diviser pour r\u00e9gner est une m\u00e9thode algorithmique bas\u00e9e sur le principe suivant : On prend un probl\u00e8me (g\u00e9n\u00e9ralement complexe \u00e0 r\u00e9soudre), on divise ce probl\u00e8me en une multitude de petits probl\u00e8mes, l'id\u00e9e \u00e9tant que les \"petits probl\u00e8mes\" seront plus simples \u00e0 r\u00e9soudre que le probl\u00e8me original. Une fois les petits probl\u00e8mes r\u00e9solus, on recombine les \"petits probl\u00e8mes r\u00e9solus\" afin d'obtenir la solution du probl\u00e8me de d\u00e9part. Le paradigme \"diviser pour r\u00e9gner\" repose donc sur 3 \u00e9tapes : DIVISER : le probl\u00e8me d'origine est divis\u00e9 en un certain nombre de sous-probl\u00e8mes R\u00c9GNER : on r\u00e9sout les sous-probl\u00e8mes (les sous-probl\u00e8mes sont plus faciles \u00e0 r\u00e9soudre que le probl\u00e8me d'origine) COMBINER : les solutions des sous-probl\u00e8mes sont combin\u00e9es afin d'obtenir la solution du probl\u00e8me d'origine. Les algorithmes bas\u00e9s sur le paradigme \"diviser pour r\u00e9gner\" sont tr\u00e8s souvent des algorithmes r\u00e9cursifs. Nous allons maintenant \u00e9tudier un de ces algorithmes bas\u00e9s sur le principe diviser pour r\u00e9gner : le tri-fusion 2) Tri-fusion a) pr\u00e9sentation Nous avons d\u00e9j\u00e0 \u00e9tudi\u00e9 des algorithmes de tri : le tri par insertion et le tri par s\u00e9lection. Nous allons maintenant \u00e9tudier une nouvelle m\u00e9thode de tri, le tri-fusion. Comme pour les algorithmes d\u00e9j\u00e0 \u00e9tudi\u00e9s, cet algorithme de tri fusion prend en entr\u00e9e un tableau non tri\u00e9 et donne en sortie, le m\u00eame tableau, mais tri\u00e9. Soit l'algorithme suivant : VARIABLE A : tableau d'entiers L : tableau d'entiers R : tableau d'entiers p : entier q : entier r : entier n1 : entier n2 : entier DEBUT FUSION (A, p, q, r): n1 \u2190 q - p + 1 n2 \u2190 r - q cr\u00e9er tableau L[1..n1+1] et R[1..n2+1] pour i \u2190 1 \u00e0 n1: L[i] \u2190 A[p+i-1] fin pour pour j \u2190 1 \u00e0 n2: R[j] \u2190 A[q+j] fin pour L[n1+1] \u2190 \u221e R[n2+1] \u2190 \u221e i \u2190 1 j \u2190 1 pour k \u2190 p \u00e0 r: si L[i] \u2a7d R[j]: A[k] \u2190 L[i] i \u2190 i + 1 sinon: A[k] \u2190 R[j] j \u2190 j + 1 fin si fin pour fin FUSION TRI-FUSION(A, p, r): si p < r: q = (p + r) / 2 TRI-FUSION(A, p, q) TRI-FUSION(A, q+1, r) FUSION(A, p, q, r) fin si fin TRI-FUSION FIN Pour trier un tableau A, on fait l'appel initial TRI-FUSION(A, 1, A.longueur) Rappel : Attention, en algorithmique, les indices des tableaux commencent \u00e0 1 Cet algorithme est un peu difficile \u00e0 appr\u00e9hender, on notera qu'il est compos\u00e9 de deux fonctions FUSION et TRI-FUSION (fonction r\u00e9cursive). La fonction TRI-FUSION assure la phase \"DIVISER\" et la fonction FUSION assure les phases \"R\u00c9GNER\" et \"COMBINER\". Voici un exemple d'application de cet algorithme sur le tableau A = [23, 12, 4, 56, 35, 32, 42, 57, 3] : On remarque que dans le cas du tri-fusion, la phase \"R\u00c9GNER\" se r\u00e9duit \u00e0 sa plus simple expression, en effet, \u00e0 la fin de la phase \"DIVISER\", nous avons \u00e0 trier des tableaux qui comportent un seul \u00e9l\u00e9ment, ce qui est \u00e9videmment trivial. La fusion des 2 tableaux d\u00e9j\u00e0 tri\u00e9s est simple, prenons comme exemple la derni\u00e8re fusion entre le tableau [4, 12, 23, 35, 56] et le tableau [3, 32, 42, 57] (le principe est identique pour toutes les fusions) : Soit T le tableau issu de la fusion du tableau B = [4, 12, 23, 35, 56] et du tableau C = [3, 32, 42, 57] (on donne des noms aux tableaux uniquement pour essayer de rendre l'explication la plus claire possible). On consid\u00e8re le premier \u00e9l\u00e9ment du tableau B (4) et le premier \u00e9l\u00e9ment du tableau C (3) : 3 est inf\u00e9rieur \u00e0 4, on place 3 dans le tableau T et on le supprime du tableau C. Nous avons donc alors T = [3], B = [4, 12, 23, 35, 56] et C = [32, 42, 57]. On recommence ensuite \u00e0 comparer le premier \u00e9l\u00e9ment du tableau B (4) et le premier \u00e9l\u00e9ment du tableau C (32) : 4 est inf\u00e9rieur \u00e0 32, on place 4 dans le tableau T et on le supprime du tableau B. Nous avons donc alors T = [3, 4], B = [12, 23, 35, 56] et C = [32, 42, 57]. On compare le premier \u00e9l\u00e9ment du tableau B (12) et le premier \u00e9l\u00e9ment du tableau C (32) : 12 est inf\u00e9rieur \u00e0 32, on place 12 dans le tableau T et on le supprime du tableau B. Nous avons donc alors T = [3, 4, 12], B = [23, 35, 56] et C = [32, 42, 57]. On compare le premier \u00e9l\u00e9ment du tableau B (23) et le premier \u00e9l\u00e9ment du tableau C (32) : 23 est inf\u00e9rieur \u00e0 32, on place 23 dans le tableau T et on le supprime du tableau B. Nous avons donc alors T = [3, 4, 12, 23], B = [35, 56] et C = [32, 42, 57]. On compare le premier \u00e9l\u00e9ment du tableau B (35) et le premier \u00e9l\u00e9ment du tableau C (32) : 32 est inf\u00e9rieur \u00e0 35, on place 32 dans le tableau T et on le supprime du tableau A. Nous avons donc alors T = [3, 4, 12, 23, 32], B = [35, 56] et C = [42, 57]. On compare le premier \u00e9l\u00e9ment du tableau B (35) et le premier \u00e9l\u00e9ment du tableau C (42) : 35 est inf\u00e9rieur \u00e0 42, on place 35 dans le tableau T et on le supprime du tableau A. Nous avons donc alors T = [3, 4, 12, 23, 32, 35], B = [56] et C = [42, 57]. On compare le premier \u00e9l\u00e9ment du tableau B (56) et le premier \u00e9l\u00e9ment du tableau C (42) : 42 est inf\u00e9rieur \u00e0 56, on place 42 dans le tableau T et on le supprime du tableau A. Nous avons donc alors T = [3, 4, 12, 23, 32, 35, 42], B = [56] et C = [57]. On compare le premier \u00e9l\u00e9ment du tableau B (56) et le premier \u00e9l\u00e9ment du tableau C (57) : 56 est inf\u00e9rieur \u00e0 57, on place 56 dans le tableau T et on le supprime du tableau B. Nous avons donc alors T = [3, 4, 12, 23, 32, 35, 42, 56], B = [] et C = [57]. Le tableau B est vide, il nous reste juste \u00e0 placer le seul \u00e9l\u00e9ment qui reste dans C (57) dans T : T = [3, 4, 12, 23, 32, 35, 42, 56, 57], B = [] et C = []. La fusion est termin\u00e9e. b) complexit\u00e9 Nous avons vu que le tri par insertion et tri par s\u00e9lection ont tous les deux une complexit\u00e9 O(n 2 ). Qu'en est-il pour le tri-fusion ? Le calcul rigoureux de la complexit\u00e9 de cet algorithme sort du cadre de ce cours. Mais, en remarquant que la premi\u00e8re phase (DIVISER) consiste \u00e0 \"couper\" les tableaux en deux plusieurs fois de suite, intuitivement, on peut dire qu'un logarithme base 2 doit intervenir. La deuxi\u00e8me phase consiste \u00e0 faire des comparaisons entre les premiers \u00e9l\u00e9ments de chaque tableau \u00e0 fusionner, on peut donc supposer que pour un tableau de n \u00e9l\u00e9ments, on aura n comparaisons. En combinant ces 2 constations on peut donc dire que la complexit\u00e9 du tri-fusion est en O(nlog(n)) (encore une fois la \"d\u00e9monstration\" propos\u00e9e ici n'a rien de rigoureux). La comparaison des courbes de la fonction n 2 (en rouge) et nlog(n) (en bleu) : nous montre que l'algorithme de tri-fusion est plus \"efficace\" que l'algorithme de tri par insertion ou que l'algorithme de tri par s\u00e9lection.","title":"Cours"},{"location":"c15c/#1-diviser-pour-regner","text":"Le diviser pour r\u00e9gner est une m\u00e9thode algorithmique bas\u00e9e sur le principe suivant : On prend un probl\u00e8me (g\u00e9n\u00e9ralement complexe \u00e0 r\u00e9soudre), on divise ce probl\u00e8me en une multitude de petits probl\u00e8mes, l'id\u00e9e \u00e9tant que les \"petits probl\u00e8mes\" seront plus simples \u00e0 r\u00e9soudre que le probl\u00e8me original. Une fois les petits probl\u00e8mes r\u00e9solus, on recombine les \"petits probl\u00e8mes r\u00e9solus\" afin d'obtenir la solution du probl\u00e8me de d\u00e9part. Le paradigme \"diviser pour r\u00e9gner\" repose donc sur 3 \u00e9tapes : DIVISER : le probl\u00e8me d'origine est divis\u00e9 en un certain nombre de sous-probl\u00e8mes R\u00c9GNER : on r\u00e9sout les sous-probl\u00e8mes (les sous-probl\u00e8mes sont plus faciles \u00e0 r\u00e9soudre que le probl\u00e8me d'origine) COMBINER : les solutions des sous-probl\u00e8mes sont combin\u00e9es afin d'obtenir la solution du probl\u00e8me d'origine. Les algorithmes bas\u00e9s sur le paradigme \"diviser pour r\u00e9gner\" sont tr\u00e8s souvent des algorithmes r\u00e9cursifs. Nous allons maintenant \u00e9tudier un de ces algorithmes bas\u00e9s sur le principe diviser pour r\u00e9gner : le tri-fusion","title":"1) diviser pour r\u00e9gner"},{"location":"c15c/#2-tri-fusion","text":"","title":"2) Tri-fusion"},{"location":"c15c/#a-presentation","text":"Nous avons d\u00e9j\u00e0 \u00e9tudi\u00e9 des algorithmes de tri : le tri par insertion et le tri par s\u00e9lection. Nous allons maintenant \u00e9tudier une nouvelle m\u00e9thode de tri, le tri-fusion. Comme pour les algorithmes d\u00e9j\u00e0 \u00e9tudi\u00e9s, cet algorithme de tri fusion prend en entr\u00e9e un tableau non tri\u00e9 et donne en sortie, le m\u00eame tableau, mais tri\u00e9. Soit l'algorithme suivant : VARIABLE A : tableau d'entiers L : tableau d'entiers R : tableau d'entiers p : entier q : entier r : entier n1 : entier n2 : entier DEBUT FUSION (A, p, q, r): n1 \u2190 q - p + 1 n2 \u2190 r - q cr\u00e9er tableau L[1..n1+1] et R[1..n2+1] pour i \u2190 1 \u00e0 n1: L[i] \u2190 A[p+i-1] fin pour pour j \u2190 1 \u00e0 n2: R[j] \u2190 A[q+j] fin pour L[n1+1] \u2190 \u221e R[n2+1] \u2190 \u221e i \u2190 1 j \u2190 1 pour k \u2190 p \u00e0 r: si L[i] \u2a7d R[j]: A[k] \u2190 L[i] i \u2190 i + 1 sinon: A[k] \u2190 R[j] j \u2190 j + 1 fin si fin pour fin FUSION TRI-FUSION(A, p, r): si p < r: q = (p + r) / 2 TRI-FUSION(A, p, q) TRI-FUSION(A, q+1, r) FUSION(A, p, q, r) fin si fin TRI-FUSION FIN Pour trier un tableau A, on fait l'appel initial TRI-FUSION(A, 1, A.longueur) Rappel : Attention, en algorithmique, les indices des tableaux commencent \u00e0 1 Cet algorithme est un peu difficile \u00e0 appr\u00e9hender, on notera qu'il est compos\u00e9 de deux fonctions FUSION et TRI-FUSION (fonction r\u00e9cursive). La fonction TRI-FUSION assure la phase \"DIVISER\" et la fonction FUSION assure les phases \"R\u00c9GNER\" et \"COMBINER\". Voici un exemple d'application de cet algorithme sur le tableau A = [23, 12, 4, 56, 35, 32, 42, 57, 3] : On remarque que dans le cas du tri-fusion, la phase \"R\u00c9GNER\" se r\u00e9duit \u00e0 sa plus simple expression, en effet, \u00e0 la fin de la phase \"DIVISER\", nous avons \u00e0 trier des tableaux qui comportent un seul \u00e9l\u00e9ment, ce qui est \u00e9videmment trivial. La fusion des 2 tableaux d\u00e9j\u00e0 tri\u00e9s est simple, prenons comme exemple la derni\u00e8re fusion entre le tableau [4, 12, 23, 35, 56] et le tableau [3, 32, 42, 57] (le principe est identique pour toutes les fusions) : Soit T le tableau issu de la fusion du tableau B = [4, 12, 23, 35, 56] et du tableau C = [3, 32, 42, 57] (on donne des noms aux tableaux uniquement pour essayer de rendre l'explication la plus claire possible). On consid\u00e8re le premier \u00e9l\u00e9ment du tableau B (4) et le premier \u00e9l\u00e9ment du tableau C (3) : 3 est inf\u00e9rieur \u00e0 4, on place 3 dans le tableau T et on le supprime du tableau C. Nous avons donc alors T = [3], B = [4, 12, 23, 35, 56] et C = [32, 42, 57]. On recommence ensuite \u00e0 comparer le premier \u00e9l\u00e9ment du tableau B (4) et le premier \u00e9l\u00e9ment du tableau C (32) : 4 est inf\u00e9rieur \u00e0 32, on place 4 dans le tableau T et on le supprime du tableau B. Nous avons donc alors T = [3, 4], B = [12, 23, 35, 56] et C = [32, 42, 57]. On compare le premier \u00e9l\u00e9ment du tableau B (12) et le premier \u00e9l\u00e9ment du tableau C (32) : 12 est inf\u00e9rieur \u00e0 32, on place 12 dans le tableau T et on le supprime du tableau B. Nous avons donc alors T = [3, 4, 12], B = [23, 35, 56] et C = [32, 42, 57]. On compare le premier \u00e9l\u00e9ment du tableau B (23) et le premier \u00e9l\u00e9ment du tableau C (32) : 23 est inf\u00e9rieur \u00e0 32, on place 23 dans le tableau T et on le supprime du tableau B. Nous avons donc alors T = [3, 4, 12, 23], B = [35, 56] et C = [32, 42, 57]. On compare le premier \u00e9l\u00e9ment du tableau B (35) et le premier \u00e9l\u00e9ment du tableau C (32) : 32 est inf\u00e9rieur \u00e0 35, on place 32 dans le tableau T et on le supprime du tableau A. Nous avons donc alors T = [3, 4, 12, 23, 32], B = [35, 56] et C = [42, 57]. On compare le premier \u00e9l\u00e9ment du tableau B (35) et le premier \u00e9l\u00e9ment du tableau C (42) : 35 est inf\u00e9rieur \u00e0 42, on place 35 dans le tableau T et on le supprime du tableau A. Nous avons donc alors T = [3, 4, 12, 23, 32, 35], B = [56] et C = [42, 57]. On compare le premier \u00e9l\u00e9ment du tableau B (56) et le premier \u00e9l\u00e9ment du tableau C (42) : 42 est inf\u00e9rieur \u00e0 56, on place 42 dans le tableau T et on le supprime du tableau A. Nous avons donc alors T = [3, 4, 12, 23, 32, 35, 42], B = [56] et C = [57]. On compare le premier \u00e9l\u00e9ment du tableau B (56) et le premier \u00e9l\u00e9ment du tableau C (57) : 56 est inf\u00e9rieur \u00e0 57, on place 56 dans le tableau T et on le supprime du tableau B. Nous avons donc alors T = [3, 4, 12, 23, 32, 35, 42, 56], B = [] et C = [57]. Le tableau B est vide, il nous reste juste \u00e0 placer le seul \u00e9l\u00e9ment qui reste dans C (57) dans T : T = [3, 4, 12, 23, 32, 35, 42, 56, 57], B = [] et C = []. La fusion est termin\u00e9e.","title":"a) pr\u00e9sentation"},{"location":"c15c/#b-complexite","text":"Nous avons vu que le tri par insertion et tri par s\u00e9lection ont tous les deux une complexit\u00e9 O(n 2 ). Qu'en est-il pour le tri-fusion ? Le calcul rigoureux de la complexit\u00e9 de cet algorithme sort du cadre de ce cours. Mais, en remarquant que la premi\u00e8re phase (DIVISER) consiste \u00e0 \"couper\" les tableaux en deux plusieurs fois de suite, intuitivement, on peut dire qu'un logarithme base 2 doit intervenir. La deuxi\u00e8me phase consiste \u00e0 faire des comparaisons entre les premiers \u00e9l\u00e9ments de chaque tableau \u00e0 fusionner, on peut donc supposer que pour un tableau de n \u00e9l\u00e9ments, on aura n comparaisons. En combinant ces 2 constations on peut donc dire que la complexit\u00e9 du tri-fusion est en O(nlog(n)) (encore une fois la \"d\u00e9monstration\" propos\u00e9e ici n'a rien de rigoureux). La comparaison des courbes de la fonction n 2 (en rouge) et nlog(n) (en bleu) : nous montre que l'algorithme de tri-fusion est plus \"efficace\" que l'algorithme de tri par insertion ou que l'algorithme de tri par s\u00e9lection.","title":"b) complexit\u00e9"},{"location":"c15e/","text":"exercices du bac Sujet 2 2021 Exercice 4 Sujet 4 2021 Exercice 5 Sujet 2 2022 Exercice 4 Sujet 3 2022 Exercice 5","title":"Exercices"},{"location":"c15e/#exercices-du-bac","text":"Sujet 2 2021 Exercice 4 Sujet 4 2021 Exercice 5 Sujet 2 2022 Exercice 4 Sujet 3 2022 Exercice 5","title":"exercices du bac"},{"location":"c15r/","text":"Ce qu\u2019il faut savoir Le diviser pour r\u00e9gner (Divide and conquer en anglais) est une m\u00e9thode algorithmique bas\u00e9e sur le principe suivant : On prend un probl\u00e8me (g\u00e9n\u00e9ralement complexe \u00e0 r\u00e9soudre), on divise ce probl\u00e8me en une multitude de petits probl\u00e8mes, l'id\u00e9e \u00e9tant que les \"petits probl\u00e8mes\" seront plus simples \u00e0 r\u00e9soudre que le probl\u00e8me original. Une fois les petits probl\u00e8mes r\u00e9solus, on recombine les \"petits probl\u00e8mes r\u00e9solus\" afin d'obtenir la solution du probl\u00e8me de d\u00e9part. Le paradigme \"diviser pour r\u00e9gner\" repose donc sur 3 \u00e9tapes : DIVISER : le probl\u00e8me d'origine est divis\u00e9 en un certain nombre de sous-probl\u00e8mes R\u00c9GNER : on r\u00e9sout les sous-probl\u00e8mes (les sous-probl\u00e8mes sont plus faciles \u00e0 r\u00e9soudre que le probl\u00e8me d'origine) COMBINER : les solutions des sous-probl\u00e8mes sont combin\u00e9es afin d'obtenir la solution du probl\u00e8me d'origine. Exemple d\u2019algorithme bas\u00e9 sur la m\u00e9thode diviser pour r\u00e9gner : le tri-fusion (vous devez conna\u00eetre le principe de cet algorithme). L\u2019algorithme de tri-fusion a une complexit\u00e9 en O(nlog 2 (n)) Ce qu\u2019il faut savoir faire \u00eatre capable d\u2019impl\u00e9menter l\u2019algorithme de tri-fusion en Python","title":"R\u00e9vision"},{"location":"c15r/#ce-quil-faut-savoir","text":"Le diviser pour r\u00e9gner (Divide and conquer en anglais) est une m\u00e9thode algorithmique bas\u00e9e sur le principe suivant : On prend un probl\u00e8me (g\u00e9n\u00e9ralement complexe \u00e0 r\u00e9soudre), on divise ce probl\u00e8me en une multitude de petits probl\u00e8mes, l'id\u00e9e \u00e9tant que les \"petits probl\u00e8mes\" seront plus simples \u00e0 r\u00e9soudre que le probl\u00e8me original. Une fois les petits probl\u00e8mes r\u00e9solus, on recombine les \"petits probl\u00e8mes r\u00e9solus\" afin d'obtenir la solution du probl\u00e8me de d\u00e9part. Le paradigme \"diviser pour r\u00e9gner\" repose donc sur 3 \u00e9tapes : DIVISER : le probl\u00e8me d'origine est divis\u00e9 en un certain nombre de sous-probl\u00e8mes R\u00c9GNER : on r\u00e9sout les sous-probl\u00e8mes (les sous-probl\u00e8mes sont plus faciles \u00e0 r\u00e9soudre que le probl\u00e8me d'origine) COMBINER : les solutions des sous-probl\u00e8mes sont combin\u00e9es afin d'obtenir la solution du probl\u00e8me d'origine. Exemple d\u2019algorithme bas\u00e9 sur la m\u00e9thode diviser pour r\u00e9gner : le tri-fusion (vous devez conna\u00eetre le principe de cet algorithme). L\u2019algorithme de tri-fusion a une complexit\u00e9 en O(nlog 2 (n))","title":"Ce qu\u2019il faut savoir"},{"location":"c15r/#ce-quil-faut-savoir-faire","text":"\u00eatre capable d\u2019impl\u00e9menter l\u2019algorithme de tri-fusion en Python","title":"Ce qu\u2019il faut savoir faire"},{"location":"c16a/","text":"activit\u00e9 16.1 R\u00e9sumez en quelques lignes le principe de la programmation dynamique. activit\u00e9 16.2 Cette activit\u00e9 s'inspire librement du contenu du livre de Cormen, Leiserson, Rivest et Stein \"Introduction to Algorithms\" (\u00e9dition The Mit Press) L'entreprise sun & steel produit et vend des barres d'acier de diff\u00e9rentes longueurs. Voici le prix de vente de ces barres d'acier en fonction de leurs longueurs : longueur i en m\u00e8tre prix p en euro 1 1 2 5 3 8 4 9 5 10 6 17 7 17 8 20 9 24 10 30 Quand l'entreprise produit une barre de longueur n, elle a 2 possibilit\u00e9s : vendre la barre telle quelle d\u00e9couper la barre afin d'obtenir plusieurs barres plus petites Par exemple pour une barre de 4 m de longueur l'entreprise peut : vendre la barre de 4 m ; gain = 9 euros d\u00e9couper la barre en 2 => 4 = 2 + 2 et vendre ces 2 barres ; gain = 5+5 = 10 euros d\u00e9couper la barre en 2 => 4 = 1 + 3 et vendre ces 2 barres ; gain = 8+1 = 9 euros d\u00e9couper la barre en 3 => 4 = 1+1+2 et vendre ces 3 barres ; gain = 1+1+5 = 7 euros ... 1) Continuez la liste ci-dessus afin d'obtenir toutes les possibilit\u00e9s pour une barre de 4 m. Quel est le revenu maximum possible pour la soci\u00e9t\u00e9 ? Partons maintenant du principe qu'au d\u00e9part, la barre ne fait plus forcement 4 m mais qu'elle fait n m\u00e8tres (n compris entre 1 et 10). Pour chaque longueur n on peut d\u00e9terminer le revenu maximum possible (que l'on notera r n ). Par exemple : pour n = 1 le revenu maximum sera de 1 euro, on aura donc r 1 = 1 pour n = 2, il y a 2 possibilit\u00e9s : on ne d\u00e9coupe pas la barre (revenu = 5) on d\u00e9coupe la barre en 2 (revenu = 1+1 = 2) on obtiendra donc r 2 = 5 pour n = 3, il y a 3 possibilit\u00e9s : on ne d\u00e9coupe pas la barre (revenu = 8) on d\u00e9coupe la barre en 2 (3 = 1+2 ; revenu = 1+5 = 6) on d\u00e9coupe la barre en 3 (3 = 1+1+1 ; revenu = 1+1+1 = 3) on obtiendra donc r 3 = 8 pour n = 4, il y a 5 possibilit\u00e9s : on ne d\u00e9coupe pas la barre (revenu = 9) on d\u00e9coupe la barre en 2 (4 = 2+2 ; revenu = 5+5 = 10) on d\u00e9coupe la barre en 2 (4 = 1+3 ; revenu = 1+8 = 9) on d\u00e9coupe la barre en 3 (4 = 1+1+2 ; revenu = 1+1+5 = 7) on d\u00e9coupe la barre en 4 (4 = 1+1+1+1 ; revenu = 1+1+1+1 = 4) on obtiendra donc r 4 = 10 pour n = 5, il y a 7 possibilit\u00e9s : on ne d\u00e9coupe pas la barre (revenu = 10) on d\u00e9coupe la barre en 2 (5 = 2+3 ; revenu = 5+8 = 13) on d\u00e9coupe la barre en 2 (5 = 1+4 ; revenu = 1+9 = 10) on d\u00e9coupe la barre en 3 (5 = 1+1+3 ; revenu = 1+1+8 = 10) on d\u00e9coupe la barre en 3 (5 = 1+2+2 ; revenu = 1+5+5 = 11) on d\u00e9coupe la barre en 4 (5 = 1+1+1+2 ; revenu = 1+1+1+5 = 8) on d\u00e9coupe la barre en 5 (5 = 1+1+1+1+1 ; revenu = 1+1+1+1+1 = 5) on obtiendra donc r 5 = 13 - ... L'id\u00e9e de cette activit\u00e9 est d'\u00e9crire un programme Python qui permettra d'obtenir tous les r n avec n compris entre 1 et 10. On peut remarquer qu'il est aussi possible de calculer r 5 en appliquant la relation suivante : r 5 = max(p 5 , r 1 +r 4 , r 2 +r 3 , r 3 +r 2 , r 4 +r 1 ) avec : p 5 le prix de la barre de 5 m r 1 le meilleur revenu possible pour 1 barre de 1 m (c'est-\u00e0-dire 1) r 2 le meilleur revenu possible pour 1 barre de 2 m (c'est-\u00e0-diree 5) r 3 le meilleur revenu possible pour 1 barre de 3 m (c'est-\u00e0-dire 8) r 4 le meilleur revenu possible pour 1 barre de 4 m (c'est-\u00e0-dire 10) Nous avons donc : r 5 = max(10, 1+5, 5+8, 8+5, 5+1) = max(10,6,13,13,6) = 13 Il est possible de g\u00e9n\u00e9raliser cette relation en \u00e9crivant : r n = max(p n , r 1 +r n-1 , r 2 +r n-2 ,..., r n-1 +r 1 ) 2) Retrouvez la valeur de r 4 en utilisant la relation ci-dessus On remarque que pour calculer r n , il faut calculer r n-1 , r n-2 , ... Cela devrait vous rappeler quelque chose : dans le chapitre consacr\u00e9 aux fonctions r\u00e9cursives nous avons vu que pour calculer la factorielle de n , il faut calculer la factorielle de n-1, la factorielle de n-2 ... Nous allons donc pouvoir \u00e9crire une fonction r\u00e9cursive afin de pouvoir r\u00e9soudre notre probl\u00e8me (calculer tous les r n pour n compris entre 1 et 10). Avant d'\u00e9crire cette fonction r\u00e9cursive, analysons un peu la relation vue ci-dessus : r n = max(p n , r 1 +r n-1 , r 2 +r n-2 ,..., r n-1 +r 1 ) Dans cette relation, le premier \u00e9l\u00e9ment (p n ) correspond au cas o\u00f9 la barre n'est pas d\u00e9coup\u00e9e. Les autres \u00e9l\u00e9ments correspondent au cas o\u00f9 l'on d\u00e9coupe la barre en 2 morceaux de longueurs i et n-i avec i compris entre 1 et n (avec n inclus). Il est donc possible de modifier la relation vue ci-dessus et d'\u00e9crire : r n = max(p i +r n-i ) avec i compris entre 1 et n (n inclus) Par exemple, pour n=5, on retrouve : r 5 = max(p 1 +r 4 , p 2 +r 3 , p 3 +r 2 , p 4 +r 1 , p 5 +r 0 ) avec r 0 le revenu maximum pour une barre de longueur nulle (on a donc r 0 = 0) Pour calculer r 5 il est donc n\u00e9cessaire de calculer r 4 : r 4 = max(p 1 +r 3 , p 2 +r 2 , p 3 +r 1 , p 4 +r 0 ) mais il est aussi n\u00e9cessaire de calculer r 3 , r 2 et r 1 \u00e0 la fois pour calculer r 5 mais aussi pour calculer r 4 ... On retrouve bien notre structure r\u00e9cursive. N.B : Si vous avez du mal \u00e0 comprendre le pourquoi du comment de la relation vue ci-dessus (r n = max(p i +r n-i ) avec i compris entre 1 et n (n inclus)), cela n'a pas une grande importance, contentez-vous de l'utiliser (le but de cette activit\u00e9 est ailleurs). 3) La fonction revenu_barre ci-dessous prend en param\u00e8tre la taille n de la barre (avant d\u00e9coupe) et renvoie le revenu maximum possible pour cette barre de longueur n : def revenu_barre ( n ): prix = [ 0 , 1 , 5 , 8 , 9 , 10 , 17 , 17 , 20 , 24 , 30 ] if n == 0 : return ......... r = float ( '-inf' ) for i in range ( 1 , n + 1 ): r = max ( r , prix [ i ] +........ ) return r Comp\u00e9tez la fonction revenu_barre 4) Utilisez la fonction revenu_barre pour calculer r 5 , r 6 , r 7 , r 8 , r 9 et r 10 5) L'entreprise a modifi\u00e9 ces tarifs, nous avons maintenant le tableau suivant : longueur i en m\u00e8tre prix p en euro 1 1 2 6 3 9 4 11 5 12 6 19 7 20 8 23 9 24 10 26 Modifiez la fonction revenu_barre afin de tenir compte de cette modification tarifaire. Comme nous avons eu l'occasion de le voir ci-dessus, pour calculer r n il est n\u00e9cessaire de calculer r n-1 , r n-2 ...mais pour calculer r n-1 , il sera aussi n\u00e9cessaire de calculer r n-2 ! Nous allons donc calculer 2 fois r n-2 . Afin de mieux visualiser la situation, voici un arbre qui permet de mieux visualiser les calculs n\u00e9cessaires afin de d\u00e9terminer r 4 : Comme vous pouvez le constater, pour calculer r 4 , il faut calculer : 1 fois r 3 2 fois r 2 4 fois r 1 Dans cet exemple, cela ne pose aucun probl\u00e8me, mais avec un n plus grand (par exemple r 10 ), nous aurions \u00e0 effectuer de nombreuses fois exactement les m\u00eames calculs. On pourrait m\u00eame imaginer si nous avions \u00e0 notre disposition des barres de 100 m de long, un nombre de calculs \u00e0 effectuer qui arriverait aux limites des capacit\u00e9s de nos ordinateurs (calculs tr\u00e8s longs \u00e0 effectuer). Nous sommes donc typiquement dans le cas o\u00f9 la programmation dynamique pourrait nous \u00eatre utile afin d'\u00e9viter de refaire un grand nombre de fois exactement les m\u00eames calculs. 6) En vous inspirant de ce qui a \u00e9t\u00e9 fait dans le cours (suite de Fibonacci et rendu de monnaie), \u00e9crivez un programme permettant de calculer r n . Ce programme devra utiliser la programmation dynamique.","title":"Activit\u00e9s"},{"location":"c16a/#activite-161","text":"R\u00e9sumez en quelques lignes le principe de la programmation dynamique.","title":"activit\u00e9 16.1"},{"location":"c16a/#activite-162","text":"Cette activit\u00e9 s'inspire librement du contenu du livre de Cormen, Leiserson, Rivest et Stein \"Introduction to Algorithms\" (\u00e9dition The Mit Press) L'entreprise sun & steel produit et vend des barres d'acier de diff\u00e9rentes longueurs. Voici le prix de vente de ces barres d'acier en fonction de leurs longueurs : longueur i en m\u00e8tre prix p en euro 1 1 2 5 3 8 4 9 5 10 6 17 7 17 8 20 9 24 10 30 Quand l'entreprise produit une barre de longueur n, elle a 2 possibilit\u00e9s : vendre la barre telle quelle d\u00e9couper la barre afin d'obtenir plusieurs barres plus petites Par exemple pour une barre de 4 m de longueur l'entreprise peut : vendre la barre de 4 m ; gain = 9 euros d\u00e9couper la barre en 2 => 4 = 2 + 2 et vendre ces 2 barres ; gain = 5+5 = 10 euros d\u00e9couper la barre en 2 => 4 = 1 + 3 et vendre ces 2 barres ; gain = 8+1 = 9 euros d\u00e9couper la barre en 3 => 4 = 1+1+2 et vendre ces 3 barres ; gain = 1+1+5 = 7 euros ... 1) Continuez la liste ci-dessus afin d'obtenir toutes les possibilit\u00e9s pour une barre de 4 m. Quel est le revenu maximum possible pour la soci\u00e9t\u00e9 ? Partons maintenant du principe qu'au d\u00e9part, la barre ne fait plus forcement 4 m mais qu'elle fait n m\u00e8tres (n compris entre 1 et 10). Pour chaque longueur n on peut d\u00e9terminer le revenu maximum possible (que l'on notera r n ). Par exemple : pour n = 1 le revenu maximum sera de 1 euro, on aura donc r 1 = 1 pour n = 2, il y a 2 possibilit\u00e9s : on ne d\u00e9coupe pas la barre (revenu = 5) on d\u00e9coupe la barre en 2 (revenu = 1+1 = 2) on obtiendra donc r 2 = 5 pour n = 3, il y a 3 possibilit\u00e9s : on ne d\u00e9coupe pas la barre (revenu = 8) on d\u00e9coupe la barre en 2 (3 = 1+2 ; revenu = 1+5 = 6) on d\u00e9coupe la barre en 3 (3 = 1+1+1 ; revenu = 1+1+1 = 3) on obtiendra donc r 3 = 8 pour n = 4, il y a 5 possibilit\u00e9s : on ne d\u00e9coupe pas la barre (revenu = 9) on d\u00e9coupe la barre en 2 (4 = 2+2 ; revenu = 5+5 = 10) on d\u00e9coupe la barre en 2 (4 = 1+3 ; revenu = 1+8 = 9) on d\u00e9coupe la barre en 3 (4 = 1+1+2 ; revenu = 1+1+5 = 7) on d\u00e9coupe la barre en 4 (4 = 1+1+1+1 ; revenu = 1+1+1+1 = 4) on obtiendra donc r 4 = 10 pour n = 5, il y a 7 possibilit\u00e9s : on ne d\u00e9coupe pas la barre (revenu = 10) on d\u00e9coupe la barre en 2 (5 = 2+3 ; revenu = 5+8 = 13) on d\u00e9coupe la barre en 2 (5 = 1+4 ; revenu = 1+9 = 10) on d\u00e9coupe la barre en 3 (5 = 1+1+3 ; revenu = 1+1+8 = 10) on d\u00e9coupe la barre en 3 (5 = 1+2+2 ; revenu = 1+5+5 = 11) on d\u00e9coupe la barre en 4 (5 = 1+1+1+2 ; revenu = 1+1+1+5 = 8) on d\u00e9coupe la barre en 5 (5 = 1+1+1+1+1 ; revenu = 1+1+1+1+1 = 5) on obtiendra donc r 5 = 13 - ... L'id\u00e9e de cette activit\u00e9 est d'\u00e9crire un programme Python qui permettra d'obtenir tous les r n avec n compris entre 1 et 10. On peut remarquer qu'il est aussi possible de calculer r 5 en appliquant la relation suivante : r 5 = max(p 5 , r 1 +r 4 , r 2 +r 3 , r 3 +r 2 , r 4 +r 1 ) avec : p 5 le prix de la barre de 5 m r 1 le meilleur revenu possible pour 1 barre de 1 m (c'est-\u00e0-dire 1) r 2 le meilleur revenu possible pour 1 barre de 2 m (c'est-\u00e0-diree 5) r 3 le meilleur revenu possible pour 1 barre de 3 m (c'est-\u00e0-dire 8) r 4 le meilleur revenu possible pour 1 barre de 4 m (c'est-\u00e0-dire 10) Nous avons donc : r 5 = max(10, 1+5, 5+8, 8+5, 5+1) = max(10,6,13,13,6) = 13 Il est possible de g\u00e9n\u00e9raliser cette relation en \u00e9crivant : r n = max(p n , r 1 +r n-1 , r 2 +r n-2 ,..., r n-1 +r 1 ) 2) Retrouvez la valeur de r 4 en utilisant la relation ci-dessus On remarque que pour calculer r n , il faut calculer r n-1 , r n-2 , ... Cela devrait vous rappeler quelque chose : dans le chapitre consacr\u00e9 aux fonctions r\u00e9cursives nous avons vu que pour calculer la factorielle de n , il faut calculer la factorielle de n-1, la factorielle de n-2 ... Nous allons donc pouvoir \u00e9crire une fonction r\u00e9cursive afin de pouvoir r\u00e9soudre notre probl\u00e8me (calculer tous les r n pour n compris entre 1 et 10). Avant d'\u00e9crire cette fonction r\u00e9cursive, analysons un peu la relation vue ci-dessus : r n = max(p n , r 1 +r n-1 , r 2 +r n-2 ,..., r n-1 +r 1 ) Dans cette relation, le premier \u00e9l\u00e9ment (p n ) correspond au cas o\u00f9 la barre n'est pas d\u00e9coup\u00e9e. Les autres \u00e9l\u00e9ments correspondent au cas o\u00f9 l'on d\u00e9coupe la barre en 2 morceaux de longueurs i et n-i avec i compris entre 1 et n (avec n inclus). Il est donc possible de modifier la relation vue ci-dessus et d'\u00e9crire : r n = max(p i +r n-i ) avec i compris entre 1 et n (n inclus) Par exemple, pour n=5, on retrouve : r 5 = max(p 1 +r 4 , p 2 +r 3 , p 3 +r 2 , p 4 +r 1 , p 5 +r 0 ) avec r 0 le revenu maximum pour une barre de longueur nulle (on a donc r 0 = 0) Pour calculer r 5 il est donc n\u00e9cessaire de calculer r 4 : r 4 = max(p 1 +r 3 , p 2 +r 2 , p 3 +r 1 , p 4 +r 0 ) mais il est aussi n\u00e9cessaire de calculer r 3 , r 2 et r 1 \u00e0 la fois pour calculer r 5 mais aussi pour calculer r 4 ... On retrouve bien notre structure r\u00e9cursive. N.B : Si vous avez du mal \u00e0 comprendre le pourquoi du comment de la relation vue ci-dessus (r n = max(p i +r n-i ) avec i compris entre 1 et n (n inclus)), cela n'a pas une grande importance, contentez-vous de l'utiliser (le but de cette activit\u00e9 est ailleurs). 3) La fonction revenu_barre ci-dessous prend en param\u00e8tre la taille n de la barre (avant d\u00e9coupe) et renvoie le revenu maximum possible pour cette barre de longueur n : def revenu_barre ( n ): prix = [ 0 , 1 , 5 , 8 , 9 , 10 , 17 , 17 , 20 , 24 , 30 ] if n == 0 : return ......... r = float ( '-inf' ) for i in range ( 1 , n + 1 ): r = max ( r , prix [ i ] +........ ) return r Comp\u00e9tez la fonction revenu_barre 4) Utilisez la fonction revenu_barre pour calculer r 5 , r 6 , r 7 , r 8 , r 9 et r 10 5) L'entreprise a modifi\u00e9 ces tarifs, nous avons maintenant le tableau suivant : longueur i en m\u00e8tre prix p en euro 1 1 2 6 3 9 4 11 5 12 6 19 7 20 8 23 9 24 10 26 Modifiez la fonction revenu_barre afin de tenir compte de cette modification tarifaire. Comme nous avons eu l'occasion de le voir ci-dessus, pour calculer r n il est n\u00e9cessaire de calculer r n-1 , r n-2 ...mais pour calculer r n-1 , il sera aussi n\u00e9cessaire de calculer r n-2 ! Nous allons donc calculer 2 fois r n-2 . Afin de mieux visualiser la situation, voici un arbre qui permet de mieux visualiser les calculs n\u00e9cessaires afin de d\u00e9terminer r 4 : Comme vous pouvez le constater, pour calculer r 4 , il faut calculer : 1 fois r 3 2 fois r 2 4 fois r 1 Dans cet exemple, cela ne pose aucun probl\u00e8me, mais avec un n plus grand (par exemple r 10 ), nous aurions \u00e0 effectuer de nombreuses fois exactement les m\u00eames calculs. On pourrait m\u00eame imaginer si nous avions \u00e0 notre disposition des barres de 100 m de long, un nombre de calculs \u00e0 effectuer qui arriverait aux limites des capacit\u00e9s de nos ordinateurs (calculs tr\u00e8s longs \u00e0 effectuer). Nous sommes donc typiquement dans le cas o\u00f9 la programmation dynamique pourrait nous \u00eatre utile afin d'\u00e9viter de refaire un grand nombre de fois exactement les m\u00eames calculs. 6) En vous inspirant de ce qui a \u00e9t\u00e9 fait dans le cours (suite de Fibonacci et rendu de monnaie), \u00e9crivez un programme permettant de calculer r n . Ce programme devra utiliser la programmation dynamique.","title":"activit\u00e9 16.2"},{"location":"c16c/","text":"1) Suite de Fibonacci Dans le chapitre sur la r\u00e9cursivit\u00e9, nous avons \u00e9tudi\u00e9 la programmation de la suite de Fibonacci : def fib ( n ) : if n < 2 : return n else : return fib ( n - 1 ) + fib ( n - 2 ) Pour n=6, il est possible d'illustrer le fonctionnement de ce programme avec le sch\u00e9ma ci-dessous : Vous pouvez constater que l'on a une structure arborescente (typique dans les algorithmes r\u00e9cursifs), si on additionne toutes les feuilles de cette structure arborescente (fib(1)=1 et fib(0)=0), on retrouve bien 8. En observant attentivement le sch\u00e9ma ci-dessus, vous avez remarqu\u00e9 que de nombreux calculs sont inutiles, car effectu\u00e9 2 fois : par exemple on retrouve le calcul de fib(4) \u00e0 2 endroits (en haut \u00e0 droite et un peu plus bas \u00e0 gauche) : On pourrait donc grandement simplifier le calcul en calculant une fois pour toutes fib(4), en \"m\u00e9morisant\" le r\u00e9sultat et en le r\u00e9utilisant quand n\u00e9cessaire : def fib_mem ( n ): mem = [ 0 ] * ( n + 1 ) #permet de cr\u00e9er un tableau contenant n+1 z\u00e9ro return fib_mem_c ( n , mem ) def fib_mem_c ( n , m ): if n == 0 or n == 1 : m [ n ] = n return n elif m [ n ] > 0 : return m [ n ] else : m [ n ] = fib_mem_c ( n - 1 , m ) + fib_mem_c ( n - 2 , m ) return m [ n ] Nous pouvons r\u00e9sumer ce programme comme suit : si la valeur de fib(a) n'a jamais \u00e9t\u00e9 calcul\u00e9e (si la valeur de fib(a) n'est pas encore dans le tableau mem ), elle est calcul\u00e9e, puis ensuite elle est stock\u00e9e dans le tableau mem si la valeur de fib(a) a d\u00e9j\u00e0 \u00e9t\u00e9 calcul\u00e9e (si la valeur de fib(a) est d\u00e9j\u00e0 dans le tableau mem ), nous n'avons aucun calcul \u00e0 faire, on utilise juste la valeur pr\u00e9sente dans le tableau. Dans le cas qui nous int\u00e9resse, on peut l\u00e9gitimement s'interroger sur le b\u00e9n\u00e9fice de cette op\u00e9ration de \"m\u00e9morisation\", mais pour des valeurs de n beaucoup plus \u00e9lev\u00e9es, la question ne se pose m\u00eame pas, le gain en termes de performance (temps de calcul) est \u00e9vident. Pour des valeurs n tr\u00e8s \u00e9lev\u00e9es, dans le cas du programme r\u00e9cursif \"classique\" (n'utilisant pas la \"m\u00e9morisation\"), on peut m\u00eame se retrouver avec un programme qui \"plante\" \u00e0 cause du trop grand nombre d'appels r\u00e9cursifs. En r\u00e9fl\u00e9chissant un peu sur le cas que nous venons de traiter, nous divisons un probl\u00e8me \"complexe\" (calcul de fib(6)) en une multitude de petits probl\u00e8mes faciles \u00e0 r\u00e9soudre (fib(0) et fib(1)), puis nous utilisons les r\u00e9sultats obtenus pour les \"petits probl\u00e8mes\" pour r\u00e9soudre le probl\u00e8me \"complexe\". Cela devrait vous rappeler la m\u00e9thode \"diviser pour r\u00e9gner\" ! En faite, ce n'est pas tout \u00e0 fait cela puisque dans le cas de la m\u00e9thode \"diviser pour r\u00e9gner\", la \"m\u00e9morisation\" des calculs n'est pas pr\u00e9vue. La m\u00e9thode que nous venons d'utiliser se nomme \"programmation dynamique\". 2) Programmation dynamique a) introduction Comme nous venons de le voir, la programmation dynamique, comme la m\u00e9thode diviser pour r\u00e9gner, r\u00e9sout des probl\u00e8mes en combinant des solutions de sous-probl\u00e8mes. Cette m\u00e9thode a \u00e9t\u00e9 introduite au d\u00e9but des ann\u00e9es 1950 par Richard Bellman. Il est important de bien comprendre que \"programmation\" dans \"programmation dynamique\", ne doit pas s'entendre comme \"utilisation d'un langage de programmation\", mais comme synonyme de planification et ordonnancement. La programmation dynamique s'applique g\u00e9n\u00e9ralement aux probl\u00e8mes d'optimisation. Nous avons d\u00e9j\u00e0 \u00e9voqu\u00e9 les probl\u00e8mes d'optimisation lorsque nous avons \u00e9tudi\u00e9 les algorithmes gloutons l'ann\u00e9e derni\u00e8re. N'h\u00e9sitez pas, si n\u00e9cessaire \u00e0 vous replonger dans ce cours. Comme d\u00e9j\u00e0 \u00e9voqu\u00e9 plus haut, \u00e0 la diff\u00e9rence de la m\u00e9thode diviser pour r\u00e9gner, la programmation dynamique s'applique quand les sous-probl\u00e8mes se recoupent, c'est-\u00e0-dire lorsque les sous-probl\u00e8mes ont des probl\u00e8mes communs (dans le cas du calcul de fib(6) on doit calculer 2 fois fib(4). Pour calculer fib(4), on doit calculer 4 fois fib(2)...). Un algorithme de programmation dynamique r\u00e9sout chaque sous-sous-probl\u00e8me une seule fois et m\u00e9morise sa r\u00e9ponse dans un tableau, \u00e9vitant ainsi le recalcul de la solution chaque fois qu'il r\u00e9sout chaque sous-sous-probl\u00e8me. b) Programmation dynamique et rendu de monnaie Nous allons maintenant travailler sur un probl\u00e8me d'optimisation d\u00e9j\u00e0 rencontr\u00e9 l'ann\u00e9e derni\u00e8re : le probl\u00e8me du rendu de monnaie. Petit rappel : vous avez \u00e0 votre disposition un nombre illimit\u00e9 de pi\u00e8ces de 2 cts, 5 cts, 10 cts, 50 cts et 1 euro (100 cts). Vous devez rendre une certaine somme (rendu de monnaie). Le probl\u00e8me est le suivant : \"Quel est le nombre minimum de pi\u00e8ces qui doivent \u00eatre utilis\u00e9es pour rendre la monnaie\" La r\u00e9solution \"gloutonne\" de ce probl\u00e8me peut \u00eatre la suivante : on prend la pi\u00e8ce qui a la plus grande valeur (il faut que la valeur de cette pi\u00e8ce soit inf\u00e9rieure ou \u00e9gale \u00e0 la somme restant \u00e0 rendre) on recommence l'op\u00e9ration ci-dessus jusqu'au moment o\u00f9 la somme \u00e0 rendre est \u00e9gale \u00e0 z\u00e9ro. Prenons un exemple : Partons du principe que nous avons 1 euro 77 cts \u00e0 rendre : on utilise une pi\u00e8ce de 1 euro (plus grande valeur de pi\u00e8ce inf\u00e9rieure \u00e0 1,77 euro), il reste 77 cts \u00e0 rendre on utilise une pi\u00e8ce de 50 cts (plus grande valeur de pi\u00e8ce inf\u00e9rieure \u00e0 0,77 euro), il reste 27 cts \u00e0 rendre on utilise une pi\u00e8ce de 10 cts (plus grande valeur de pi\u00e8ce inf\u00e9rieure \u00e0 0,27 euro), il reste 17 cts \u00e0 rendre on utilise une pi\u00e8ce de 10 cts (plus grande valeur de pi\u00e8ce inf\u00e9rieure \u00e0 0,17 euro), il reste 7 cts \u00e0 rendre on utilise une pi\u00e8ce de 5 cts (plus grande valeur de pi\u00e8ce inf\u00e9rieure \u00e0 0,07 euro), il reste 2 cts \u00e0 rendre on utilise une pi\u00e8ce de 2 cts (plus grande valeur de pi\u00e8ce inf\u00e9rieure \u00e0 0,02 euro), il reste 0 cts \u00e0 rendre L'algorithme se termine en renvoyant 6 (on a d\u00fb rendre 6 pi\u00e8ces) Que se passe-t-il si nous avons \u00e0 rendre 11 centimes ? On utilise une pi\u00e8ce de 10 cts (plus grande valeur de pi\u00e8ce inf\u00e9rieure \u00e0 11 centimes), il reste 1 cts \u00e0 rendre, il n'y a pas de pi\u00e8ce de 1 cts => l'algorithme est \"bloqu\u00e9\" Cet exemple marque une caract\u00e9ristique importante des algorithmes gloutons : une fois qu'une \"d\u00e9cision\" a \u00e9t\u00e9 prise, on ne revient pas \"en arri\u00e8re\" (on a choisi la pi\u00e8ce de 10 cts, m\u00eame si cela nous conduit dans une \"impasse\"). Rappel : dans certains cas, un algorithme glouton trouvera une solution, mais cette derni\u00e8re ne sera pas \"une des meilleures solutions possible\" (une solution optimale). \u00c9videmment, le fait que notre algorithme glouton ne soit pas \"capable\" de trouver une solution ne signifie pas qu'il n'existe pas de solution...en effet, il suffit de prendre 1 pi\u00e8ce de 5 cts et 3 pi\u00e8ces de 2 cts pour arriver \u00e0 11 cts. Recherchons un algorithme qui nous permettrait de trouver une solution optimale, quelle que soit la situation. Afin de mettre au point un algorithme, essayons de trouver une relation de r\u00e9currence : Soit X la somme \u00e0 rendre, on notera Nb(X) le nombre minimum de pi\u00e8ces \u00e0 rendre. Nous allons nous poser la question suivante : Si je suis capable de rendre X avec Nb(X) pi\u00e8ces, quelle somme suis-je capable de rendre avec 1+Nb(X) pi\u00e8ces ? Si j'ai \u00e0 ma disposition la liste de pi\u00e8ces suivante : p 1 , p 2 , p 3 , ..., p n et que je suis capable de rendre X cts, je suis donc aussi capable de rendre : X\u2212p 1 X\u2212p 2 X\u2212p 3 ... X\u2212p n (\u00e0 condition que p i (avec i compris entre 1 et n) soit inf\u00e9rieure ou \u00e9gale \u00e0 la somme restant \u00e0 rendre) Exemple : si je suis capable de rendre 72 cts et que j'ai \u00e0 ma disposition des pi\u00e8ces de 2 cts, 5 cts, 10 cts, 50 cts et 1 euro, je peux aussi rendre : 72 - 2 = 70 cts 72 - 5 = 67 cts 72 - 10 = 62 cts 72 - 50 = 22 cts Je ne peux pas utiliser de pi\u00e8ce de 1 euro. Autrement dit, si Nb(X\u2212p i ) (avec i compris entre 1 et n) est le nombre minimal de pi\u00e8ces \u00e0 rendre pour le montant X\u2212p i , alors Nb(X)=1+Nb(X\u2212p i ) est le nombre minimal de pi\u00e8ces \u00e0 rendre pour un montant X. Nous avons donc la formule de r\u00e9currence suivante : si X=0 : Nb(X)=0 si X>0 : Nb(X)=1+min(Nb(X\u2212p i )) avec 1\u2264i<n et pi\u2264X Le \"min\" pr\u00e9sent dans la formule de r\u00e9currence exprime le fait que le nombre de pi\u00e8ces \u00e0 rendre pour une somme X\u2212p i doit \u00eatre le plus petit possible. \u00c9tudions le programme suivant : def rendu_monnaie_rec ( P , X ): if X == 0 : return 0 else : mini = 1000 for i in range ( len ( P )): if P [ i ] <= X : nb = 1 + rendu_monnaie_rec ( P , X - P [ i ]) if nb < mini : mini = nb return mini La fonction rendu_monnaie_rec prend en param\u00e8tre un tableau de pi\u00e8ces (P) et la somme \u00e0 rendre (X). Elle renvoie le plus petit nombre de pi\u00e8ces possible. On retrouve la relation de r\u00e9currence d\u00e9finie juste au-dessus. Pour \u00eatre s\u00fbr de renvoyer le plus petit nombre de pi\u00e8ces, on attribue dans un premier temps la valeur 1000 \u00e0 la variable mini (cette valeur 1000 est arbitraire, il faut juste une valeur suffisamment grande : on peut partir du principe que nous ne rencontrerons jamais de cas o\u00f9 il faudra rendre plus de 1000 pi\u00e8ces), ensuite, \u00e0 chaque appel r\u00e9cursif, on \"sauvegarde\" le plus petit nombre de pi\u00e8ces dans cette variable mini. Exemple : si on teste cette fonction en tapant rendu_monnaie_rec((2,5,10,50,100),1 1) dans la console Python, on obtient 4 (on doit utiliser au minimum 4 pi\u00e8ces pour rendre 11 cts) Essayons de comprendre plus en d\u00e9tail comment le programme ci-dessous d\u00e9termine ce r\u00e9sultat. \u00c9tudions cet arbre : Plusieurs remarques s'imposent : comme vous pouvez le remarquer sur le sch\u00e9ma, tous les cas possibles sont \"trait\u00e9s\" (quand un algorithme \"traite\" tous les cas possibles, on parle souvent de m\u00e9thode \"brute force\"). pour certains cas, on se retrouve dans une \"impasse\" (cas o\u00f9 on termine par un \"1\"), dans cette situation, la fonction renvoie \"1000\" ce qui permet de s'assurer que cette \"solution\" (qui n'en est pas une) ne sera pas \"retenue\". la profondeur minimum de l'arbre (avec une feuille 0) est de 4, la solution au probl\u00e8me est donc 4 (il existe plusieurs parcours : (5,2,2,2), (2,5,2,2)... qui donne \u00e0 chaque fois 4) Si maintenant on tente d'ex\u00e9cuter la m\u00eame fonction avec une valeur \u00e0 rendre beaucoup plus grande (par exemple 171 cts), le programme plante ! Pourquoi ? Parce que les appels r\u00e9cursifs sont trop nombreux, on d\u00e9passe la capacit\u00e9 de la pile. La programmation dynamique va nous permettre de r\u00e9soudre ce probl\u00e8me. Comme vous avez peut-\u00eatre d\u00e9j\u00e0 d\u00fb le remarquer, m\u00eame dans le cas simple \u00e9voqu\u00e9 ci-dessus (11 cts \u00e0 rendre), nous faisons plusieurs fois exactement le m\u00eame calcul. Par exemple on retrouve 2 fois la branche qui part de \"4\" : Il va donc \u00eatre possible d'appliquer la m\u00eame m\u00e9thode que pour Fibonacci. \u00c0 noter que dans des cas plus \"difficiles \u00e0 traiter\" comme 171 cts, on va retrouver de nombreuses fois exactement les m\u00eames calculs, il est donc potentiellement int\u00e9ressant d'utiliser la programmation dynamique. Voici donc notre programme de calcul de rendu de monnaie modifi\u00e9e : def rendu_monnaie_mem ( P , X ): mem = [ 0 ] * ( X + 1 ) return rendu_monnaie_mem_c ( P , X , mem ) def rendu_monnaie_mem_c ( P , X , m ): if X == 0 : return 0 elif m [ X ] > 0 : return m [ X ] else : mini = 1000 for i in range ( len ( P )): if P [ i ] <= X : nb = 1 + rendu_monnaie_mem_c ( P , X - P [ i ], m ) if nb < mini : mini = nb m [ X ] = mini return mini Ce programme ressemble beaucoup \u00e0 programme utiliser pour la suite de Fibonacci, il ne devrait donc pas vous poser de probl\u00e8me. Si maintenant nous testons ce programme en tapant dans la console Python rendu_monnaie_mem((2,5,10,50,100),171) , tout fonctionne parfaitement, il suffit d'une fraction de seconde pour obtenir le r\u00e9sultat qui est 7.","title":"Cours"},{"location":"c16c/#1-suite-de-fibonacci","text":"Dans le chapitre sur la r\u00e9cursivit\u00e9, nous avons \u00e9tudi\u00e9 la programmation de la suite de Fibonacci : def fib ( n ) : if n < 2 : return n else : return fib ( n - 1 ) + fib ( n - 2 ) Pour n=6, il est possible d'illustrer le fonctionnement de ce programme avec le sch\u00e9ma ci-dessous : Vous pouvez constater que l'on a une structure arborescente (typique dans les algorithmes r\u00e9cursifs), si on additionne toutes les feuilles de cette structure arborescente (fib(1)=1 et fib(0)=0), on retrouve bien 8. En observant attentivement le sch\u00e9ma ci-dessus, vous avez remarqu\u00e9 que de nombreux calculs sont inutiles, car effectu\u00e9 2 fois : par exemple on retrouve le calcul de fib(4) \u00e0 2 endroits (en haut \u00e0 droite et un peu plus bas \u00e0 gauche) : On pourrait donc grandement simplifier le calcul en calculant une fois pour toutes fib(4), en \"m\u00e9morisant\" le r\u00e9sultat et en le r\u00e9utilisant quand n\u00e9cessaire : def fib_mem ( n ): mem = [ 0 ] * ( n + 1 ) #permet de cr\u00e9er un tableau contenant n+1 z\u00e9ro return fib_mem_c ( n , mem ) def fib_mem_c ( n , m ): if n == 0 or n == 1 : m [ n ] = n return n elif m [ n ] > 0 : return m [ n ] else : m [ n ] = fib_mem_c ( n - 1 , m ) + fib_mem_c ( n - 2 , m ) return m [ n ] Nous pouvons r\u00e9sumer ce programme comme suit : si la valeur de fib(a) n'a jamais \u00e9t\u00e9 calcul\u00e9e (si la valeur de fib(a) n'est pas encore dans le tableau mem ), elle est calcul\u00e9e, puis ensuite elle est stock\u00e9e dans le tableau mem si la valeur de fib(a) a d\u00e9j\u00e0 \u00e9t\u00e9 calcul\u00e9e (si la valeur de fib(a) est d\u00e9j\u00e0 dans le tableau mem ), nous n'avons aucun calcul \u00e0 faire, on utilise juste la valeur pr\u00e9sente dans le tableau. Dans le cas qui nous int\u00e9resse, on peut l\u00e9gitimement s'interroger sur le b\u00e9n\u00e9fice de cette op\u00e9ration de \"m\u00e9morisation\", mais pour des valeurs de n beaucoup plus \u00e9lev\u00e9es, la question ne se pose m\u00eame pas, le gain en termes de performance (temps de calcul) est \u00e9vident. Pour des valeurs n tr\u00e8s \u00e9lev\u00e9es, dans le cas du programme r\u00e9cursif \"classique\" (n'utilisant pas la \"m\u00e9morisation\"), on peut m\u00eame se retrouver avec un programme qui \"plante\" \u00e0 cause du trop grand nombre d'appels r\u00e9cursifs. En r\u00e9fl\u00e9chissant un peu sur le cas que nous venons de traiter, nous divisons un probl\u00e8me \"complexe\" (calcul de fib(6)) en une multitude de petits probl\u00e8mes faciles \u00e0 r\u00e9soudre (fib(0) et fib(1)), puis nous utilisons les r\u00e9sultats obtenus pour les \"petits probl\u00e8mes\" pour r\u00e9soudre le probl\u00e8me \"complexe\". Cela devrait vous rappeler la m\u00e9thode \"diviser pour r\u00e9gner\" ! En faite, ce n'est pas tout \u00e0 fait cela puisque dans le cas de la m\u00e9thode \"diviser pour r\u00e9gner\", la \"m\u00e9morisation\" des calculs n'est pas pr\u00e9vue. La m\u00e9thode que nous venons d'utiliser se nomme \"programmation dynamique\".","title":"1) Suite de Fibonacci"},{"location":"c16c/#2-programmation-dynamique","text":"","title":"2) Programmation dynamique"},{"location":"c16c/#a-introduction","text":"Comme nous venons de le voir, la programmation dynamique, comme la m\u00e9thode diviser pour r\u00e9gner, r\u00e9sout des probl\u00e8mes en combinant des solutions de sous-probl\u00e8mes. Cette m\u00e9thode a \u00e9t\u00e9 introduite au d\u00e9but des ann\u00e9es 1950 par Richard Bellman. Il est important de bien comprendre que \"programmation\" dans \"programmation dynamique\", ne doit pas s'entendre comme \"utilisation d'un langage de programmation\", mais comme synonyme de planification et ordonnancement. La programmation dynamique s'applique g\u00e9n\u00e9ralement aux probl\u00e8mes d'optimisation. Nous avons d\u00e9j\u00e0 \u00e9voqu\u00e9 les probl\u00e8mes d'optimisation lorsque nous avons \u00e9tudi\u00e9 les algorithmes gloutons l'ann\u00e9e derni\u00e8re. N'h\u00e9sitez pas, si n\u00e9cessaire \u00e0 vous replonger dans ce cours. Comme d\u00e9j\u00e0 \u00e9voqu\u00e9 plus haut, \u00e0 la diff\u00e9rence de la m\u00e9thode diviser pour r\u00e9gner, la programmation dynamique s'applique quand les sous-probl\u00e8mes se recoupent, c'est-\u00e0-dire lorsque les sous-probl\u00e8mes ont des probl\u00e8mes communs (dans le cas du calcul de fib(6) on doit calculer 2 fois fib(4). Pour calculer fib(4), on doit calculer 4 fois fib(2)...). Un algorithme de programmation dynamique r\u00e9sout chaque sous-sous-probl\u00e8me une seule fois et m\u00e9morise sa r\u00e9ponse dans un tableau, \u00e9vitant ainsi le recalcul de la solution chaque fois qu'il r\u00e9sout chaque sous-sous-probl\u00e8me.","title":"a) introduction"},{"location":"c16c/#b-programmation-dynamique-et-rendu-de-monnaie","text":"Nous allons maintenant travailler sur un probl\u00e8me d'optimisation d\u00e9j\u00e0 rencontr\u00e9 l'ann\u00e9e derni\u00e8re : le probl\u00e8me du rendu de monnaie. Petit rappel : vous avez \u00e0 votre disposition un nombre illimit\u00e9 de pi\u00e8ces de 2 cts, 5 cts, 10 cts, 50 cts et 1 euro (100 cts). Vous devez rendre une certaine somme (rendu de monnaie). Le probl\u00e8me est le suivant : \"Quel est le nombre minimum de pi\u00e8ces qui doivent \u00eatre utilis\u00e9es pour rendre la monnaie\" La r\u00e9solution \"gloutonne\" de ce probl\u00e8me peut \u00eatre la suivante : on prend la pi\u00e8ce qui a la plus grande valeur (il faut que la valeur de cette pi\u00e8ce soit inf\u00e9rieure ou \u00e9gale \u00e0 la somme restant \u00e0 rendre) on recommence l'op\u00e9ration ci-dessus jusqu'au moment o\u00f9 la somme \u00e0 rendre est \u00e9gale \u00e0 z\u00e9ro. Prenons un exemple : Partons du principe que nous avons 1 euro 77 cts \u00e0 rendre : on utilise une pi\u00e8ce de 1 euro (plus grande valeur de pi\u00e8ce inf\u00e9rieure \u00e0 1,77 euro), il reste 77 cts \u00e0 rendre on utilise une pi\u00e8ce de 50 cts (plus grande valeur de pi\u00e8ce inf\u00e9rieure \u00e0 0,77 euro), il reste 27 cts \u00e0 rendre on utilise une pi\u00e8ce de 10 cts (plus grande valeur de pi\u00e8ce inf\u00e9rieure \u00e0 0,27 euro), il reste 17 cts \u00e0 rendre on utilise une pi\u00e8ce de 10 cts (plus grande valeur de pi\u00e8ce inf\u00e9rieure \u00e0 0,17 euro), il reste 7 cts \u00e0 rendre on utilise une pi\u00e8ce de 5 cts (plus grande valeur de pi\u00e8ce inf\u00e9rieure \u00e0 0,07 euro), il reste 2 cts \u00e0 rendre on utilise une pi\u00e8ce de 2 cts (plus grande valeur de pi\u00e8ce inf\u00e9rieure \u00e0 0,02 euro), il reste 0 cts \u00e0 rendre L'algorithme se termine en renvoyant 6 (on a d\u00fb rendre 6 pi\u00e8ces) Que se passe-t-il si nous avons \u00e0 rendre 11 centimes ? On utilise une pi\u00e8ce de 10 cts (plus grande valeur de pi\u00e8ce inf\u00e9rieure \u00e0 11 centimes), il reste 1 cts \u00e0 rendre, il n'y a pas de pi\u00e8ce de 1 cts => l'algorithme est \"bloqu\u00e9\" Cet exemple marque une caract\u00e9ristique importante des algorithmes gloutons : une fois qu'une \"d\u00e9cision\" a \u00e9t\u00e9 prise, on ne revient pas \"en arri\u00e8re\" (on a choisi la pi\u00e8ce de 10 cts, m\u00eame si cela nous conduit dans une \"impasse\"). Rappel : dans certains cas, un algorithme glouton trouvera une solution, mais cette derni\u00e8re ne sera pas \"une des meilleures solutions possible\" (une solution optimale). \u00c9videmment, le fait que notre algorithme glouton ne soit pas \"capable\" de trouver une solution ne signifie pas qu'il n'existe pas de solution...en effet, il suffit de prendre 1 pi\u00e8ce de 5 cts et 3 pi\u00e8ces de 2 cts pour arriver \u00e0 11 cts. Recherchons un algorithme qui nous permettrait de trouver une solution optimale, quelle que soit la situation. Afin de mettre au point un algorithme, essayons de trouver une relation de r\u00e9currence : Soit X la somme \u00e0 rendre, on notera Nb(X) le nombre minimum de pi\u00e8ces \u00e0 rendre. Nous allons nous poser la question suivante : Si je suis capable de rendre X avec Nb(X) pi\u00e8ces, quelle somme suis-je capable de rendre avec 1+Nb(X) pi\u00e8ces ? Si j'ai \u00e0 ma disposition la liste de pi\u00e8ces suivante : p 1 , p 2 , p 3 , ..., p n et que je suis capable de rendre X cts, je suis donc aussi capable de rendre : X\u2212p 1 X\u2212p 2 X\u2212p 3 ... X\u2212p n (\u00e0 condition que p i (avec i compris entre 1 et n) soit inf\u00e9rieure ou \u00e9gale \u00e0 la somme restant \u00e0 rendre) Exemple : si je suis capable de rendre 72 cts et que j'ai \u00e0 ma disposition des pi\u00e8ces de 2 cts, 5 cts, 10 cts, 50 cts et 1 euro, je peux aussi rendre : 72 - 2 = 70 cts 72 - 5 = 67 cts 72 - 10 = 62 cts 72 - 50 = 22 cts Je ne peux pas utiliser de pi\u00e8ce de 1 euro. Autrement dit, si Nb(X\u2212p i ) (avec i compris entre 1 et n) est le nombre minimal de pi\u00e8ces \u00e0 rendre pour le montant X\u2212p i , alors Nb(X)=1+Nb(X\u2212p i ) est le nombre minimal de pi\u00e8ces \u00e0 rendre pour un montant X. Nous avons donc la formule de r\u00e9currence suivante : si X=0 : Nb(X)=0 si X>0 : Nb(X)=1+min(Nb(X\u2212p i )) avec 1\u2264i<n et pi\u2264X Le \"min\" pr\u00e9sent dans la formule de r\u00e9currence exprime le fait que le nombre de pi\u00e8ces \u00e0 rendre pour une somme X\u2212p i doit \u00eatre le plus petit possible. \u00c9tudions le programme suivant : def rendu_monnaie_rec ( P , X ): if X == 0 : return 0 else : mini = 1000 for i in range ( len ( P )): if P [ i ] <= X : nb = 1 + rendu_monnaie_rec ( P , X - P [ i ]) if nb < mini : mini = nb return mini La fonction rendu_monnaie_rec prend en param\u00e8tre un tableau de pi\u00e8ces (P) et la somme \u00e0 rendre (X). Elle renvoie le plus petit nombre de pi\u00e8ces possible. On retrouve la relation de r\u00e9currence d\u00e9finie juste au-dessus. Pour \u00eatre s\u00fbr de renvoyer le plus petit nombre de pi\u00e8ces, on attribue dans un premier temps la valeur 1000 \u00e0 la variable mini (cette valeur 1000 est arbitraire, il faut juste une valeur suffisamment grande : on peut partir du principe que nous ne rencontrerons jamais de cas o\u00f9 il faudra rendre plus de 1000 pi\u00e8ces), ensuite, \u00e0 chaque appel r\u00e9cursif, on \"sauvegarde\" le plus petit nombre de pi\u00e8ces dans cette variable mini. Exemple : si on teste cette fonction en tapant rendu_monnaie_rec((2,5,10,50,100),1 1) dans la console Python, on obtient 4 (on doit utiliser au minimum 4 pi\u00e8ces pour rendre 11 cts) Essayons de comprendre plus en d\u00e9tail comment le programme ci-dessous d\u00e9termine ce r\u00e9sultat. \u00c9tudions cet arbre : Plusieurs remarques s'imposent : comme vous pouvez le remarquer sur le sch\u00e9ma, tous les cas possibles sont \"trait\u00e9s\" (quand un algorithme \"traite\" tous les cas possibles, on parle souvent de m\u00e9thode \"brute force\"). pour certains cas, on se retrouve dans une \"impasse\" (cas o\u00f9 on termine par un \"1\"), dans cette situation, la fonction renvoie \"1000\" ce qui permet de s'assurer que cette \"solution\" (qui n'en est pas une) ne sera pas \"retenue\". la profondeur minimum de l'arbre (avec une feuille 0) est de 4, la solution au probl\u00e8me est donc 4 (il existe plusieurs parcours : (5,2,2,2), (2,5,2,2)... qui donne \u00e0 chaque fois 4) Si maintenant on tente d'ex\u00e9cuter la m\u00eame fonction avec une valeur \u00e0 rendre beaucoup plus grande (par exemple 171 cts), le programme plante ! Pourquoi ? Parce que les appels r\u00e9cursifs sont trop nombreux, on d\u00e9passe la capacit\u00e9 de la pile. La programmation dynamique va nous permettre de r\u00e9soudre ce probl\u00e8me. Comme vous avez peut-\u00eatre d\u00e9j\u00e0 d\u00fb le remarquer, m\u00eame dans le cas simple \u00e9voqu\u00e9 ci-dessus (11 cts \u00e0 rendre), nous faisons plusieurs fois exactement le m\u00eame calcul. Par exemple on retrouve 2 fois la branche qui part de \"4\" : Il va donc \u00eatre possible d'appliquer la m\u00eame m\u00e9thode que pour Fibonacci. \u00c0 noter que dans des cas plus \"difficiles \u00e0 traiter\" comme 171 cts, on va retrouver de nombreuses fois exactement les m\u00eames calculs, il est donc potentiellement int\u00e9ressant d'utiliser la programmation dynamique. Voici donc notre programme de calcul de rendu de monnaie modifi\u00e9e : def rendu_monnaie_mem ( P , X ): mem = [ 0 ] * ( X + 1 ) return rendu_monnaie_mem_c ( P , X , mem ) def rendu_monnaie_mem_c ( P , X , m ): if X == 0 : return 0 elif m [ X ] > 0 : return m [ X ] else : mini = 1000 for i in range ( len ( P )): if P [ i ] <= X : nb = 1 + rendu_monnaie_mem_c ( P , X - P [ i ], m ) if nb < mini : mini = nb m [ X ] = mini return mini Ce programme ressemble beaucoup \u00e0 programme utiliser pour la suite de Fibonacci, il ne devrait donc pas vous poser de probl\u00e8me. Si maintenant nous testons ce programme en tapant dans la console Python rendu_monnaie_mem((2,5,10,50,100),171) , tout fonctionne parfaitement, il suffit d'une fraction de seconde pour obtenir le r\u00e9sultat qui est 7.","title":"b) Programmation dynamique et rendu de monnaie"},{"location":"c16e/","text":"\u00e0 venir","title":"Exercices"},{"location":"c16r/","text":"Ce qu\u2019il faut savoir la programmation dynamique est une m\u00e9thode algorithmique utilis\u00e9e pour r\u00e9soudre les probl\u00e8mes d'optimisation (comme les m\u00e9thodes gloutonnes vues en classe de premi\u00e8re). la programmation dynamique consiste \u00e0 r\u00e9soudre un probl\u00e8me en le d\u00e9composant en sous-probl\u00e8mes, puis \u00e0 r\u00e9soudre les sous-probl\u00e8mes, des plus petits aux plus grands en stockant les r\u00e9sultats interm\u00e9diaires . Ce qu\u2019il faut savoir faire vous devez \u00eatre capable d'utiliser la programmation dynamique dans des cas simples (par exemple le probl\u00e8me du rendu de monnaie).","title":"R\u00e9vision"},{"location":"c16r/#ce-quil-faut-savoir","text":"la programmation dynamique est une m\u00e9thode algorithmique utilis\u00e9e pour r\u00e9soudre les probl\u00e8mes d'optimisation (comme les m\u00e9thodes gloutonnes vues en classe de premi\u00e8re). la programmation dynamique consiste \u00e0 r\u00e9soudre un probl\u00e8me en le d\u00e9composant en sous-probl\u00e8mes, puis \u00e0 r\u00e9soudre les sous-probl\u00e8mes, des plus petits aux plus grands en stockant les r\u00e9sultats interm\u00e9diaires .","title":"Ce qu\u2019il faut savoir"},{"location":"c16r/#ce-quil-faut-savoir-faire","text":"vous devez \u00eatre capable d'utiliser la programmation dynamique dans des cas simples (par exemple le probl\u00e8me du rendu de monnaie).","title":"Ce qu\u2019il faut savoir faire"},{"location":"c17a/","text":"activit\u00e9 17.1 Voici la premi\u00e8re strophe du po\u00e8me de Paul Verlaine Chanson d'automne : Les sanglots longs Des violons De l'automne Blessent mon coeur D'une langueur Monotone. 1) Recherchez le motif uto dans cette strophe en utilisant l'algorithme de Boyer-Moore 2) Recherchez le motif ail dans cette strophe en utilisant l'algorithme de Boyer-Moore activit\u00e9 17.2 La fonction recherche ci-dessous : def recherche ( txt , motif ): NO_CAR = 256 m = len ( motif ) n = len ( ... ) tab_car = [ - 1 ] * NO_CAR for i in range ( ... ): tab_car [ ord ( motif [ i ])] = i decalage = 0 res = ... while ( decalage <= n - m ): j = m - 1 while j >= 0 and motif [ j ] == txt [ decalage + j ]: j = j - 1 if j < 0 : res . append ( decalage ) if decalage + m < n : decalage = decalage + m - tab_car [ ord ( txt [ decalage + m ])] else : decalage = decalage + 1 else : decalage = decalage + max ( 1 , j - tab_car [ ord ( txt [ decalage + j ])]) return res permet de trouver la position du motif motif dans le texte txt . Si le motif motif est pr\u00e9sent dans texte txt , la fonction recherche renvoie un tableau contenant les indices de positions du motif dans le texte. Dans le cas o\u00f9 le motif n'est pas pr\u00e9sent, la fonction recherche renvoie un tableau vide. Par exemple recherche(\"AZERTYAZER\", \"ER\") renverra le tableau [2,8], recherche(\"AZERTYAZER\", \"AB\") renverra le tableau [ ]. Apr\u00e8s avoir \u00e9tudi\u00e9 attentivement cette fonction recherche , vous compl\u00e9terez cette fonction (remplacez les ...) pour qu'elle fournisse les r\u00e9sultats attendus.","title":"Activit\u00e9s"},{"location":"c17a/#activite-171","text":"Voici la premi\u00e8re strophe du po\u00e8me de Paul Verlaine Chanson d'automne : Les sanglots longs Des violons De l'automne Blessent mon coeur D'une langueur Monotone. 1) Recherchez le motif uto dans cette strophe en utilisant l'algorithme de Boyer-Moore 2) Recherchez le motif ail dans cette strophe en utilisant l'algorithme de Boyer-Moore","title":"activit\u00e9 17.1"},{"location":"c17a/#activite-172","text":"La fonction recherche ci-dessous : def recherche ( txt , motif ): NO_CAR = 256 m = len ( motif ) n = len ( ... ) tab_car = [ - 1 ] * NO_CAR for i in range ( ... ): tab_car [ ord ( motif [ i ])] = i decalage = 0 res = ... while ( decalage <= n - m ): j = m - 1 while j >= 0 and motif [ j ] == txt [ decalage + j ]: j = j - 1 if j < 0 : res . append ( decalage ) if decalage + m < n : decalage = decalage + m - tab_car [ ord ( txt [ decalage + m ])] else : decalage = decalage + 1 else : decalage = decalage + max ( 1 , j - tab_car [ ord ( txt [ decalage + j ])]) return res permet de trouver la position du motif motif dans le texte txt . Si le motif motif est pr\u00e9sent dans texte txt , la fonction recherche renvoie un tableau contenant les indices de positions du motif dans le texte. Dans le cas o\u00f9 le motif n'est pas pr\u00e9sent, la fonction recherche renvoie un tableau vide. Par exemple recherche(\"AZERTYAZER\", \"ER\") renverra le tableau [2,8], recherche(\"AZERTYAZER\", \"AB\") renverra le tableau [ ]. Apr\u00e8s avoir \u00e9tudi\u00e9 attentivement cette fonction recherche , vous compl\u00e9terez cette fonction (remplacez les ...) pour qu'elle fournisse les r\u00e9sultats attendus.","title":"activit\u00e9 17.2"},{"location":"c17c/","text":"1) introduction Les algorithmes qui permettent de trouver une sous-chaine de caract\u00e8res dans une chaine de caract\u00e8res plus grande sont des \"grands classiques\" de l'algorithmique. On parle aussi de recherche d'un motif (sous-chaine) dans un texte. Voici un exemple : Soit le texte suivant : \"Les sanglots longs des violons de l'automne blessent mon coeur d'une langueur monotone. Tout suffocant et bl\u00eame, quand sonne l'heure, je me souviens des jours anciens et je pleure.\" Question : le motif \"vio\" est-il pr\u00e9sent dans le texte ci-dessus, si oui, en quelle(s) position(s) ? (la num\u00e9rotation d'une chaine de caract\u00e8res commence \u00e0 z\u00e9ro et les espaces sont consid\u00e9r\u00e9s comme des caract\u00e8res) R\u00e9ponse : on trouve le motif \"vio\" en position 23 Les algorithmes de recherche textuelle sont notamment utilis\u00e9s en bioinformatique. 2) bioinformatique Comme son nom l'indique, la bioinformatique est issue de la rencontre de l'informatique et de la biologie : la r\u00e9colte des donn\u00e9es en biologie a connu une tr\u00e8s forte augmentation ces 30 derni\u00e8res ann\u00e9es. Pour analyser cette grande quantit\u00e9 de donn\u00e9es de mani\u00e8re efficace, les scientifiques ont de plus en plus recourt au traitement automatique de l'information, c'est-\u00e0-dire \u00e0 l'informatique. a) Analyse de l'ADN Comme vous le savez d\u00e9j\u00e0, l'information g\u00e9n\u00e9tique pr\u00e9sente dans nos cellules est port\u00e9e par les mol\u00e9cules d'ADN. Les mol\u00e9cules d'ADN sont, entre autres, compos\u00e9es de bases azot\u00e9es ayant pour noms : Ad\u00e9nine (repr\u00e9sent\u00e9 par un A), Thymine (repr\u00e9sent\u00e9 par un T), Guanine (repr\u00e9sent\u00e9 par un G) et Cytosine (repr\u00e9sent\u00e9 par un C). mol\u00e9cule d'ADN L'information g\u00e9n\u00e9tique est donc tr\u00e8s souvent repr\u00e9sent\u00e9e par de tr\u00e8s longues chaines de caract\u00e8res, compos\u00e9es des caract\u00e8res A, T, G et C. Exemple : CTATTCAGCAGTC... Il est souvent n\u00e9cessaire de d\u00e9tecter la pr\u00e9sence de certains enchainements de bases azot\u00e9es (dans la plupart des cas un triplet de bases azot\u00e9es code pour 1 acide amin\u00e9 et la combinaison d'acides amin\u00e9s forme une prot\u00e9ine). Par exemple, on peut se poser la question suivante : trouve-t-on le triplet ACG dans le brin d'ADN suivant (et si oui, en quelle position ?) : CAAGCGCACAAGACGCGGCAGACCTTCGTTATAGGCGATGATTTCGAACCTACTAGTGGGTCTCTTAGGCCGAGCGGTTCCGAGAGATAGTGAAAGATGGCTGGGCTGTGAAGGGAAGGAGTCGTGAAAGCGCGAACACGAGTGTGCGCAAGCGCAGCGCCTTAGTATGCTCCAGTGTAGAAGCTCCGGCGTCCCGTCTAACCGTACGCTGTCCCCGGTACATGGAGCTAATAGGCTTTACTGCCCAATATGACCCCGCGCCGCGACAAAACAATAACAGTTTGCTGTATGTTCCATGGTGGCCAATCCGTCTCTTTTCGACAGCACGGCCAATTCTCCTAGGAAGCCAGCTCAATTTCAACGAAGTCGGCTGTTGAACAGCGAGGTATGGCGTCGGTGGCTCTATTAGTGGTGAGCGAATTGAAATTCGGTGGCCTTACTTGTACCACAGCGATCCCTTCCCACCATTCTTATGCGTCGTCTGTTACCTGGCTTGGCAT b) utilisation d'un algorithme na\u00eff Nous allons commencer par le premier algorithme qui nous vient \u00e0 l'esprit (on parle souvent d'algorithme \"na\u00eff\") : on place le motif recherch\u00e9 au m\u00eame niveau que les 3 premiers caract\u00e8res de notre chaine, le premier \u00e9l\u00e9ment du motif ne correspond pas au premier \u00e9l\u00e9ment de la chaine (A et C), on d\u00e9cale le motif d'un cran vers la droite. le premier \u00e9l\u00e9ment du motif correspond au premier \u00e9l\u00e9ment de la chaine (A et A) mais pas le second (C et A), on d\u00e9cale d'un cran vers la droite le premier \u00e9l\u00e9ment du motif correspond au premier \u00e9l\u00e9ment de la chaine (A et A) mais pas le second (C et G), on d\u00e9cale d'un cran vers la droite le premier \u00e9l\u00e9ment du motif ne correspond pas au premier \u00e9l\u00e9ment de la chaine (A et G), on d\u00e9cale d'un cran vers la droite. le premier \u00e9l\u00e9ment du motif ne correspond pas au premier \u00e9l\u00e9ment de la chaine (A et C), on d\u00e9cale d'un cran vers la droite. ... on continue le processus jusqu'au moment o\u00f9 les 3 \u00e9l\u00e9ments du motif correspondent avec les 3 \u00e9l\u00e9ments de la chaine situ\u00e9s au m\u00eame niveau. Cet algorithme na\u00eff peut, selon les situations demander un tr\u00e8s grand nombre de comparaisons, ce qui peut entra\u00eener un tr\u00e8s long temps de \"calcul\" avec des chaines tr\u00e8s tr\u00e8s longues. L'algorithme de Boyer-Moore permet de faire mieux en termes de comparaisons \u00e0 effectuer c) Algoritme de Boyer-Moore L'algorithme de Boyer-Moore se base sur les caract\u00e9ristiques suivantes : l'algorithme effectue un pr\u00e9traitement du motif. Cela signifie que l'algorithme \"connait\" les caract\u00e8res qui se trouvent dans le motif on commence la comparaison motif-chaine par la droite du motif. Par exemple pour le motif CGGCAG, on compare d'abord le G, puis le A, puis C...on parcourt le motif de la droite vers la gauche dans la m\u00e9thode na\u00efve, les d\u00e9calages du motif vers la droite se faisaient toujours d'un \"cran\" \u00e0 la fois. L'int\u00e9r\u00eat de l'algorithme de Boyer-Moore, c'est qu'il permet, dans certaines situations, d'effectuer un d\u00e9calage de plusieurs crans en une seule fois. Examinons un exemple. Soit la chaine suivante : CAATGTCTGCACCAAGACGCCGGCAGGTGCAGACCTTCGTTATAGGCGATGATTTCGAACCTACTAGTGGGTCTCTTAGGCCGAGCGGTTCCGAGAGATAGTGAAAGATGGCTGGGCTGTGAAGGGAAGGAGTCGTGAAAGCGCGAACACGAGTGTGCGCAAGCGCAGCGCCTTAGTATGCTCCAGTGTAGAAGCTCCGGCGTCCCGTCTAACCGTACGCTGTCCCCGGTACATGGAGCTAATAGGCTTTACTGCCCAATATGACCCCGCGCCGCGACAAAACAATAACAGTTT et le motif : CGGCAG on commence la comparaison par la droite, G et T ne correspondent pas. Le pr\u00e9traitement du motif nous permet de savoir qu'il n'y a pas de T dans ce dernier, on peut d\u00e9caler le motif de 6 crans vers la droite. G et C ne correspondent pas, en revanche, on trouve 2 C dans le motif. On effectue un d\u00e9calage du motif de 2 crans vers la droite afin de faire correspondre le C de la chaine (encadr\u00e9 sur le sch\u00e9ma) et le C le plus \u00e0 droite dans le motif. G et A ne correspondent pas, il existe un A dans le motif, on effectue un d\u00e9calage d'un cran. G et A ne correspondent pas, il existe un A dans le motif, on effectue un d\u00e9calage d'un cran. G et G correspondent, A et A correspondent, mais C et A ne correspondent pas. \u00c0 gauche du C, il n'y a plus de A, on peut donc effectuer un d\u00e9calage de 4 crans. G et C ne correspondent pas, on effectue un d\u00e9calage de deux crans pour faire correspondre les C. G et G correspondent, A et C ne correspondent pas, on effectue un d\u00e9calage d'un cran G et G correspondent, A et G ne correspondent pas, on effectue un d\u00e9calage de 2 crans (faire correspondre les G) G et A ne correspondent pas, on effectue un d\u00e9calage d'un cran toutes les lettres correspondent, on a trouv\u00e9 le motif dans la chaine. On peut remarquer que l'on a bien, en fonction des cas, effectu\u00e9 plusieurs d\u00e9calages en un coup, ce qui, au bout du compte, permet de faire moins de comparaison que l'algorithme na\u00eff. On peut aussi remarquer que plus le motif est grand et plus l'algorithme de Boyer-Moore sera efficace.","title":"Cours"},{"location":"c17c/#1-introduction","text":"Les algorithmes qui permettent de trouver une sous-chaine de caract\u00e8res dans une chaine de caract\u00e8res plus grande sont des \"grands classiques\" de l'algorithmique. On parle aussi de recherche d'un motif (sous-chaine) dans un texte. Voici un exemple : Soit le texte suivant : \"Les sanglots longs des violons de l'automne blessent mon coeur d'une langueur monotone. Tout suffocant et bl\u00eame, quand sonne l'heure, je me souviens des jours anciens et je pleure.\" Question : le motif \"vio\" est-il pr\u00e9sent dans le texte ci-dessus, si oui, en quelle(s) position(s) ? (la num\u00e9rotation d'une chaine de caract\u00e8res commence \u00e0 z\u00e9ro et les espaces sont consid\u00e9r\u00e9s comme des caract\u00e8res) R\u00e9ponse : on trouve le motif \"vio\" en position 23 Les algorithmes de recherche textuelle sont notamment utilis\u00e9s en bioinformatique.","title":"1) introduction"},{"location":"c17c/#2-bioinformatique","text":"Comme son nom l'indique, la bioinformatique est issue de la rencontre de l'informatique et de la biologie : la r\u00e9colte des donn\u00e9es en biologie a connu une tr\u00e8s forte augmentation ces 30 derni\u00e8res ann\u00e9es. Pour analyser cette grande quantit\u00e9 de donn\u00e9es de mani\u00e8re efficace, les scientifiques ont de plus en plus recourt au traitement automatique de l'information, c'est-\u00e0-dire \u00e0 l'informatique.","title":"2) bioinformatique"},{"location":"c17c/#a-analyse-de-ladn","text":"Comme vous le savez d\u00e9j\u00e0, l'information g\u00e9n\u00e9tique pr\u00e9sente dans nos cellules est port\u00e9e par les mol\u00e9cules d'ADN. Les mol\u00e9cules d'ADN sont, entre autres, compos\u00e9es de bases azot\u00e9es ayant pour noms : Ad\u00e9nine (repr\u00e9sent\u00e9 par un A), Thymine (repr\u00e9sent\u00e9 par un T), Guanine (repr\u00e9sent\u00e9 par un G) et Cytosine (repr\u00e9sent\u00e9 par un C). mol\u00e9cule d'ADN L'information g\u00e9n\u00e9tique est donc tr\u00e8s souvent repr\u00e9sent\u00e9e par de tr\u00e8s longues chaines de caract\u00e8res, compos\u00e9es des caract\u00e8res A, T, G et C. Exemple : CTATTCAGCAGTC... Il est souvent n\u00e9cessaire de d\u00e9tecter la pr\u00e9sence de certains enchainements de bases azot\u00e9es (dans la plupart des cas un triplet de bases azot\u00e9es code pour 1 acide amin\u00e9 et la combinaison d'acides amin\u00e9s forme une prot\u00e9ine). Par exemple, on peut se poser la question suivante : trouve-t-on le triplet ACG dans le brin d'ADN suivant (et si oui, en quelle position ?) : CAAGCGCACAAGACGCGGCAGACCTTCGTTATAGGCGATGATTTCGAACCTACTAGTGGGTCTCTTAGGCCGAGCGGTTCCGAGAGATAGTGAAAGATGGCTGGGCTGTGAAGGGAAGGAGTCGTGAAAGCGCGAACACGAGTGTGCGCAAGCGCAGCGCCTTAGTATGCTCCAGTGTAGAAGCTCCGGCGTCCCGTCTAACCGTACGCTGTCCCCGGTACATGGAGCTAATAGGCTTTACTGCCCAATATGACCCCGCGCCGCGACAAAACAATAACAGTTTGCTGTATGTTCCATGGTGGCCAATCCGTCTCTTTTCGACAGCACGGCCAATTCTCCTAGGAAGCCAGCTCAATTTCAACGAAGTCGGCTGTTGAACAGCGAGGTATGGCGTCGGTGGCTCTATTAGTGGTGAGCGAATTGAAATTCGGTGGCCTTACTTGTACCACAGCGATCCCTTCCCACCATTCTTATGCGTCGTCTGTTACCTGGCTTGGCAT","title":"a) Analyse de l'ADN"},{"location":"c17c/#b-utilisation-dun-algorithme-naif","text":"Nous allons commencer par le premier algorithme qui nous vient \u00e0 l'esprit (on parle souvent d'algorithme \"na\u00eff\") : on place le motif recherch\u00e9 au m\u00eame niveau que les 3 premiers caract\u00e8res de notre chaine, le premier \u00e9l\u00e9ment du motif ne correspond pas au premier \u00e9l\u00e9ment de la chaine (A et C), on d\u00e9cale le motif d'un cran vers la droite. le premier \u00e9l\u00e9ment du motif correspond au premier \u00e9l\u00e9ment de la chaine (A et A) mais pas le second (C et A), on d\u00e9cale d'un cran vers la droite le premier \u00e9l\u00e9ment du motif correspond au premier \u00e9l\u00e9ment de la chaine (A et A) mais pas le second (C et G), on d\u00e9cale d'un cran vers la droite le premier \u00e9l\u00e9ment du motif ne correspond pas au premier \u00e9l\u00e9ment de la chaine (A et G), on d\u00e9cale d'un cran vers la droite. le premier \u00e9l\u00e9ment du motif ne correspond pas au premier \u00e9l\u00e9ment de la chaine (A et C), on d\u00e9cale d'un cran vers la droite. ... on continue le processus jusqu'au moment o\u00f9 les 3 \u00e9l\u00e9ments du motif correspondent avec les 3 \u00e9l\u00e9ments de la chaine situ\u00e9s au m\u00eame niveau. Cet algorithme na\u00eff peut, selon les situations demander un tr\u00e8s grand nombre de comparaisons, ce qui peut entra\u00eener un tr\u00e8s long temps de \"calcul\" avec des chaines tr\u00e8s tr\u00e8s longues. L'algorithme de Boyer-Moore permet de faire mieux en termes de comparaisons \u00e0 effectuer","title":"b) utilisation d'un algorithme na\u00eff"},{"location":"c17c/#c-algoritme-de-boyer-moore","text":"L'algorithme de Boyer-Moore se base sur les caract\u00e9ristiques suivantes : l'algorithme effectue un pr\u00e9traitement du motif. Cela signifie que l'algorithme \"connait\" les caract\u00e8res qui se trouvent dans le motif on commence la comparaison motif-chaine par la droite du motif. Par exemple pour le motif CGGCAG, on compare d'abord le G, puis le A, puis C...on parcourt le motif de la droite vers la gauche dans la m\u00e9thode na\u00efve, les d\u00e9calages du motif vers la droite se faisaient toujours d'un \"cran\" \u00e0 la fois. L'int\u00e9r\u00eat de l'algorithme de Boyer-Moore, c'est qu'il permet, dans certaines situations, d'effectuer un d\u00e9calage de plusieurs crans en une seule fois. Examinons un exemple. Soit la chaine suivante : CAATGTCTGCACCAAGACGCCGGCAGGTGCAGACCTTCGTTATAGGCGATGATTTCGAACCTACTAGTGGGTCTCTTAGGCCGAGCGGTTCCGAGAGATAGTGAAAGATGGCTGGGCTGTGAAGGGAAGGAGTCGTGAAAGCGCGAACACGAGTGTGCGCAAGCGCAGCGCCTTAGTATGCTCCAGTGTAGAAGCTCCGGCGTCCCGTCTAACCGTACGCTGTCCCCGGTACATGGAGCTAATAGGCTTTACTGCCCAATATGACCCCGCGCCGCGACAAAACAATAACAGTTT et le motif : CGGCAG on commence la comparaison par la droite, G et T ne correspondent pas. Le pr\u00e9traitement du motif nous permet de savoir qu'il n'y a pas de T dans ce dernier, on peut d\u00e9caler le motif de 6 crans vers la droite. G et C ne correspondent pas, en revanche, on trouve 2 C dans le motif. On effectue un d\u00e9calage du motif de 2 crans vers la droite afin de faire correspondre le C de la chaine (encadr\u00e9 sur le sch\u00e9ma) et le C le plus \u00e0 droite dans le motif. G et A ne correspondent pas, il existe un A dans le motif, on effectue un d\u00e9calage d'un cran. G et A ne correspondent pas, il existe un A dans le motif, on effectue un d\u00e9calage d'un cran. G et G correspondent, A et A correspondent, mais C et A ne correspondent pas. \u00c0 gauche du C, il n'y a plus de A, on peut donc effectuer un d\u00e9calage de 4 crans. G et C ne correspondent pas, on effectue un d\u00e9calage de deux crans pour faire correspondre les C. G et G correspondent, A et C ne correspondent pas, on effectue un d\u00e9calage d'un cran G et G correspondent, A et G ne correspondent pas, on effectue un d\u00e9calage de 2 crans (faire correspondre les G) G et A ne correspondent pas, on effectue un d\u00e9calage d'un cran toutes les lettres correspondent, on a trouv\u00e9 le motif dans la chaine. On peut remarquer que l'on a bien, en fonction des cas, effectu\u00e9 plusieurs d\u00e9calages en un coup, ce qui, au bout du compte, permet de faire moins de comparaison que l'algorithme na\u00eff. On peut aussi remarquer que plus le motif est grand et plus l'algorithme de Boyer-Moore sera efficace.","title":"c) Algoritme de Boyer-Moore"},{"location":"c17e/","text":"\u00e0 venir","title":"Exercices"},{"location":"c17r/","text":"Ce qu\u2019il faut savoir les algorithmes permettant de rechercher un motif (suite de lettres) dans un texte ont une grande importance en informatique L'algorithme de Boyer-Moore effectue un pr\u00e9traitement du motif. Cela signifie que l'algorithme \"connait\" les caract\u00e8res qui se trouvent dans le motif Dans l'algorithme de Boyer-Moore on commence la comparaison motif-chaine par la droite du motif. Par exemple pour le motif CGGCAG, on compare d'abord le G, puis le A, puis C...on parcourt le motif de la droite vers la gauche Dans le cas de l'algorithme \"na\u00eff\", les d\u00e9calages du motif vers la droite se faisaient toujours d'un \"cran\" \u00e0 la fois. L'int\u00e9r\u00eat de l'algorithme de Boyer-Moore, c'est qu'il permet, dans certaines situations, d'effectuer un d\u00e9calage de plusieurs crans en une seule fois. plus le motif est grand et plus l'algorithme de Boyer-Moore sera efficace par rapport \u00e0 l'algorithme \"na\u00eff\" Ce qu\u2019il faut savoir faire Vous devez \u00eatre capable d'appliquer l'algorithme de Boyer-Moore sur un cas simple.","title":"R\u00e9vision"},{"location":"c17r/#ce-quil-faut-savoir","text":"les algorithmes permettant de rechercher un motif (suite de lettres) dans un texte ont une grande importance en informatique L'algorithme de Boyer-Moore effectue un pr\u00e9traitement du motif. Cela signifie que l'algorithme \"connait\" les caract\u00e8res qui se trouvent dans le motif Dans l'algorithme de Boyer-Moore on commence la comparaison motif-chaine par la droite du motif. Par exemple pour le motif CGGCAG, on compare d'abord le G, puis le A, puis C...on parcourt le motif de la droite vers la gauche Dans le cas de l'algorithme \"na\u00eff\", les d\u00e9calages du motif vers la droite se faisaient toujours d'un \"cran\" \u00e0 la fois. L'int\u00e9r\u00eat de l'algorithme de Boyer-Moore, c'est qu'il permet, dans certaines situations, d'effectuer un d\u00e9calage de plusieurs crans en une seule fois. plus le motif est grand et plus l'algorithme de Boyer-Moore sera efficace par rapport \u00e0 l'algorithme \"na\u00eff\"","title":"Ce qu\u2019il faut savoir"},{"location":"c17r/#ce-quil-faut-savoir-faire","text":"Vous devez \u00eatre capable d'appliquer l'algorithme de Boyer-Moore sur un cas simple.","title":"Ce qu\u2019il faut savoir faire"},{"location":"c18a/","text":"activit\u00e9 18.1 Faites des recherches sur le Soc BCM2711 qui \u00e9quipe les nano-ordinateurs Raspberry Pi 4, notez les principales caract\u00e9ristiques de ce SoC.","title":"Activit\u00e9s"},{"location":"c18a/#activite-181","text":"Faites des recherches sur le Soc BCM2711 qui \u00e9quipe les nano-ordinateurs Raspberry Pi 4, notez les principales caract\u00e9ristiques de ce SoC.","title":"activit\u00e9 18.1"},{"location":"c18c/","text":"Voici l'int\u00e9rieur d'un PC : Principalement on remarque la carte m\u00e8re qui accueille tous les \u00e9l\u00e9ments fondamentaux au bon fonctionnement d'un ordinateur : microprocesseur (CPU) (cach\u00e9 sous un syst\u00e8me de refroidissement), barrettes de m\u00e9moire RAM, carte graphique (qui permet de g\u00e9rer l'affichage). On trouve aussi sur la carte m\u00e8re les puces qui g\u00e8rent les interfaces r\u00e9seau (Wifi et Ethernet) et bien d'autres choses... On entend souvent dire que les t\u00e9l\u00e9phones portables (smartphones) sont de v\u00e9ritable ordinateur, ce qui est vrai. On peut s'interroger sur la taille d'un smartphone par rapport \u00e0 la taille d'un PC (la carte m\u00e8re d'un PC mesure environ 25 cm sur 30 cm, soit bien plus qu'un smartphone). Pourtant on doit obligatoirement trouver dans un smartphone les m\u00eames composants que dans un PC : CPU, RAM, carte graphique et interfaces r\u00e9seau (Wifi et Bluetooth dans le cas d'un smartphone) ! La solution ? Placer tous ces composants dans une puce unique d'une centaine de mm 2 : Ces puces accueillant CPU, RAM, circuit graphique (GPU) (\u00e9quivalent \u00e0 la carte graphique dans un PC) et circuits radio (Wifi et Bluetooth), sont souvent appel\u00e9es \"syst\u00e8me sur puce\", \"system on a chip\" en anglais (abr\u00e9viation \"SoC\"). Voici le sch\u00e9ma de circuit d'un SoC : Vous pouvez remarquer que l'on retrouve bien sur ce sch\u00e9ma un CPU et de la m\u00e9moire (on a diff\u00e9rents types de m\u00e9moires, mais ce sujet ne sera pas abord\u00e9 ici). Outre leur taille, les Soc ont d'autres avantages par rapport aux syst\u00e8mes \"classiques\" (carte m\u00e8re + CPU + carte graphique...) : les SoC sont con\u00e7us pour consommer beaucoup moins d'\u00e9nergie qu'un syst\u00e8me classique (\u00e0 puissance de calcul \u00e9quivalente) cette consommation r\u00e9duite permet dans la plupart des cas de s'affranchir de la pr\u00e9sence de syst\u00e8me de refroidissement actif comme les ventilateurs (voir l'image du PC ci-dessus). Un syst\u00e8me \u00e9quip\u00e9 de SoC est donc silencieux vu les distances r\u00e9duites entre, par exemple, le CPU et la m\u00e9moire, les donn\u00e9es circulent beaucoup plus vites, ce qui permet d'am\u00e9liorer les performances. En effet, dans les syst\u00e8mes \"classiques\" les bus (si n\u00e9cessaire revoir le cours de premi\u00e8re : Mod\u00e8le d'architecture de von Neumann \u00e0 propos des bus) sont souvent des \"goulots d'\u00e9tranglement\" en termes de performances \u00e0 cause de la vitesse de circulation des donn\u00e9es. On trouve aussi ce syst\u00e8me de SoC sur des nano-ordinateurs comme le Raspberry Pi : Dans sa version 4, le Raspberry Pi est \u00e9quip\u00e9 du Soc BCM2711 de la soci\u00e9t\u00e9 Broadcom Voici les noms des SoC utilis\u00e9s par quelques produits succ\u00e8s : Apple iPhone 11 : SoC A13 Bionic Samsung Galaxy S11 : SoC Exynos 990 Nintendo Switch : SoC Nvidia Tegra Apple MacBook (ordinateur portable) : SoC M1 Rien qu'\u00e0 l'\u00e9vocation des noms cit\u00e9s ci-dessus, vous vous doutez bien que le march\u00e9 des SoC a aujourd'hui un poids \u00e9conomique tr\u00e8s important. On commence m\u00eame \u00e0 trouver des ordinateurs portables \u00e9quip\u00e9s de SoC \u00e0 la place des cartes m\u00e8res \"classiques\". Les SoC commencent doucement, mais s\u00fbrement \u00e0 rattraper les syst\u00e8mes \"classiques\" en termes de puissance (pour les syst\u00e8mes \"classiques\" d'entr\u00e9es et de moyennes gammes, mais aussi haut de gamme avec les nouveaux MacBook d'Apple \u00e9quip\u00e9 de Soc M1).","title":"Cours"},{"location":"c18e/","text":"\u00e0 venir","title":"Exercices"},{"location":"c18r/","text":"Ce qu\u2019il faut savoir Il est aujourd\u2019hui possible de faire tenir sur une puce d\u2019une centaine de mm 2 l\u2019ensemble des composants qui constitue un ordinateur \u201cclassique\u201d (CPU, RAM, circuit graphique (GPU) (\u00e9quivalent \u00e0 la carte graphique dans un PC) et circuits radio (Wifi et Bluetooth)). Ces puces sont souvent appel\u00e9es \u201csyst\u00e8me sur puce\u201d en fran\u00e7ais, \"system on a chip\" en anglais (abr\u00e9viation \"SoC\"). Les SoC sont con\u00e7us pour consommer beaucoup moins d'\u00e9nergie qu'un syst\u00e8me classique (\u00e0 puissance de calcul \u00e9quivalente). On trouve des Soc dans : les smartphones les consoles de jeux portables (par exemple la switch de Nintendo) les nano-ordinateurs (par exemple le Raspberry Pi) et m\u00eame des ordinateurs depuis 2021 (macbook et imac d'Apple) Le march\u00e9 des SoC est un march\u00e9 extr\u00eamement porteur.","title":"R\u00e9vision"},{"location":"c18r/#ce-quil-faut-savoir","text":"Il est aujourd\u2019hui possible de faire tenir sur une puce d\u2019une centaine de mm 2 l\u2019ensemble des composants qui constitue un ordinateur \u201cclassique\u201d (CPU, RAM, circuit graphique (GPU) (\u00e9quivalent \u00e0 la carte graphique dans un PC) et circuits radio (Wifi et Bluetooth)). Ces puces sont souvent appel\u00e9es \u201csyst\u00e8me sur puce\u201d en fran\u00e7ais, \"system on a chip\" en anglais (abr\u00e9viation \"SoC\"). Les SoC sont con\u00e7us pour consommer beaucoup moins d'\u00e9nergie qu'un syst\u00e8me classique (\u00e0 puissance de calcul \u00e9quivalente). On trouve des Soc dans : les smartphones les consoles de jeux portables (par exemple la switch de Nintendo) les nano-ordinateurs (par exemple le Raspberry Pi) et m\u00eame des ordinateurs depuis 2021 (macbook et imac d'Apple) Le march\u00e9 des SoC est un march\u00e9 extr\u00eamement porteur.","title":"Ce qu\u2019il faut savoir"},{"location":"c19a/","text":"activit\u00e9 19.1 En vous basant sur le sch\u00e9ma ci-dessous, donnez le PID (en partant du principe qu'il est cr\u00e9\u00e9 juste apr\u00e8s init) et le PPID du processus \"getty\". activit\u00e9 19.2 Apr\u00e8s avoir ouvert un terminal, tapez la commande suivante : ps -aef Vous devriez avoir plusieurs informations sur les processus en cours sur votre ordinateur, notamment les PID et les PPID de ces processus. Prenez une capture d'\u00e9cran du terminal. activit\u00e9 19.3 Ouvrez 2 terminaux, placez-les l'un \u00e0 c\u00f4t\u00e9 de l'autre. Dans l'un des 2 terminaux, ex\u00e9cutez la commande top (pour en savoir plus sur la l'utilisation de la commande top, consultez la page http://debian-facile.org/doc:systeme:top ) Vous devriez obtenir quelque chose qui ressemble \u00e0 ceci : Fermez votre navigateur Web et observez le r\u00e9sultat dans le terminal ex\u00e9cutant top. Ouvrez votre navigateur Web et observez le r\u00e9sultat dans le terminal ex\u00e9cutant top. Selon le navigateur que vous utilisez, il se peut que le fonctionnement du navigateur soit associ\u00e9 \u00e0 plusieurs processus. Notez le PID des processus li\u00e9s au fonctionnement du navigateur. Utilisez la commande kill afin de supprimer le (ou les) processus li\u00e9(s) au fonctionnement du navigateur. Que se passe-t-il ? activit\u00e9 19.4 Mettez au point une petite sayn\u00e8te de th\u00e9\u00e2tre permettant d'expliquer l'interblocage de 2 processus. Par exemple on pourra avoir 2 actrices ou acteurs qui joueront le r\u00f4le des processus, des \u00e9tiquettes qui repr\u00e9senteront les diff\u00e9rents \u00e9tats (\u00e9lu, bloqu\u00e9 ou pr\u00eat) des processus et des \u00e9tiquettes qui repr\u00e9senteront les ressources R1 et R2.","title":"Activit\u00e9s"},{"location":"c19a/#activite-191","text":"En vous basant sur le sch\u00e9ma ci-dessous, donnez le PID (en partant du principe qu'il est cr\u00e9\u00e9 juste apr\u00e8s init) et le PPID du processus \"getty\".","title":"activit\u00e9 19.1"},{"location":"c19a/#activite-192","text":"Apr\u00e8s avoir ouvert un terminal, tapez la commande suivante : ps -aef Vous devriez avoir plusieurs informations sur les processus en cours sur votre ordinateur, notamment les PID et les PPID de ces processus. Prenez une capture d'\u00e9cran du terminal.","title":"activit\u00e9 19.2"},{"location":"c19a/#activite-193","text":"Ouvrez 2 terminaux, placez-les l'un \u00e0 c\u00f4t\u00e9 de l'autre. Dans l'un des 2 terminaux, ex\u00e9cutez la commande top (pour en savoir plus sur la l'utilisation de la commande top, consultez la page http://debian-facile.org/doc:systeme:top ) Vous devriez obtenir quelque chose qui ressemble \u00e0 ceci : Fermez votre navigateur Web et observez le r\u00e9sultat dans le terminal ex\u00e9cutant top. Ouvrez votre navigateur Web et observez le r\u00e9sultat dans le terminal ex\u00e9cutant top. Selon le navigateur que vous utilisez, il se peut que le fonctionnement du navigateur soit associ\u00e9 \u00e0 plusieurs processus. Notez le PID des processus li\u00e9s au fonctionnement du navigateur. Utilisez la commande kill afin de supprimer le (ou les) processus li\u00e9(s) au fonctionnement du navigateur. Que se passe-t-il ?","title":"activit\u00e9 19.3"},{"location":"c19a/#activite-194","text":"Mettez au point une petite sayn\u00e8te de th\u00e9\u00e2tre permettant d'expliquer l'interblocage de 2 processus. Par exemple on pourra avoir 2 actrices ou acteurs qui joueront le r\u00f4le des processus, des \u00e9tiquettes qui repr\u00e9senteront les diff\u00e9rents \u00e9tats (\u00e9lu, bloqu\u00e9 ou pr\u00eat) des processus et des \u00e9tiquettes qui repr\u00e9senteront les ressources R1 et R2.","title":"activit\u00e9 19.4"},{"location":"c19c/","text":"1) notion de processus Un programme \u00e9crit \u00e0 l'aide d'un langage de haut de niveau (on parle de \"code source\") est, comme nous l'avons vu l'ann\u00e9e derni\u00e8re, transform\u00e9 en langage machine afin de pouvoir \u00eatre ex\u00e9cut\u00e9 par un ordinateur. On appelle processus un programme en cours d'ex\u00e9cution. Attention, il ne faut pas confondre le code source du programme et un processus, qui lui correspond \u00e0 l'ex\u00e9cution de ce programme par un ordinateur. Pour prendre une image assez classique, si une recette de cuisine correspond au code source du programme, le cuisinier en train de pr\u00e9parer cette recette dans sa cuisine correspond \u00e0 un processus. 2) \u00e9tats d'un processus Tous les syst\u00e8mes d'exploitation \"modernes\" (Linux, Windows, macOS, Android, iOS...) sont capables de g\u00e9rer l'ex\u00e9cution de plusieurs processus en m\u00eame temps. Mais pour \u00eatre pr\u00e9cis, cela n'est pas en v\u00e9ritable \"en m\u00eame temps\", mais plut\u00f4t un \"chacun son tour\". Pour g\u00e9rer ce \"chacun son tour\", les syst\u00e8mes d'exploitation attribuent des \"\u00e9tats\" au processus. Voici les diff\u00e9rents \u00e9tats : Lorsqu'un processus est en train de s'ex\u00e9cuter (qu'il utilise le microprocesseur), on dit que le processus est dans l'\u00e9tat \"\u00e9lu\". Un processus qui se trouve dans l'\u00e9tat \u00e9lu peut demander \u00e0 acc\u00e9der \u00e0 une ressource pas forc\u00e9ment disponible instantan\u00e9ment (par exemple lire une donn\u00e9e sur le disque dur). Le processus ne peut pas poursuivre son ex\u00e9cution tant qu'il n'a pas obtenu cette ressource. En attendant de recevoir cette ressource, il passe de l'\u00e9tat \"\u00e9lu\" \u00e0 l'\u00e9tat \"bloqu\u00e9\" Lorsque le processus finit par obtenir la ressource attendue, celui-ci peut potentiellement reprendre son ex\u00e9cution. Mais comme nous l'avons vu ci-dessus, les syst\u00e8mes d'exploitation permettent de g\u00e9rer plusieurs processus \"en m\u00eame temps\", mais un seul processus peut se trouver dans un \u00e9tat \"\u00e9lu\" (le microprocesseur ne peut \"s'occuper\" que d'un seul processus \u00e0 la fois). Quand un processus passe d'un \u00e9tat \"\u00e9lu\" \u00e0 un \u00e9tat \"bloqu\u00e9\", un autre processus peut alors \"prendre sa place\" et passer dans l'\u00e9tat \"\u00e9lu\". Le processus qui vient de recevoir la ressource attendue ne va donc pas forc\u00e9ment pouvoir reprendre son ex\u00e9cution tout de suite, car pendant qu'il \u00e9tait dans un \u00e9tat \"bloqu\u00e9\" un autre processus a \"pris sa place\". Un processus qui quitte l'\u00e9tat bloqu\u00e9 ne repasse pas forc\u00e9ment \u00e0 l'\u00e9tat \"\u00e9lu\", il peut, en attendant que \"la place se lib\u00e8re\" passer dans l'\u00e9tat \"pr\u00eat\" (sous entendu \"j'ai obtenu ce que j'attendais, je suis pr\u00eat \u00e0 reprendre mon ex\u00e9cution d\u00e8s que la \"place sera lib\u00e9r\u00e9e\"\"). Le passage de l'\u00e9tat \"pr\u00eat\" vers l'\u00e9tat \"\u00e9lu\" constitue l'op\u00e9ration \"d'\u00e9lection\". Le passage de l'\u00e9tat \u00e9lu vers l'\u00e9tat bloqu\u00e9 est l'op\u00e9ration de \"blocage\". Un processus est toujours cr\u00e9\u00e9 dans l'\u00e9tat \"pr\u00eat\". Pour se terminer, un processus doit obligatoirement se trouver dans l'\u00e9tat \"\u00e9lu\". On peut r\u00e9sumer tout cela avec le diagramme suivant : Il est vraiment important de bien comprendre que le \"chef d'orchestre\" qui attribue aux processus leur \u00e9tat \"\u00e9lu\", \"bloqu\u00e9\" ou \"pr\u00eat\" est le syst\u00e8me d'exploitation. On dit que le syst\u00e8me g\u00e8re l'ordonnancement des processus (tel processus sera prioritaire sur tel autre...) Chose aussi \u00e0 ne pas perdre de vu : un processus qui utilise une ressource R doit la \"lib\u00e9rer\" une fois qu'il a fini de l'utiliser afin de la rendre disponible pour les autres processus. Pour lib\u00e9rer une ressource, un processus doit obligatoirement \u00eatre dans un \u00e9tat \"\u00e9lu\". 3) cr\u00e9ation d'un processus Un processus peut cr\u00e9er un ou plusieurs processus \u00e0 l'aide d'une commande syst\u00e8me (\"fork\" sous les syst\u00e8mes de type Unix). Imaginons un processus A qui cr\u00e9e un processus B. On dira que A est le p\u00e8re de B et que B est le fils de A. B peut, \u00e0 son tour cr\u00e9\u00e9 un processus C (B sera le p\u00e8re de C et C le fils de B). On peut mod\u00e9liser ces relations p\u00e8re/fils par une structure arborescente (voir le cours si n\u00e9cessaire). Si un processus est cr\u00e9\u00e9 \u00e0 partir d'un autre processus, comment est cr\u00e9\u00e9 le tout premier processus ? Sous un syst\u00e8me d'exploitation comme Linux, au moment du d\u00e9marrage de l'ordinateur un tout premier processus (appel\u00e9 processus 0 ou encore Swapper) est cr\u00e9\u00e9 \u00e0 partir de \"rien\" (il n'est le fils d'aucun processus). Ensuite, ce processus 0 cr\u00e9e un processus souvent appel\u00e9 \"init\" (\"init\" est donc le fils du processus 0). \u00c0 partir de \"init\", les processus n\u00e9cessaires au bon fonctionnement du syst\u00e8me sont cr\u00e9\u00e9s (par exemple les processus \"crond\", \"inetd\", \"getty\",...). Puis d'autres processus sont cr\u00e9\u00e9s \u00e0 partir des fils de \"init\"... On peut r\u00e9sumer tout cela avec le sch\u00e9ma suivant : N. B. Tous ces noms de processus ne sont pas \u00e0 retenir, ils sont juste donn\u00e9s pour l'exemple. Il est juste n\u00e9cessaire d'avoir compris les notions de processus p\u00e8re et processus fils et la structure arborescente. 4) PID et PPID Chaque processus poss\u00e8de un identifiant appel\u00e9 PID (Process Identification), ce PID est un nombre. Le premier processus cr\u00e9\u00e9 au d\u00e9marrage du syst\u00e8me \u00e0 pour PID 0, le second 1, le troisi\u00e8me 2... Le syst\u00e8me d'exploitation utilise un compteur qui est incr\u00e9ment\u00e9 de 1 \u00e0 chaque cr\u00e9ation de processus, le syst\u00e8me utilise ce compteur pour attribuer les PID aux processus. Chaque processus poss\u00e8de aussi un PPID (Parent Process Identification). Ce PPID permet de connaitre le processus parent d'un processus (par exemple le processus \"init\" vu ci-dessus \u00e0 un PID de 1 et un PPID de 0). \u00c0 noter que le processus 0 ne poss\u00e8de pas de PPID (c'est le seul dans cette situation). 5) observer les processus Sous Linux il existe des commandes permettant de visualiser les processus : - la commande ps utilis\u00e9e avec les options aef ( ps -aef ) permet de visualiser les processus en cours un ordinateur, notamment les PID et les PPID de ces processus. Probl\u00e8me : La commande ps ne permet pas de suivre en temps r\u00e9el les processus (affichage fig\u00e9). - la commande top permet d'avoir un suivi en temps r\u00e9el des processus. - la commande kill permet de supprimer un processus. L'utilisation de cette commande est tr\u00e8s simple, il suffit de taper kill suivi du PID du processus \u00e0 supprimer (exemple : kill 4242 permet de supprimer le processus de PID 4242) 6) interblocage Pour terminer, nous allons maintenant \u00e9tudier le ph\u00e9nom\u00e8ne d'interblocage (deadlock en anglais). Soit 2 processus P1 et P2, soit 2 ressources R1 et R2. Initialement, les 2 ressources sont \"libres\" (utilis\u00e9es par aucun processus). Le processus P1 commence son ex\u00e9cution (\u00e9tat \u00e9lu), il demande la ressource R1. Il obtient satisfaction puisque R1 est libre, P1 est donc dans l'\u00e9tat \"pr\u00eat\". Pendant ce temps, le syst\u00e8me a pass\u00e9 P2 \u00e0 l'\u00e9tat \u00e9lu : P2 commence son ex\u00e9cution et demande la ressource R2. Il obtient imm\u00e9diatement R2 puisque cette ressource \u00e9tait libre. P2 repasse imm\u00e9diatement \u00e0 l'\u00e9tat \u00e9lu et poursuit son ex\u00e9cution (P1 lui est toujours dans l'\u00e9tat pr\u00eat). P2 demande la ressource R1, il se retrouve dans un \u00e9tat bloqu\u00e9 puisque la ressource R1 a \u00e9t\u00e9 attribu\u00e9e \u00e0 P1 : P1 est dans l'\u00e9tat pr\u00eat, il n'a pas eu l'occasion de lib\u00e9rer la ressource R1 puisqu'il n'a pas eu l'occasion d'utiliser R1 (pour utiliser R1, P1 doit \u00eatre dans l'\u00e9tat \u00e9lu). P2 \u00e9tant bloqu\u00e9 (en attente de R1), le syst\u00e8me passe P1 dans l'\u00e9tat \u00e9lu et avant de lib\u00e9rer R1, il demande \u00e0 utiliser R2. Probl\u00e8me : R2 n'a pas encore \u00e9t\u00e9 lib\u00e9r\u00e9 par P2, R2 n'est donc pas disponible, P1 se retrouve bloqu\u00e9. R\u00e9sumons la situation \u00e0 cet instant : P1 poss\u00e8de la ressource R1 et se trouve dans l'\u00e9tat bloqu\u00e9 (attente de R2), P2 poss\u00e8de la ressource R2 et se trouve dans l'\u00e9tat bloqu\u00e9 (attente de R1) Pour que P1 puisse poursuivre son ex\u00e9cution, il faut que P2 lib\u00e8re la ressource R2, mais P2 ne peut pas poursuivre son ex\u00e9cution (et donc lib\u00e9rer R2) puisqu'il est bloqu\u00e9 dans l'attente de R1. Pour que P2 puisse poursuivre son ex\u00e9cution, il faut que P1 lib\u00e8re la ressource R1, mais P1 ne peut pas poursuivre son ex\u00e9cution (et donc lib\u00e9rer R1) puisqu'il est bloqu\u00e9 dans l'attente de R2. Bref, la situation est totalement bloqu\u00e9e ! Cette situation est qualifi\u00e9e d'interblocage (deadlock en anglais). Il existe plusieurs solutions permettant soit de mettre fin \u00e0 un interblocage (cela passe par l'arr\u00eat d'un des 2 processus fautifs) ou d'\u00e9viter les interblocage, mais ces solutions ne seront pas \u00e9tudi\u00e9es ici.","title":"Cours"},{"location":"c19c/#1-notion-de-processus","text":"Un programme \u00e9crit \u00e0 l'aide d'un langage de haut de niveau (on parle de \"code source\") est, comme nous l'avons vu l'ann\u00e9e derni\u00e8re, transform\u00e9 en langage machine afin de pouvoir \u00eatre ex\u00e9cut\u00e9 par un ordinateur. On appelle processus un programme en cours d'ex\u00e9cution. Attention, il ne faut pas confondre le code source du programme et un processus, qui lui correspond \u00e0 l'ex\u00e9cution de ce programme par un ordinateur. Pour prendre une image assez classique, si une recette de cuisine correspond au code source du programme, le cuisinier en train de pr\u00e9parer cette recette dans sa cuisine correspond \u00e0 un processus.","title":"1) notion de processus"},{"location":"c19c/#2-etats-dun-processus","text":"Tous les syst\u00e8mes d'exploitation \"modernes\" (Linux, Windows, macOS, Android, iOS...) sont capables de g\u00e9rer l'ex\u00e9cution de plusieurs processus en m\u00eame temps. Mais pour \u00eatre pr\u00e9cis, cela n'est pas en v\u00e9ritable \"en m\u00eame temps\", mais plut\u00f4t un \"chacun son tour\". Pour g\u00e9rer ce \"chacun son tour\", les syst\u00e8mes d'exploitation attribuent des \"\u00e9tats\" au processus. Voici les diff\u00e9rents \u00e9tats : Lorsqu'un processus est en train de s'ex\u00e9cuter (qu'il utilise le microprocesseur), on dit que le processus est dans l'\u00e9tat \"\u00e9lu\". Un processus qui se trouve dans l'\u00e9tat \u00e9lu peut demander \u00e0 acc\u00e9der \u00e0 une ressource pas forc\u00e9ment disponible instantan\u00e9ment (par exemple lire une donn\u00e9e sur le disque dur). Le processus ne peut pas poursuivre son ex\u00e9cution tant qu'il n'a pas obtenu cette ressource. En attendant de recevoir cette ressource, il passe de l'\u00e9tat \"\u00e9lu\" \u00e0 l'\u00e9tat \"bloqu\u00e9\" Lorsque le processus finit par obtenir la ressource attendue, celui-ci peut potentiellement reprendre son ex\u00e9cution. Mais comme nous l'avons vu ci-dessus, les syst\u00e8mes d'exploitation permettent de g\u00e9rer plusieurs processus \"en m\u00eame temps\", mais un seul processus peut se trouver dans un \u00e9tat \"\u00e9lu\" (le microprocesseur ne peut \"s'occuper\" que d'un seul processus \u00e0 la fois). Quand un processus passe d'un \u00e9tat \"\u00e9lu\" \u00e0 un \u00e9tat \"bloqu\u00e9\", un autre processus peut alors \"prendre sa place\" et passer dans l'\u00e9tat \"\u00e9lu\". Le processus qui vient de recevoir la ressource attendue ne va donc pas forc\u00e9ment pouvoir reprendre son ex\u00e9cution tout de suite, car pendant qu'il \u00e9tait dans un \u00e9tat \"bloqu\u00e9\" un autre processus a \"pris sa place\". Un processus qui quitte l'\u00e9tat bloqu\u00e9 ne repasse pas forc\u00e9ment \u00e0 l'\u00e9tat \"\u00e9lu\", il peut, en attendant que \"la place se lib\u00e8re\" passer dans l'\u00e9tat \"pr\u00eat\" (sous entendu \"j'ai obtenu ce que j'attendais, je suis pr\u00eat \u00e0 reprendre mon ex\u00e9cution d\u00e8s que la \"place sera lib\u00e9r\u00e9e\"\"). Le passage de l'\u00e9tat \"pr\u00eat\" vers l'\u00e9tat \"\u00e9lu\" constitue l'op\u00e9ration \"d'\u00e9lection\". Le passage de l'\u00e9tat \u00e9lu vers l'\u00e9tat bloqu\u00e9 est l'op\u00e9ration de \"blocage\". Un processus est toujours cr\u00e9\u00e9 dans l'\u00e9tat \"pr\u00eat\". Pour se terminer, un processus doit obligatoirement se trouver dans l'\u00e9tat \"\u00e9lu\". On peut r\u00e9sumer tout cela avec le diagramme suivant : Il est vraiment important de bien comprendre que le \"chef d'orchestre\" qui attribue aux processus leur \u00e9tat \"\u00e9lu\", \"bloqu\u00e9\" ou \"pr\u00eat\" est le syst\u00e8me d'exploitation. On dit que le syst\u00e8me g\u00e8re l'ordonnancement des processus (tel processus sera prioritaire sur tel autre...) Chose aussi \u00e0 ne pas perdre de vu : un processus qui utilise une ressource R doit la \"lib\u00e9rer\" une fois qu'il a fini de l'utiliser afin de la rendre disponible pour les autres processus. Pour lib\u00e9rer une ressource, un processus doit obligatoirement \u00eatre dans un \u00e9tat \"\u00e9lu\".","title":"2) \u00e9tats d'un processus"},{"location":"c19c/#3-creation-dun-processus","text":"Un processus peut cr\u00e9er un ou plusieurs processus \u00e0 l'aide d'une commande syst\u00e8me (\"fork\" sous les syst\u00e8mes de type Unix). Imaginons un processus A qui cr\u00e9e un processus B. On dira que A est le p\u00e8re de B et que B est le fils de A. B peut, \u00e0 son tour cr\u00e9\u00e9 un processus C (B sera le p\u00e8re de C et C le fils de B). On peut mod\u00e9liser ces relations p\u00e8re/fils par une structure arborescente (voir le cours si n\u00e9cessaire). Si un processus est cr\u00e9\u00e9 \u00e0 partir d'un autre processus, comment est cr\u00e9\u00e9 le tout premier processus ? Sous un syst\u00e8me d'exploitation comme Linux, au moment du d\u00e9marrage de l'ordinateur un tout premier processus (appel\u00e9 processus 0 ou encore Swapper) est cr\u00e9\u00e9 \u00e0 partir de \"rien\" (il n'est le fils d'aucun processus). Ensuite, ce processus 0 cr\u00e9e un processus souvent appel\u00e9 \"init\" (\"init\" est donc le fils du processus 0). \u00c0 partir de \"init\", les processus n\u00e9cessaires au bon fonctionnement du syst\u00e8me sont cr\u00e9\u00e9s (par exemple les processus \"crond\", \"inetd\", \"getty\",...). Puis d'autres processus sont cr\u00e9\u00e9s \u00e0 partir des fils de \"init\"... On peut r\u00e9sumer tout cela avec le sch\u00e9ma suivant : N. B. Tous ces noms de processus ne sont pas \u00e0 retenir, ils sont juste donn\u00e9s pour l'exemple. Il est juste n\u00e9cessaire d'avoir compris les notions de processus p\u00e8re et processus fils et la structure arborescente.","title":"3) cr\u00e9ation d'un processus"},{"location":"c19c/#4-pid-et-ppid","text":"Chaque processus poss\u00e8de un identifiant appel\u00e9 PID (Process Identification), ce PID est un nombre. Le premier processus cr\u00e9\u00e9 au d\u00e9marrage du syst\u00e8me \u00e0 pour PID 0, le second 1, le troisi\u00e8me 2... Le syst\u00e8me d'exploitation utilise un compteur qui est incr\u00e9ment\u00e9 de 1 \u00e0 chaque cr\u00e9ation de processus, le syst\u00e8me utilise ce compteur pour attribuer les PID aux processus. Chaque processus poss\u00e8de aussi un PPID (Parent Process Identification). Ce PPID permet de connaitre le processus parent d'un processus (par exemple le processus \"init\" vu ci-dessus \u00e0 un PID de 1 et un PPID de 0). \u00c0 noter que le processus 0 ne poss\u00e8de pas de PPID (c'est le seul dans cette situation).","title":"4) PID et PPID"},{"location":"c19c/#5-observer-les-processus","text":"Sous Linux il existe des commandes permettant de visualiser les processus : - la commande ps utilis\u00e9e avec les options aef ( ps -aef ) permet de visualiser les processus en cours un ordinateur, notamment les PID et les PPID de ces processus. Probl\u00e8me : La commande ps ne permet pas de suivre en temps r\u00e9el les processus (affichage fig\u00e9). - la commande top permet d'avoir un suivi en temps r\u00e9el des processus. - la commande kill permet de supprimer un processus. L'utilisation de cette commande est tr\u00e8s simple, il suffit de taper kill suivi du PID du processus \u00e0 supprimer (exemple : kill 4242 permet de supprimer le processus de PID 4242)","title":"5) observer les processus"},{"location":"c19c/#6-interblocage","text":"Pour terminer, nous allons maintenant \u00e9tudier le ph\u00e9nom\u00e8ne d'interblocage (deadlock en anglais). Soit 2 processus P1 et P2, soit 2 ressources R1 et R2. Initialement, les 2 ressources sont \"libres\" (utilis\u00e9es par aucun processus). Le processus P1 commence son ex\u00e9cution (\u00e9tat \u00e9lu), il demande la ressource R1. Il obtient satisfaction puisque R1 est libre, P1 est donc dans l'\u00e9tat \"pr\u00eat\". Pendant ce temps, le syst\u00e8me a pass\u00e9 P2 \u00e0 l'\u00e9tat \u00e9lu : P2 commence son ex\u00e9cution et demande la ressource R2. Il obtient imm\u00e9diatement R2 puisque cette ressource \u00e9tait libre. P2 repasse imm\u00e9diatement \u00e0 l'\u00e9tat \u00e9lu et poursuit son ex\u00e9cution (P1 lui est toujours dans l'\u00e9tat pr\u00eat). P2 demande la ressource R1, il se retrouve dans un \u00e9tat bloqu\u00e9 puisque la ressource R1 a \u00e9t\u00e9 attribu\u00e9e \u00e0 P1 : P1 est dans l'\u00e9tat pr\u00eat, il n'a pas eu l'occasion de lib\u00e9rer la ressource R1 puisqu'il n'a pas eu l'occasion d'utiliser R1 (pour utiliser R1, P1 doit \u00eatre dans l'\u00e9tat \u00e9lu). P2 \u00e9tant bloqu\u00e9 (en attente de R1), le syst\u00e8me passe P1 dans l'\u00e9tat \u00e9lu et avant de lib\u00e9rer R1, il demande \u00e0 utiliser R2. Probl\u00e8me : R2 n'a pas encore \u00e9t\u00e9 lib\u00e9r\u00e9 par P2, R2 n'est donc pas disponible, P1 se retrouve bloqu\u00e9. R\u00e9sumons la situation \u00e0 cet instant : P1 poss\u00e8de la ressource R1 et se trouve dans l'\u00e9tat bloqu\u00e9 (attente de R2), P2 poss\u00e8de la ressource R2 et se trouve dans l'\u00e9tat bloqu\u00e9 (attente de R1) Pour que P1 puisse poursuivre son ex\u00e9cution, il faut que P2 lib\u00e8re la ressource R2, mais P2 ne peut pas poursuivre son ex\u00e9cution (et donc lib\u00e9rer R2) puisqu'il est bloqu\u00e9 dans l'attente de R1. Pour que P2 puisse poursuivre son ex\u00e9cution, il faut que P1 lib\u00e8re la ressource R1, mais P1 ne peut pas poursuivre son ex\u00e9cution (et donc lib\u00e9rer R1) puisqu'il est bloqu\u00e9 dans l'attente de R2. Bref, la situation est totalement bloqu\u00e9e ! Cette situation est qualifi\u00e9e d'interblocage (deadlock en anglais). Il existe plusieurs solutions permettant soit de mettre fin \u00e0 un interblocage (cela passe par l'arr\u00eat d'un des 2 processus fautifs) ou d'\u00e9viter les interblocage, mais ces solutions ne seront pas \u00e9tudi\u00e9es ici.","title":"6) interblocage"},{"location":"c19e/","text":"exercices du bac Sujet 2 2021 Exercice 2 Sujet 3 2021 Exercice 4 Sujet 4 2021 Exercice 3 Sujet 5 2021 Exercice 2 Sujet 8 2021 Exercice 2 Sujet 1 2022 Exercice 2 Sujet 5 2022 Exercice 2 Sujet 13 2022 Exercice 4 Sujet 14 2022 Exercice 4","title":"Exercices"},{"location":"c19e/#exercices-du-bac","text":"Sujet 2 2021 Exercice 2 Sujet 3 2021 Exercice 4 Sujet 4 2021 Exercice 3 Sujet 5 2021 Exercice 2 Sujet 8 2021 Exercice 2 Sujet 1 2022 Exercice 2 Sujet 5 2022 Exercice 2 Sujet 13 2022 Exercice 4 Sujet 14 2022 Exercice 4","title":"exercices du bac"},{"location":"c19r/","text":"Ce qu\u2019il faut savoir on appelle processus un programme en cours d'ex\u00e9cution. 2 processus P1 et P2 peuvent \u00eatre amen\u00e9s \u00e0 partager une m\u00eame ressource R (fichiers\u2026) tous les syst\u00e8mes d'exploitation modernes (Linux, Windows, macOS, Android, iOS...) sont capables de g\u00e9rer l'ex\u00e9cution de plusieurs processus en m\u00eame temps. Mais pour \u00eatre pr\u00e9cis, cela n'est pas en v\u00e9ritable \"en m\u00eame temps\", mais plut\u00f4t un \"chacun son tour\". Pour g\u00e9rer ce \"chacun son tour\", les syst\u00e8mes d'exploitation attribuent des \"\u00e9tats\" au processus. Les processus peuvent se trouver dans 3 \u00e9tats diff\u00e9rents : pr\u00eat (pr\u00eat \u00e0 \u00eatre ex\u00e9cut\u00e9) \u00e9lu (en cours d\u2019ex\u00e9cution) bloqu\u00e9 (attente d\u2019une ressource) le syst\u00e8me d\u2019exploitation g\u00e8re l'ordonnancement des processus (priorit\u00e9 d'ex\u00e9cution...) chaque processus est cr\u00e9\u00e9 par un autre processus (sauf le tout premier qui est cr\u00e9\u00e9 au d\u00e9marrage du syst\u00e8me d\u2019exploitation). Si un processus P cr\u00e9e un processus P\u2019, on dira que P est le p\u00e8re de P\u2019. chaque processus poss\u00e8de un identifiant : le PID (Process Identification) chaque processus poss\u00e8de aussi un PPID (Parent Process Identification), le PPID permet de conna\u00eetre le processus parent d'un processus dans certaines conditions, 2 processus (ou plus) peuvent se trouver en situation d\u2019interblocage (deadlock en anglais) Ce qu\u2019il faut savoir faire vous devez savoir utiliser les commandes Unix qui permettent de : visualiser les processus en cours (ps -aef, top\u2026) supprimer un processus (kill)","title":"R\u00e9vision"},{"location":"c19r/#ce-quil-faut-savoir","text":"on appelle processus un programme en cours d'ex\u00e9cution. 2 processus P1 et P2 peuvent \u00eatre amen\u00e9s \u00e0 partager une m\u00eame ressource R (fichiers\u2026) tous les syst\u00e8mes d'exploitation modernes (Linux, Windows, macOS, Android, iOS...) sont capables de g\u00e9rer l'ex\u00e9cution de plusieurs processus en m\u00eame temps. Mais pour \u00eatre pr\u00e9cis, cela n'est pas en v\u00e9ritable \"en m\u00eame temps\", mais plut\u00f4t un \"chacun son tour\". Pour g\u00e9rer ce \"chacun son tour\", les syst\u00e8mes d'exploitation attribuent des \"\u00e9tats\" au processus. Les processus peuvent se trouver dans 3 \u00e9tats diff\u00e9rents : pr\u00eat (pr\u00eat \u00e0 \u00eatre ex\u00e9cut\u00e9) \u00e9lu (en cours d\u2019ex\u00e9cution) bloqu\u00e9 (attente d\u2019une ressource) le syst\u00e8me d\u2019exploitation g\u00e8re l'ordonnancement des processus (priorit\u00e9 d'ex\u00e9cution...) chaque processus est cr\u00e9\u00e9 par un autre processus (sauf le tout premier qui est cr\u00e9\u00e9 au d\u00e9marrage du syst\u00e8me d\u2019exploitation). Si un processus P cr\u00e9e un processus P\u2019, on dira que P est le p\u00e8re de P\u2019. chaque processus poss\u00e8de un identifiant : le PID (Process Identification) chaque processus poss\u00e8de aussi un PPID (Parent Process Identification), le PPID permet de conna\u00eetre le processus parent d'un processus dans certaines conditions, 2 processus (ou plus) peuvent se trouver en situation d\u2019interblocage (deadlock en anglais)","title":"Ce qu\u2019il faut savoir"},{"location":"c19r/#ce-quil-faut-savoir-faire","text":"vous devez savoir utiliser les commandes Unix qui permettent de : visualiser les processus en cours (ps -aef, top\u2026) supprimer un processus (kill)","title":"Ce qu\u2019il faut savoir faire"},{"location":"c1a/","text":"activit\u00e9 1.1 Trouvez des exemples de domaines d'activit\u00e9 o\u00f9 les bases de donn\u00e9es jouent un r\u00f4le primordial.","title":"Activit\u00e9s"},{"location":"c1a/#activite-11","text":"Trouvez des exemples de domaines d'activit\u00e9 o\u00f9 les bases de donn\u00e9es jouent un r\u00f4le primordial.","title":"activit\u00e9 1.1"},{"location":"c1c/","text":"1) Introduction L'ann\u00e9e derni\u00e8re nous avons eu l'occasion de travailler sur des donn\u00e9es structur\u00e9es en les stockant dans des fichiers au format CSV. M\u00eame si cette m\u00e9thode de stockage de l'information peut s'av\u00e9rer pratique dans certains cas pr\u00e9cis, il est souvent souhaitable d'utiliser une base de donn\u00e9es pour stocker des donn\u00e9es. Le terme base de donn\u00e9es est apparu au d\u00e9but des ann\u00e9es 60. C'est l'apparition des disques durs \u00e0 la fin des ann\u00e9es 50 qui a permis d'utiliser les ordinateurs pour stocker et manipuler des donn\u00e9es. Avec l'apparition du Web, la quantit\u00e9 de donn\u00e9es \u00e0 stocker a litt\u00e9ralement explos\u00e9. Aujourd'hui, la plupart des sites internet (du petit site personnel au grand site d'e-commerce) utilisent au moins une base de donn\u00e9es. Les bases de donn\u00e9es jouent un r\u00f4le fondamental dans notre monde devenu num\u00e9rique o\u00f9 il est extr\u00eamement facile de dupliquer l'information. Voil\u00e0 pourquoi nous allons cette ann\u00e9e les \u00e9tudier. 2) Les syst\u00e8mes de gestion de base de donn\u00e9es Dans une base de donn\u00e9es, l'information est stock\u00e9e dans des fichiers, mais \u00e0 la diff\u00e9rence des fichiers au format CSV, il n'est pas possible de travailler sur ces donn\u00e9es avec un simple \u00e9diteur de texte. Pour manipuler les donn\u00e9es pr\u00e9sentes dans une base de donn\u00e9es (\u00e9crire, lire ou encore modifier), il est n\u00e9cessaire d'utiliser un type de logiciel appel\u00e9 \"syst\u00e8me de gestion de base de donn\u00e9es\" tr\u00e8s souvent abr\u00e9g\u00e9 en SGBD. Il existe une multitude de SGBD : des gratuites, des payantes, des libres ou bien encore des propri\u00e9taires. Les SGBD permettent de grandement simplifier la gestion des bases de donn\u00e9es : les SGBD permettent de g\u00e9rer la lecture, l'\u00e9criture ou la modification des informations contenues dans une base de donn\u00e9es les SGBD permettent de g\u00e9rer les autorisations d'acc\u00e8s \u00e0 une base de donn\u00e9es. Il est en effet souvent n\u00e9cessaire de contr\u00f4ler les acc\u00e8s par exemple en permettant \u00e0 l'utilisateur A de lire et d'\u00e9crire dans la base de donn\u00e9es alors que l'utilisateur B aura uniquement la possibilit\u00e9 de lire les informations contenues dans cette m\u00eame base de donn\u00e9es. les fichiers des bases de donn\u00e9es sont stock\u00e9s sur des disques durs dans des ordinateurs, ces ordinateurs peuvent subir des pannes. Il est souvent n\u00e9cessaire que l'acc\u00e8s aux informations contenues dans une base de donn\u00e9es soit maintenu, m\u00eame en cas de panne mat\u00e9rielle. Les bases de donn\u00e9es sont donc dupliqu\u00e9es sur plusieurs ordinateurs afin qu'en cas de panne d'un ordinateur A, un ordinateur B contenant une copie de la base de donn\u00e9es pr\u00e9sente dans A, puisse prendre le relais. Tout cela est tr\u00e8s complexe \u00e0 g\u00e9rer, en effet toute modification de la base de donn\u00e9es pr\u00e9sente sur l'ordinateur A doit entrainer la m\u00eame modification de la base de donn\u00e9es pr\u00e9sente sur l'ordinateur B. Cette synchronisation entre A et B doit se faire le plus rapidement possible, il est fondamental d'avoir des copies parfaitement identiques en permanence. Ce sont aussi les SGBD qui assurent la maintenance des diff\u00e9rentes copies de la base de donn\u00e9es. plusieurs personnes peuvent avoir besoin d'acc\u00e9der aux informations contenues dans une base donn\u00e9es en m\u00eame temps. Cela peut parfois poser probl\u00e8me, notamment si les 2 personnes d\u00e9sirent modifier la m\u00eame donn\u00e9e au m\u00eame moment (on parle d'acc\u00e8s concurrent). Ces probl\u00e8mes d'acc\u00e8s concurrent sont aussi g\u00e9r\u00e9s par les SGBD. Comme nous venons de la voir, les SGBD jouent un r\u00f4le fondamental. L'utilisation des SGBD explique en partie la sup\u00e9riorit\u00e9 de l'utilisation des bases de donn\u00e9es sur des solutions plus simples \u00e0 mettre en oeuvre; mais aussi beaucoup plus limit\u00e9es comme les fichiers au format CSV.","title":"Cours"},{"location":"c1c/#1-introduction","text":"L'ann\u00e9e derni\u00e8re nous avons eu l'occasion de travailler sur des donn\u00e9es structur\u00e9es en les stockant dans des fichiers au format CSV. M\u00eame si cette m\u00e9thode de stockage de l'information peut s'av\u00e9rer pratique dans certains cas pr\u00e9cis, il est souvent souhaitable d'utiliser une base de donn\u00e9es pour stocker des donn\u00e9es. Le terme base de donn\u00e9es est apparu au d\u00e9but des ann\u00e9es 60. C'est l'apparition des disques durs \u00e0 la fin des ann\u00e9es 50 qui a permis d'utiliser les ordinateurs pour stocker et manipuler des donn\u00e9es. Avec l'apparition du Web, la quantit\u00e9 de donn\u00e9es \u00e0 stocker a litt\u00e9ralement explos\u00e9. Aujourd'hui, la plupart des sites internet (du petit site personnel au grand site d'e-commerce) utilisent au moins une base de donn\u00e9es. Les bases de donn\u00e9es jouent un r\u00f4le fondamental dans notre monde devenu num\u00e9rique o\u00f9 il est extr\u00eamement facile de dupliquer l'information. Voil\u00e0 pourquoi nous allons cette ann\u00e9e les \u00e9tudier.","title":"1) Introduction"},{"location":"c1c/#2-les-systemes-de-gestion-de-base-de-donnees","text":"Dans une base de donn\u00e9es, l'information est stock\u00e9e dans des fichiers, mais \u00e0 la diff\u00e9rence des fichiers au format CSV, il n'est pas possible de travailler sur ces donn\u00e9es avec un simple \u00e9diteur de texte. Pour manipuler les donn\u00e9es pr\u00e9sentes dans une base de donn\u00e9es (\u00e9crire, lire ou encore modifier), il est n\u00e9cessaire d'utiliser un type de logiciel appel\u00e9 \"syst\u00e8me de gestion de base de donn\u00e9es\" tr\u00e8s souvent abr\u00e9g\u00e9 en SGBD. Il existe une multitude de SGBD : des gratuites, des payantes, des libres ou bien encore des propri\u00e9taires. Les SGBD permettent de grandement simplifier la gestion des bases de donn\u00e9es : les SGBD permettent de g\u00e9rer la lecture, l'\u00e9criture ou la modification des informations contenues dans une base de donn\u00e9es les SGBD permettent de g\u00e9rer les autorisations d'acc\u00e8s \u00e0 une base de donn\u00e9es. Il est en effet souvent n\u00e9cessaire de contr\u00f4ler les acc\u00e8s par exemple en permettant \u00e0 l'utilisateur A de lire et d'\u00e9crire dans la base de donn\u00e9es alors que l'utilisateur B aura uniquement la possibilit\u00e9 de lire les informations contenues dans cette m\u00eame base de donn\u00e9es. les fichiers des bases de donn\u00e9es sont stock\u00e9s sur des disques durs dans des ordinateurs, ces ordinateurs peuvent subir des pannes. Il est souvent n\u00e9cessaire que l'acc\u00e8s aux informations contenues dans une base de donn\u00e9es soit maintenu, m\u00eame en cas de panne mat\u00e9rielle. Les bases de donn\u00e9es sont donc dupliqu\u00e9es sur plusieurs ordinateurs afin qu'en cas de panne d'un ordinateur A, un ordinateur B contenant une copie de la base de donn\u00e9es pr\u00e9sente dans A, puisse prendre le relais. Tout cela est tr\u00e8s complexe \u00e0 g\u00e9rer, en effet toute modification de la base de donn\u00e9es pr\u00e9sente sur l'ordinateur A doit entrainer la m\u00eame modification de la base de donn\u00e9es pr\u00e9sente sur l'ordinateur B. Cette synchronisation entre A et B doit se faire le plus rapidement possible, il est fondamental d'avoir des copies parfaitement identiques en permanence. Ce sont aussi les SGBD qui assurent la maintenance des diff\u00e9rentes copies de la base de donn\u00e9es. plusieurs personnes peuvent avoir besoin d'acc\u00e9der aux informations contenues dans une base donn\u00e9es en m\u00eame temps. Cela peut parfois poser probl\u00e8me, notamment si les 2 personnes d\u00e9sirent modifier la m\u00eame donn\u00e9e au m\u00eame moment (on parle d'acc\u00e8s concurrent). Ces probl\u00e8mes d'acc\u00e8s concurrent sont aussi g\u00e9r\u00e9s par les SGBD. Comme nous venons de la voir, les SGBD jouent un r\u00f4le fondamental. L'utilisation des SGBD explique en partie la sup\u00e9riorit\u00e9 de l'utilisation des bases de donn\u00e9es sur des solutions plus simples \u00e0 mettre en oeuvre; mais aussi beaucoup plus limit\u00e9es comme les fichiers au format CSV.","title":"2) Les  syst\u00e8mes de gestion de base de donn\u00e9es"},{"location":"c1r/","text":"Ce qu\u2019il faut savoir Les bases de donn\u00e9es permettent de stocker des donn\u00e9es. Pour manipuler les donn\u00e9es pr\u00e9sentes dans une base de donn\u00e9es (\u00e9crire, lire ou encore modifier), il est n\u00e9cessaire d'utiliser un type de logiciel appel\u00e9 \"syst\u00e8me de gestion de base de donn\u00e9es\" tr\u00e8s souvent abr\u00e9g\u00e9 en SGBD. Les SGBD permettent de g\u00e9rer la lecture, l'\u00e9criture ou la modification des informations contenues dans une base de donn\u00e9es les SGBD permettent de g\u00e9rer les autorisations d'acc\u00e8s \u00e0 une base de donn\u00e9es. les SGBD assurent la maintenance des diff\u00e9rentes copies de la base de donn\u00e9es (en cas de panne d\u2019un ordinateur), on parle de redondance des donn\u00e9es. les probl\u00e8mes d'acc\u00e8s concurrent (plusieurs personnes connect\u00e9es en m\u00eame temps) sont g\u00e9r\u00e9s par les SGBD. Par rapport \u00e0 une base de donn\u00e9es, le stockage de donn\u00e9es dans un fichier de type CSV est beaucoup plus simple \u00e0 mettre en place, mais aussi beaucoup plus limit\u00e9 : pas de contr\u00f4le d\u2019acc\u00e8s, pas de redondance des donn\u00e9es, pas de gestion des acc\u00e8s concurrents.","title":"R\u00e9vision"},{"location":"c1r/#ce-quil-faut-savoir","text":"Les bases de donn\u00e9es permettent de stocker des donn\u00e9es. Pour manipuler les donn\u00e9es pr\u00e9sentes dans une base de donn\u00e9es (\u00e9crire, lire ou encore modifier), il est n\u00e9cessaire d'utiliser un type de logiciel appel\u00e9 \"syst\u00e8me de gestion de base de donn\u00e9es\" tr\u00e8s souvent abr\u00e9g\u00e9 en SGBD. Les SGBD permettent de g\u00e9rer la lecture, l'\u00e9criture ou la modification des informations contenues dans une base de donn\u00e9es les SGBD permettent de g\u00e9rer les autorisations d'acc\u00e8s \u00e0 une base de donn\u00e9es. les SGBD assurent la maintenance des diff\u00e9rentes copies de la base de donn\u00e9es (en cas de panne d\u2019un ordinateur), on parle de redondance des donn\u00e9es. les probl\u00e8mes d'acc\u00e8s concurrent (plusieurs personnes connect\u00e9es en m\u00eame temps) sont g\u00e9r\u00e9s par les SGBD. Par rapport \u00e0 une base de donn\u00e9es, le stockage de donn\u00e9es dans un fichier de type CSV est beaucoup plus simple \u00e0 mettre en place, mais aussi beaucoup plus limit\u00e9 : pas de contr\u00f4le d\u2019acc\u00e8s, pas de redondance des donn\u00e9es, pas de gestion des acc\u00e8s concurrents.","title":"Ce qu\u2019il faut savoir"},{"location":"c2a/","text":"activit\u00e9 2.1 Soit la relation suivante : id titre auteur ann_publi note 1 1984 Orwell 1949 10 2 Dune Herbert 1965 8 3 Fondation Asimov 1951 9 Faites la liste des \u00e9l\u00e9ments appartenant \u00e0 l'attribut \"auteur\". activit\u00e9 2.2 Soit la relation suivante : id titre auteur ann_publi note 1 1984 Orwell 1949 10 2 Dune Herbert 1965 8 3 Fondation Asimov 1951 9 Quel est, selon vous, le domaine de l'attribut \"auteur\" ? activit\u00e9 2.3 Voici un extrait d'une relation r\u00e9f\u00e9ren\u00e7ant des films : id titre realisateur ann_sortie note_sur_10 1 Alien, le huiti\u00e8me passager Scott 1979 10 2 Dune Lynch 1985 5 3 2001 : l'odyss\u00e9e de l'espace Kubrick 1968 9 4 Blade Runner Scott 1982 10 Listez les diff\u00e9rents attributs de cette relation. Donnez le domaine de chaque attribut. Pour chaque attribut dire si cet attribut peut jouer le r\u00f4le de cl\u00e9 primaire, vous n'oublierez pas de justifier vos r\u00e9ponses. activit\u00e9 2.4 En partant de la relation FILMS ci-dessous, cr\u00e9ez une relation REALISATEURS (attributs de la relation REALISATEURS : id, nom, prenom et ann_naissance, vous trouverez toutes les informations n\u00e9cessaires sur le Web). Modifiez ensuite la relation FILMS afin d'\u00e9tablir un lien entre les relations FILMS et REALISATEURS. Vous pr\u00e9ciserez l'attribut qui jouera le r\u00f4le de cl\u00e9 \u00e9trang\u00e8re. id titre realisateur ann_sortie note_sur_10 1 Alien, le huiti\u00e8me passager Scott 1979 10 2 Dune Lynch 1985 5 3 2001 : l'odyss\u00e9e de l'espace Kubrick 1968 9 4 Blade Runner Scott 1982 10 activit\u00e9 2.5 Donnez le sch\u00e9ma relationnel de la base de donn\u00e9es que vous avez d\u00e9fini dans l'activit\u00e9 2.4","title":"Activit\u00e9s"},{"location":"c2a/#activite-21","text":"Soit la relation suivante : id titre auteur ann_publi note 1 1984 Orwell 1949 10 2 Dune Herbert 1965 8 3 Fondation Asimov 1951 9 Faites la liste des \u00e9l\u00e9ments appartenant \u00e0 l'attribut \"auteur\".","title":"activit\u00e9 2.1"},{"location":"c2a/#activite-22","text":"Soit la relation suivante : id titre auteur ann_publi note 1 1984 Orwell 1949 10 2 Dune Herbert 1965 8 3 Fondation Asimov 1951 9 Quel est, selon vous, le domaine de l'attribut \"auteur\" ?","title":"activit\u00e9 2.2"},{"location":"c2a/#activite-23","text":"Voici un extrait d'une relation r\u00e9f\u00e9ren\u00e7ant des films : id titre realisateur ann_sortie note_sur_10 1 Alien, le huiti\u00e8me passager Scott 1979 10 2 Dune Lynch 1985 5 3 2001 : l'odyss\u00e9e de l'espace Kubrick 1968 9 4 Blade Runner Scott 1982 10 Listez les diff\u00e9rents attributs de cette relation. Donnez le domaine de chaque attribut. Pour chaque attribut dire si cet attribut peut jouer le r\u00f4le de cl\u00e9 primaire, vous n'oublierez pas de justifier vos r\u00e9ponses.","title":"activit\u00e9 2.3"},{"location":"c2a/#activite-24","text":"En partant de la relation FILMS ci-dessous, cr\u00e9ez une relation REALISATEURS (attributs de la relation REALISATEURS : id, nom, prenom et ann_naissance, vous trouverez toutes les informations n\u00e9cessaires sur le Web). Modifiez ensuite la relation FILMS afin d'\u00e9tablir un lien entre les relations FILMS et REALISATEURS. Vous pr\u00e9ciserez l'attribut qui jouera le r\u00f4le de cl\u00e9 \u00e9trang\u00e8re. id titre realisateur ann_sortie note_sur_10 1 Alien, le huiti\u00e8me passager Scott 1979 10 2 Dune Lynch 1985 5 3 2001 : l'odyss\u00e9e de l'espace Kubrick 1968 9 4 Blade Runner Scott 1982 10","title":"activit\u00e9 2.4"},{"location":"c2a/#activite-25","text":"Donnez le sch\u00e9ma relationnel de la base de donn\u00e9es que vous avez d\u00e9fini dans l'activit\u00e9 2.4","title":"activit\u00e9 2.5"},{"location":"c2c/","text":"1) introduction Il existe diff\u00e9rents types de bases de donn\u00e9es, par exemple, les bases de donn\u00e9es hi\u00e9rarchiques, les bases de donn\u00e9es objet, les bases de donn\u00e9es nosql ou bien encore les bases de donn\u00e9es relationnelles. Les bases de donn\u00e9es relationnelles sont le plus utilis\u00e9es au monde, c'est ce type de base de donn\u00e9es que nous allons \u00e9tudier. Les bases de donn\u00e9es relationnelles ont \u00e9t\u00e9 mises au point en 1970 par Edgar Franck Codd, informaticien britannique (1923-2003). Ces bases de donn\u00e9es sont bas\u00e9es sur la th\u00e9orie math\u00e9matique des ensembles. 2) relation La notion de relation est au coeur des bases de donn\u00e9es relationnelles. Une relation peut \u00eatre vue comme un tableau \u00e0 2 dimensions, compos\u00e9 d'un en-t\u00eate et d'un corps. Le corps est lui-m\u00eame compos\u00e9 de t-uplets (lignes) et d'attributs (colonnes). L'en-t\u00eate contient les intitul\u00e9s des attributs, le corps contient les donn\u00e9es proprement dites. \u00c0 noter que l'on emploie aussi le terme \"table\" \u00e0 la place de \"relation\". Voici un exemple de relation : Le t-uplet encadr\u00e9 en jaune sur le sch\u00e9ma ci-dessus contient les \u00e9l\u00e9ments suivant : 11, La Plan\u00e8te des singes, Boulle, 1963 et 8. L'attribut \"titre\" est compos\u00e9 des \u00e9l\u00e9ments suivants : 1984, Dune, Fondation, Le meilleur des mondes, Fahrenheit 451, Ubik, Chroniques martiennes, La nuit des temps, Blade Runner, Les Robots, La Plan\u00e8te des singes, Ravage, Le Ma\u00eetre du Haut Ch\u00e2teau, Le monde des \u0100, La Fin de l\u2019\u00e9ternit\u00e9 et De la Terre \u00e0 la Lune. 3) domaine Pour chaque attribut d'une relation, il est n\u00e9cessaire de d\u00e9finir un domaine : Le domaine d'un attribut donn\u00e9 correspond \u00e0 un ensemble fini ou infini de valeurs admissibles. Par exemple, le domaine de l'attribut \"id\" correspond \u00e0 l'ensemble des entiers (not\u00e9 INT) : la colonne \"id\" devra obligatoirement contenir des entiers. Autre exemple, le domaine de l'attribut \"titre\" correspond \u00e0 l'ensemble des cha\u00eenes de caract\u00e8res (not\u00e9 TEXT). Dernier exemple, le domaine de l'attribut \"note\" correspond \u00e0 l'ensemble des entiers positifs. Au moment de la cr\u00e9ation d'une relation, il est n\u00e9cessaire de renseigner le domaine de chaque attribut. Le SGBD s'assure qu'un \u00e9l\u00e9ment ajout\u00e9 \u00e0 une relation respecte bien le domaine de l'attribut correspondant : si par exemple vous essayez d'ajouter une note non enti\u00e8re (par exemple 8.5), le SGBD signalera cette erreur et n'autorisera pas l'\u00e9criture de cette nouvelle donn\u00e9e. 4) cl\u00e9 primaire Autre contrainte tr\u00e8s importante dans les bases de donn\u00e9es relationnelles, une relation ne peut pas contenir 2 t-uplets identiques. Par exemple, la situation ci-dessous n'est pas autoris\u00e9e (ici aussi c'est le SGBD qui veille au grain) : id titre auteur ann_publi note 1 1984 Orwell 1949 10 2 Dune Herbert 1965 8 2 Dune Herbert 1965 8 3 Fondation Asimov 1951 9 Afin d'\u00eatre s\u00fbr de respecter cette contrainte des t-uplets identiques, on d\u00e9finit la notion de \"cl\u00e9 primaire\". Une cl\u00e9 primaire est un attribut dont la valeur permet d'identifier de mani\u00e8re unique un t-uplet de la relation. Autrement dit, si un attribut est consid\u00e9r\u00e9 comme cl\u00e9 primaire, on ne doit pas trouver dans toute la relation 2 fois la m\u00eame valeur pour cet attribut. Si on se r\u00e9f\u00e8re \u00e0 l'exemple de la relation ci-dessous : id titre auteur ann_publi note 1 1984 Orwell 1949 10 2 Dune Herbert 1965 8 3 Fondation Asimov 1951 9 4 Le meilleur des mondes Huxley 1931 7 5 Fahrenheit 451 Bradbury 1953 7 6 Ubik K.Dick 1969 9 7 Chroniques martiennes Bradbury 1950 8 8 La nuit des temps Barjavel 1968 7 9 Blade Runner K.Dick 1968 8 10 Les Robots Asimov 1950 9 11 La Plan\u00e8te des singes Boulle 1963 8 12 Ravage Barjavel 1943 8 13 Le Ma\u00eetre du Haut Ch\u00e2teau K.Dick 1962 8 14 Le monde des \u0100 Van Vogt 1945 7 15 La Fin de l\u2019\u00e9ternit\u00e9 Asimov 1955 8 16 De la Terre \u00e0 la Lune Verne 1865 10 L'attribut \"note\" peut-il jouer le r\u00f4le de cl\u00e9 primaire ? Non, car il est possible de trouver 2 fois la m\u00eame note. L'attribut \"ann_publi\" peut-il jouer le r\u00f4le de cl\u00e9 primaire ? Non, car il est possible de trouver 2 fois la m\u00eame ann\u00e9e. L'attribut \"auteur\" peut-il jouer le r\u00f4le de cl\u00e9 primaire ? Non, car il est possible de trouver 2 fois le m\u00eame auteur. L'attribut \"titre\" peut-il jouer le r\u00f4le de cl\u00e9 primaire ? A priori oui, car l'attribut \"titre\" ne comporte pas 2 fois le m\u00eame titre de roman. Mais, ce n'est pas forc\u00e9ment une bonne id\u00e9e, car il est tout \u00e0 fait possible d'avoir un m\u00eame titre pour 2 romans diff\u00e9rents. Par exemple, en 2013, l\u2019Am\u00e9ricaine Jill McCorkle et l\u2019Anglaise Kate Atkison publiaient avec seulement six jours d\u2019\u00e9cart un livre intitul\u00e9 \"Life After Life\" ! Il nous reste donc l'attribut \"id\". En fait, l'attribut \"id\" (\"id\" comme \"identifiant\") a \u00e9t\u00e9 plac\u00e9 l\u00e0 pour jouer le r\u00f4le de cl\u00e9 primaire. En effet, \u00e0 chaque fois qu'un roman est ajout\u00e9 \u00e0 la relation, son \"id\" correspond \u00e0 l'incr\u00e9mentation de l'id (id du nouveau=id de l'ancien+1) du roman pr\u00e9c\u00e9demment ajout\u00e9. Il est donc impossible d'avoir deux romans avec le m\u00eame id. Ajouter un attribut \"id\" afin qu'il puisse jouer le r\u00f4le de cl\u00e9 primaire est une pratique courante (mais non obligatoire) dans les bases de donn\u00e9es relationnelles. Dans le cas pr\u00e9cis qui nous int\u00e9resse, il aurait \u00e9t\u00e9 possible de ne pas utiliser d'attribut \"id\", car chaque livre \u00e9dit\u00e9 poss\u00e8de un num\u00e9ro qui lui est propre : l'ISBN, cet ISBN aurait donc pu jouer le r\u00f4le de cl\u00e9 primaire. \u00c0 noter qu'en toute rigueur, une cl\u00e9 primaire peut \u00eatre constitu\u00e9e de plusieurs attributs, par exemple le couple \"auteur\" + \"titre\" pourrait jouer le r\u00f4le de cl\u00e9 primaire (\u00e0 moins qu'un auteur \u00e9crive 2 romans diff\u00e9rents, mais portant tous les deux le m\u00eame titre), mais nous n'\u00e9tudierons pas cet aspect des choses ici. 5) cl\u00e9 \u00e9trang\u00e8re a) duplication des donn\u00e9es Nous d\u00e9sirons maintenant un peu enrichir la relation LIVRES en ajoutant des informations suppl\u00e9mentaires sur les auteurs, nous obtenons alors : id titre nom_auteur prenom_auteur date_nai_auteur langue_ecriture_auteur ann_publi note 1 1984 Orwell George 1903 anglais 1949 10 2 Dune Herbert Frank 1920 anglais 1965 8 3 Fondation Asimov Isaac 1920 anglais 1951 9 4 Le meilleur des mondes Huxley Aldous 1894 anglais 1931 7 5 Fahrenheit 451 Bradbury Ray 1920 anglais 1953 7 6 Ubik K.Dick Philip 1928 anglais 1969 9 7 Chroniques martiennes Bradbury Ray 1920 anglais 1950 8 8 La nuit des temps Barjavel Ren\u00e9 1911 fran\u00e7ais 1968 7 9 Blade Runner K.Dick Philip 1928 anglais 1968 8 10 Les Robots Asimov Isaac 1920 anglais 1950 9 11 La Plan\u00e8te des singes Boulle Pierre 1912 fran\u00e7ais 1963 8 12 Ravage Barjavel Ren\u00e9 1911 fran\u00e7ais 1943 8 13 Le Ma\u00eetre du Haut Ch\u00e2teau K.Dick Philip 1928 anglais 1962 8 14 Le monde des \u0100 Van Vogt Alfred Elton 1912 anglais 1945 7 15 La Fin de l\u2019\u00e9ternit\u00e9 Asimov Isaac 1920 anglais 1955 8 16 De la Terre \u00e0 la Lune Verne Jules 1828 fran\u00e7ais 1865 10 Nous avons ajout\u00e9 3 attributs (\"prenom_auteur\", \"date_nai_auteur\" et \"langue_ecriture_auteur\"). Nous avons aussi renomm\u00e9 l'attribut \"auteur\" en \"nom_auteur\". Comme vous l'avez peut-\u00eatre remarqu\u00e9, il y a pas mal d'informations dupliqu\u00e9es, par exemple, on retrouve 3 fois \"K.Dick Philip 1928 anglais\", m\u00eame chose pour \"Asimov Isaac 1920 anglais\"...Cette duplication est-elle indispensable ? Non ! Est-elle souhaitable ? Non plus ! En effet, dans une base de donn\u00e9es, on \u00e9vite autant que possible de dupliquer l'information (sauf \u00e0 des fins de sauvegarde, mais ici c'est toute autre chose). Si nous dupliquons autant de donn\u00e9es inutilement c'est que notre structure ne doit pas \u00eatre la bonne ! Mais alors, comment faire pour avoir aussi des informations sur les auteurs des livres ? b) notion de cl\u00e9 \u00e9trang\u00e8re La solution est relativement simple : travailler avec 2 relations au lieu d'une seule et cr\u00e9er un \"lien\" entre ces 2 relations : Table: Relation AUTEURS id nom prenom ann_naissance langue_ecriture 1 Orwell George 1903 anglais 2 Herbert Frank 1920 anglais 3 Asimov Isaac 1920 anglais 4 Huxley Aldous 1894 anglais 5 Bradbury Ray 1920 anglais 6 K.Dick Philip 1928 anglais 7 Barjavel Ren\u00e9 1911 fran\u00e7ais 8 Boulle Pierre 1912 fran\u00e7ais 9 Van Vogt Alfred Elton 1912 anglais 10 Verne Jules 1828 fran\u00e7ais Table: Relation LIVRES id titre id_auteur ann_publi note 1 1984 1 1949 10 2 Dune 2 1965 8 3 Fondation 3 1951 9 4 Le meilleur des mondes 4 1931 7 5 Fahrenheit 451 5 1953 7 6 Ubik 6 1969 9 7 Chroniques martiennes 5 1950 8 8 La nuit des temps 7 1968 7 9 Blade Runner 6 1968 8 10 Les Robots 3 1950 9 11 La Plan\u00e8te des singes 8 1963 8 12 Ravage 7 1943 8 13 Le Ma\u00eetre du Haut Ch\u00e2teau 6 1962 8 14 Le monde des \u0100 9 1945 7 15 La Fin de l\u2019\u00e9ternit\u00e9 3 1955 8 16 De la Terre \u00e0 la Lune 10 1865 10 Nous avons cr\u00e9\u00e9 une relation AUTEURS et nous avons modifi\u00e9 la relation LIVRES : nous avons remplac\u00e9 l'attribut \"auteur\" par un attribut \"id_auteur\". Comme vous l'avez sans doute remarqu\u00e9, l'attribut \"id_auteur\" de la relation LIVRES permet de cr\u00e9er un lien avec la relation AUTEURS. \"id_auteur\" correspond \u00e0 l'attribut \"id\" de la relation AUTEURS. L'introduction d'une relation AUTEURS et la mise en place de liens entre cette relation et la relation LIVRES permettent d'\u00e9viter la redondance d'informations. Pour \u00e9tablir un lien entre 2 relations RA et RB, on ajoute \u00e0 RA un attribut x qui prendra les valeurs de la cl\u00e9 primaire de RB. Cet attribut x est appel\u00e9 cl\u00e9 \u00e9trang\u00e8re (l'attribut correspond \u00e0 la cl\u00e9 primaire d'une autre table, d'o\u00f9 le nom). Dans l'exemple ci-dessus, l'attribut \"id_auteur\" de la relation LIVRES permet bien d'\u00e9tablir un lien entre la relation LIVRES et la relation AUTEURS, \"id_auteur\" correspond bien \u00e0 la cl\u00e9 primaire de la relation AUTEURS, conclusion : \"id_auteur\" est une cl\u00e9 \u00e9trang\u00e8re. Pour pr\u00e9server l'int\u00e9grit\u00e9 d'une base de donn\u00e9es, il est important de bien v\u00e9rifier que toutes les valeurs de la cl\u00e9 \u00e9trang\u00e8re correspondent bien \u00e0 des valeurs pr\u00e9sentes dans la cl\u00e9 primaire (nous aurions un probl\u00e8me d'int\u00e9grit\u00e9 de la base de donn\u00e9es si une valeur de l'attribut \"id_auteur\" de la relation LIVRES ne correspondait \u00e0 aucune valeur de la cl\u00e9 primaire de la relation AUTEURS). Certains SGBD ne v\u00e9rifient pas cette contrainte (ne renvoient aucune erreur en cas de probl\u00e8me), ce qui peut provoquer des comportements erratiques. 6) sch\u00e9ma relationnel Derni\u00e8re d\u00e9finition, on appelle sch\u00e9ma relationnel l'ensemble des relations pr\u00e9sentes dans une base de donn\u00e9es. Quand on vous demande le sch\u00e9ma relationnel d'une base de donn\u00e9es, il est n\u00e9cessaire de fournir les informations suivantes : Les noms des diff\u00e9rentes relations pour chaque relation, la liste des attributs avec leur domaine respectif pour chaque relation, la cl\u00e9 primaire et \u00e9ventuellement les cl\u00e9s \u00e9trang\u00e8res Voici un exemple pour les relations LIVRES et AUTEURS : AUTEURS( id : INT, nom : TEXT, prenom : TEXT, ann_naissance : INT, langue_ecriture : TEXT) LIVRES( id : INT, titre : TEXT, #id_auteur : INT, ann_publi : INT, note : INT) Les attributs soulign\u00e9s sont des cl\u00e9s primaires, le # signifie que l'on a une cl\u00e9 \u00e9trang\u00e8re.","title":"Cours"},{"location":"c2c/#1-introduction","text":"Il existe diff\u00e9rents types de bases de donn\u00e9es, par exemple, les bases de donn\u00e9es hi\u00e9rarchiques, les bases de donn\u00e9es objet, les bases de donn\u00e9es nosql ou bien encore les bases de donn\u00e9es relationnelles. Les bases de donn\u00e9es relationnelles sont le plus utilis\u00e9es au monde, c'est ce type de base de donn\u00e9es que nous allons \u00e9tudier. Les bases de donn\u00e9es relationnelles ont \u00e9t\u00e9 mises au point en 1970 par Edgar Franck Codd, informaticien britannique (1923-2003). Ces bases de donn\u00e9es sont bas\u00e9es sur la th\u00e9orie math\u00e9matique des ensembles.","title":"1) introduction"},{"location":"c2c/#2-relation","text":"La notion de relation est au coeur des bases de donn\u00e9es relationnelles. Une relation peut \u00eatre vue comme un tableau \u00e0 2 dimensions, compos\u00e9 d'un en-t\u00eate et d'un corps. Le corps est lui-m\u00eame compos\u00e9 de t-uplets (lignes) et d'attributs (colonnes). L'en-t\u00eate contient les intitul\u00e9s des attributs, le corps contient les donn\u00e9es proprement dites. \u00c0 noter que l'on emploie aussi le terme \"table\" \u00e0 la place de \"relation\". Voici un exemple de relation : Le t-uplet encadr\u00e9 en jaune sur le sch\u00e9ma ci-dessus contient les \u00e9l\u00e9ments suivant : 11, La Plan\u00e8te des singes, Boulle, 1963 et 8. L'attribut \"titre\" est compos\u00e9 des \u00e9l\u00e9ments suivants : 1984, Dune, Fondation, Le meilleur des mondes, Fahrenheit 451, Ubik, Chroniques martiennes, La nuit des temps, Blade Runner, Les Robots, La Plan\u00e8te des singes, Ravage, Le Ma\u00eetre du Haut Ch\u00e2teau, Le monde des \u0100, La Fin de l\u2019\u00e9ternit\u00e9 et De la Terre \u00e0 la Lune.","title":"2) relation"},{"location":"c2c/#3-domaine","text":"Pour chaque attribut d'une relation, il est n\u00e9cessaire de d\u00e9finir un domaine : Le domaine d'un attribut donn\u00e9 correspond \u00e0 un ensemble fini ou infini de valeurs admissibles. Par exemple, le domaine de l'attribut \"id\" correspond \u00e0 l'ensemble des entiers (not\u00e9 INT) : la colonne \"id\" devra obligatoirement contenir des entiers. Autre exemple, le domaine de l'attribut \"titre\" correspond \u00e0 l'ensemble des cha\u00eenes de caract\u00e8res (not\u00e9 TEXT). Dernier exemple, le domaine de l'attribut \"note\" correspond \u00e0 l'ensemble des entiers positifs. Au moment de la cr\u00e9ation d'une relation, il est n\u00e9cessaire de renseigner le domaine de chaque attribut. Le SGBD s'assure qu'un \u00e9l\u00e9ment ajout\u00e9 \u00e0 une relation respecte bien le domaine de l'attribut correspondant : si par exemple vous essayez d'ajouter une note non enti\u00e8re (par exemple 8.5), le SGBD signalera cette erreur et n'autorisera pas l'\u00e9criture de cette nouvelle donn\u00e9e.","title":"3) domaine"},{"location":"c2c/#4-cle-primaire","text":"Autre contrainte tr\u00e8s importante dans les bases de donn\u00e9es relationnelles, une relation ne peut pas contenir 2 t-uplets identiques. Par exemple, la situation ci-dessous n'est pas autoris\u00e9e (ici aussi c'est le SGBD qui veille au grain) : id titre auteur ann_publi note 1 1984 Orwell 1949 10 2 Dune Herbert 1965 8 2 Dune Herbert 1965 8 3 Fondation Asimov 1951 9 Afin d'\u00eatre s\u00fbr de respecter cette contrainte des t-uplets identiques, on d\u00e9finit la notion de \"cl\u00e9 primaire\". Une cl\u00e9 primaire est un attribut dont la valeur permet d'identifier de mani\u00e8re unique un t-uplet de la relation. Autrement dit, si un attribut est consid\u00e9r\u00e9 comme cl\u00e9 primaire, on ne doit pas trouver dans toute la relation 2 fois la m\u00eame valeur pour cet attribut. Si on se r\u00e9f\u00e8re \u00e0 l'exemple de la relation ci-dessous : id titre auteur ann_publi note 1 1984 Orwell 1949 10 2 Dune Herbert 1965 8 3 Fondation Asimov 1951 9 4 Le meilleur des mondes Huxley 1931 7 5 Fahrenheit 451 Bradbury 1953 7 6 Ubik K.Dick 1969 9 7 Chroniques martiennes Bradbury 1950 8 8 La nuit des temps Barjavel 1968 7 9 Blade Runner K.Dick 1968 8 10 Les Robots Asimov 1950 9 11 La Plan\u00e8te des singes Boulle 1963 8 12 Ravage Barjavel 1943 8 13 Le Ma\u00eetre du Haut Ch\u00e2teau K.Dick 1962 8 14 Le monde des \u0100 Van Vogt 1945 7 15 La Fin de l\u2019\u00e9ternit\u00e9 Asimov 1955 8 16 De la Terre \u00e0 la Lune Verne 1865 10 L'attribut \"note\" peut-il jouer le r\u00f4le de cl\u00e9 primaire ? Non, car il est possible de trouver 2 fois la m\u00eame note. L'attribut \"ann_publi\" peut-il jouer le r\u00f4le de cl\u00e9 primaire ? Non, car il est possible de trouver 2 fois la m\u00eame ann\u00e9e. L'attribut \"auteur\" peut-il jouer le r\u00f4le de cl\u00e9 primaire ? Non, car il est possible de trouver 2 fois le m\u00eame auteur. L'attribut \"titre\" peut-il jouer le r\u00f4le de cl\u00e9 primaire ? A priori oui, car l'attribut \"titre\" ne comporte pas 2 fois le m\u00eame titre de roman. Mais, ce n'est pas forc\u00e9ment une bonne id\u00e9e, car il est tout \u00e0 fait possible d'avoir un m\u00eame titre pour 2 romans diff\u00e9rents. Par exemple, en 2013, l\u2019Am\u00e9ricaine Jill McCorkle et l\u2019Anglaise Kate Atkison publiaient avec seulement six jours d\u2019\u00e9cart un livre intitul\u00e9 \"Life After Life\" ! Il nous reste donc l'attribut \"id\". En fait, l'attribut \"id\" (\"id\" comme \"identifiant\") a \u00e9t\u00e9 plac\u00e9 l\u00e0 pour jouer le r\u00f4le de cl\u00e9 primaire. En effet, \u00e0 chaque fois qu'un roman est ajout\u00e9 \u00e0 la relation, son \"id\" correspond \u00e0 l'incr\u00e9mentation de l'id (id du nouveau=id de l'ancien+1) du roman pr\u00e9c\u00e9demment ajout\u00e9. Il est donc impossible d'avoir deux romans avec le m\u00eame id. Ajouter un attribut \"id\" afin qu'il puisse jouer le r\u00f4le de cl\u00e9 primaire est une pratique courante (mais non obligatoire) dans les bases de donn\u00e9es relationnelles. Dans le cas pr\u00e9cis qui nous int\u00e9resse, il aurait \u00e9t\u00e9 possible de ne pas utiliser d'attribut \"id\", car chaque livre \u00e9dit\u00e9 poss\u00e8de un num\u00e9ro qui lui est propre : l'ISBN, cet ISBN aurait donc pu jouer le r\u00f4le de cl\u00e9 primaire. \u00c0 noter qu'en toute rigueur, une cl\u00e9 primaire peut \u00eatre constitu\u00e9e de plusieurs attributs, par exemple le couple \"auteur\" + \"titre\" pourrait jouer le r\u00f4le de cl\u00e9 primaire (\u00e0 moins qu'un auteur \u00e9crive 2 romans diff\u00e9rents, mais portant tous les deux le m\u00eame titre), mais nous n'\u00e9tudierons pas cet aspect des choses ici.","title":"4) cl\u00e9 primaire"},{"location":"c2c/#5-cle-etrangere","text":"","title":"5) cl\u00e9 \u00e9trang\u00e8re"},{"location":"c2c/#a-duplication-des-donnees","text":"Nous d\u00e9sirons maintenant un peu enrichir la relation LIVRES en ajoutant des informations suppl\u00e9mentaires sur les auteurs, nous obtenons alors : id titre nom_auteur prenom_auteur date_nai_auteur langue_ecriture_auteur ann_publi note 1 1984 Orwell George 1903 anglais 1949 10 2 Dune Herbert Frank 1920 anglais 1965 8 3 Fondation Asimov Isaac 1920 anglais 1951 9 4 Le meilleur des mondes Huxley Aldous 1894 anglais 1931 7 5 Fahrenheit 451 Bradbury Ray 1920 anglais 1953 7 6 Ubik K.Dick Philip 1928 anglais 1969 9 7 Chroniques martiennes Bradbury Ray 1920 anglais 1950 8 8 La nuit des temps Barjavel Ren\u00e9 1911 fran\u00e7ais 1968 7 9 Blade Runner K.Dick Philip 1928 anglais 1968 8 10 Les Robots Asimov Isaac 1920 anglais 1950 9 11 La Plan\u00e8te des singes Boulle Pierre 1912 fran\u00e7ais 1963 8 12 Ravage Barjavel Ren\u00e9 1911 fran\u00e7ais 1943 8 13 Le Ma\u00eetre du Haut Ch\u00e2teau K.Dick Philip 1928 anglais 1962 8 14 Le monde des \u0100 Van Vogt Alfred Elton 1912 anglais 1945 7 15 La Fin de l\u2019\u00e9ternit\u00e9 Asimov Isaac 1920 anglais 1955 8 16 De la Terre \u00e0 la Lune Verne Jules 1828 fran\u00e7ais 1865 10 Nous avons ajout\u00e9 3 attributs (\"prenom_auteur\", \"date_nai_auteur\" et \"langue_ecriture_auteur\"). Nous avons aussi renomm\u00e9 l'attribut \"auteur\" en \"nom_auteur\". Comme vous l'avez peut-\u00eatre remarqu\u00e9, il y a pas mal d'informations dupliqu\u00e9es, par exemple, on retrouve 3 fois \"K.Dick Philip 1928 anglais\", m\u00eame chose pour \"Asimov Isaac 1920 anglais\"...Cette duplication est-elle indispensable ? Non ! Est-elle souhaitable ? Non plus ! En effet, dans une base de donn\u00e9es, on \u00e9vite autant que possible de dupliquer l'information (sauf \u00e0 des fins de sauvegarde, mais ici c'est toute autre chose). Si nous dupliquons autant de donn\u00e9es inutilement c'est que notre structure ne doit pas \u00eatre la bonne ! Mais alors, comment faire pour avoir aussi des informations sur les auteurs des livres ?","title":"a) duplication des donn\u00e9es"},{"location":"c2c/#b-notion-de-cle-etrangere","text":"La solution est relativement simple : travailler avec 2 relations au lieu d'une seule et cr\u00e9er un \"lien\" entre ces 2 relations : Table: Relation AUTEURS id nom prenom ann_naissance langue_ecriture 1 Orwell George 1903 anglais 2 Herbert Frank 1920 anglais 3 Asimov Isaac 1920 anglais 4 Huxley Aldous 1894 anglais 5 Bradbury Ray 1920 anglais 6 K.Dick Philip 1928 anglais 7 Barjavel Ren\u00e9 1911 fran\u00e7ais 8 Boulle Pierre 1912 fran\u00e7ais 9 Van Vogt Alfred Elton 1912 anglais 10 Verne Jules 1828 fran\u00e7ais Table: Relation LIVRES id titre id_auteur ann_publi note 1 1984 1 1949 10 2 Dune 2 1965 8 3 Fondation 3 1951 9 4 Le meilleur des mondes 4 1931 7 5 Fahrenheit 451 5 1953 7 6 Ubik 6 1969 9 7 Chroniques martiennes 5 1950 8 8 La nuit des temps 7 1968 7 9 Blade Runner 6 1968 8 10 Les Robots 3 1950 9 11 La Plan\u00e8te des singes 8 1963 8 12 Ravage 7 1943 8 13 Le Ma\u00eetre du Haut Ch\u00e2teau 6 1962 8 14 Le monde des \u0100 9 1945 7 15 La Fin de l\u2019\u00e9ternit\u00e9 3 1955 8 16 De la Terre \u00e0 la Lune 10 1865 10 Nous avons cr\u00e9\u00e9 une relation AUTEURS et nous avons modifi\u00e9 la relation LIVRES : nous avons remplac\u00e9 l'attribut \"auteur\" par un attribut \"id_auteur\". Comme vous l'avez sans doute remarqu\u00e9, l'attribut \"id_auteur\" de la relation LIVRES permet de cr\u00e9er un lien avec la relation AUTEURS. \"id_auteur\" correspond \u00e0 l'attribut \"id\" de la relation AUTEURS. L'introduction d'une relation AUTEURS et la mise en place de liens entre cette relation et la relation LIVRES permettent d'\u00e9viter la redondance d'informations. Pour \u00e9tablir un lien entre 2 relations RA et RB, on ajoute \u00e0 RA un attribut x qui prendra les valeurs de la cl\u00e9 primaire de RB. Cet attribut x est appel\u00e9 cl\u00e9 \u00e9trang\u00e8re (l'attribut correspond \u00e0 la cl\u00e9 primaire d'une autre table, d'o\u00f9 le nom). Dans l'exemple ci-dessus, l'attribut \"id_auteur\" de la relation LIVRES permet bien d'\u00e9tablir un lien entre la relation LIVRES et la relation AUTEURS, \"id_auteur\" correspond bien \u00e0 la cl\u00e9 primaire de la relation AUTEURS, conclusion : \"id_auteur\" est une cl\u00e9 \u00e9trang\u00e8re. Pour pr\u00e9server l'int\u00e9grit\u00e9 d'une base de donn\u00e9es, il est important de bien v\u00e9rifier que toutes les valeurs de la cl\u00e9 \u00e9trang\u00e8re correspondent bien \u00e0 des valeurs pr\u00e9sentes dans la cl\u00e9 primaire (nous aurions un probl\u00e8me d'int\u00e9grit\u00e9 de la base de donn\u00e9es si une valeur de l'attribut \"id_auteur\" de la relation LIVRES ne correspondait \u00e0 aucune valeur de la cl\u00e9 primaire de la relation AUTEURS). Certains SGBD ne v\u00e9rifient pas cette contrainte (ne renvoient aucune erreur en cas de probl\u00e8me), ce qui peut provoquer des comportements erratiques.","title":"b) notion de cl\u00e9 \u00e9trang\u00e8re"},{"location":"c2c/#6-schema-relationnel","text":"Derni\u00e8re d\u00e9finition, on appelle sch\u00e9ma relationnel l'ensemble des relations pr\u00e9sentes dans une base de donn\u00e9es. Quand on vous demande le sch\u00e9ma relationnel d'une base de donn\u00e9es, il est n\u00e9cessaire de fournir les informations suivantes : Les noms des diff\u00e9rentes relations pour chaque relation, la liste des attributs avec leur domaine respectif pour chaque relation, la cl\u00e9 primaire et \u00e9ventuellement les cl\u00e9s \u00e9trang\u00e8res Voici un exemple pour les relations LIVRES et AUTEURS : AUTEURS( id : INT, nom : TEXT, prenom : TEXT, ann_naissance : INT, langue_ecriture : TEXT) LIVRES( id : INT, titre : TEXT, #id_auteur : INT, ann_publi : INT, note : INT) Les attributs soulign\u00e9s sont des cl\u00e9s primaires, le # signifie que l'on a une cl\u00e9 \u00e9trang\u00e8re.","title":"6) sch\u00e9ma relationnel"},{"location":"c2e/","text":"exercice 2.1 On consid\u00e9rera une base de donn\u00e9es constitu\u00e9e de la relation PRODUITS : Relation PRODUITS ref nom prix_unitaire fournisseur 1278 X-2212 64 AMC-V 1580 Y-32 56 YAMEL 1665 BN6 57 ABS-united 1447 Z32 48 AMC-V 2568 Y-67 90 YAMEL 3558 OIP-78 90 ABS-united 2222 BN6 60 ABS-united Expliquez en quelques lignes ce qu\u2019est un SGBD ( syst\u00e8me de gestion de base de donn\u00e9es). Expliquez en quelques lignes l\u2019avantage d\u2019une base de donn\u00e9es par rapport au stockage des donn\u00e9es dans un fichier de type CSV Donnez le nom d\u2019un des attributs de la relation PRODUITS Donnez un exemple de t-uplet de la relation PRODUITS Parmi tous les attributs de la relation PRODUITS, d\u00e9terminez le(s) attribut(s) qui peut (peuvent) jouer le r\u00f4le de cl\u00e9 primaire ? (justifiez votre r\u00e9ponse)","title":"Exercices"},{"location":"c2e/#exercice-21","text":"On consid\u00e9rera une base de donn\u00e9es constitu\u00e9e de la relation PRODUITS : Relation PRODUITS ref nom prix_unitaire fournisseur 1278 X-2212 64 AMC-V 1580 Y-32 56 YAMEL 1665 BN6 57 ABS-united 1447 Z32 48 AMC-V 2568 Y-67 90 YAMEL 3558 OIP-78 90 ABS-united 2222 BN6 60 ABS-united Expliquez en quelques lignes ce qu\u2019est un SGBD ( syst\u00e8me de gestion de base de donn\u00e9es). Expliquez en quelques lignes l\u2019avantage d\u2019une base de donn\u00e9es par rapport au stockage des donn\u00e9es dans un fichier de type CSV Donnez le nom d\u2019un des attributs de la relation PRODUITS Donnez un exemple de t-uplet de la relation PRODUITS Parmi tous les attributs de la relation PRODUITS, d\u00e9terminez le(s) attribut(s) qui peut (peuvent) jouer le r\u00f4le de cl\u00e9 primaire ? (justifiez votre r\u00e9ponse)","title":"exercice 2.1"},{"location":"c2r/","text":"Ce qu\u2019il faut savoir Il existe diff\u00e9rents types de bases de donn\u00e9es, par exemple, les bases de donn\u00e9es hi\u00e9rarchiques, les bases de donn\u00e9es objet, les bases de donn\u00e9es nosql ou bien encore les bases de donn\u00e9es relationnelles La notion de relation est au coeur des bases de donn\u00e9es relationnelles. Une relation peut \u00eatre vue comme un tableau \u00e0 2 dimensions, compos\u00e9 d'un en-t\u00eate et d'un corps. Le corps est lui-m\u00eame compos\u00e9 de t-uplets (lignes) et d'attributs (colonnes). L'en-t\u00eate contient les intitul\u00e9s des attributs, le corps contient les donn\u00e9es proprement dites. Pour chaque attribut d'une relation, il est n\u00e9cessaire de d\u00e9finir un domaine : Le domaine d'un attribut donn\u00e9 correspond \u00e0 un ensemble fini ou infini de valeurs admissibles. Une cl\u00e9 primaire est un attribut dont la valeur permet d'identifier de mani\u00e8re unique un t-uplet de la relation. Autrement dit, si un attribut est consid\u00e9r\u00e9 comme cl\u00e9 primaire, on ne doit pas trouver dans toute la relation 2 fois la m\u00eame valeur pour cet attribut. Une cl\u00e9 \u00e9trang\u00e8re est un attribut d'une relation A devant appara\u00eetre comme cl\u00e9 primaire dans une relation B afin d\u2019\u00e9tablir un lien entre A et B (une cl\u00e9 \u00e9trang\u00e8re d'un tuple r\u00e9f\u00e9rence une cl\u00e9 primaire d'un autre tuple). La notion de cl\u00e9 \u00e9trang\u00e8re permet de pr\u00e9server l'int\u00e9grit\u00e9 d'une base de donn\u00e9es lorsque l\u2019on travail sur plusieurs relations en m\u00eame temps on appelle sch\u00e9ma relationnel l'ensemble des relations pr\u00e9sentes dans une base de donn\u00e9es. Dans le sch\u00e9ma relationnel on doit trouver : Les noms des diff\u00e9rentes relations pour chaque relation, la liste des attributs avec leur domaine respectif pour chaque relation, la cl\u00e9 primaire (soulign\u00e9e) et \u00e9ventuellement les cl\u00e9s \u00e9trang\u00e8res (pr\u00e9c\u00e9d\u00e9es d\u2019un #) exemple : AUTEURS( id : INT, nom : TEXT, prenom : TEXT, ann_naissance : INT, langue_ecriture : TEXT) LIVRES( id : INT, titre : TEXT, #id_auteur : INT, ann_publi : INT, note : INT)","title":"R\u00e9vision"},{"location":"c2r/#ce-quil-faut-savoir","text":"Il existe diff\u00e9rents types de bases de donn\u00e9es, par exemple, les bases de donn\u00e9es hi\u00e9rarchiques, les bases de donn\u00e9es objet, les bases de donn\u00e9es nosql ou bien encore les bases de donn\u00e9es relationnelles La notion de relation est au coeur des bases de donn\u00e9es relationnelles. Une relation peut \u00eatre vue comme un tableau \u00e0 2 dimensions, compos\u00e9 d'un en-t\u00eate et d'un corps. Le corps est lui-m\u00eame compos\u00e9 de t-uplets (lignes) et d'attributs (colonnes). L'en-t\u00eate contient les intitul\u00e9s des attributs, le corps contient les donn\u00e9es proprement dites. Pour chaque attribut d'une relation, il est n\u00e9cessaire de d\u00e9finir un domaine : Le domaine d'un attribut donn\u00e9 correspond \u00e0 un ensemble fini ou infini de valeurs admissibles. Une cl\u00e9 primaire est un attribut dont la valeur permet d'identifier de mani\u00e8re unique un t-uplet de la relation. Autrement dit, si un attribut est consid\u00e9r\u00e9 comme cl\u00e9 primaire, on ne doit pas trouver dans toute la relation 2 fois la m\u00eame valeur pour cet attribut. Une cl\u00e9 \u00e9trang\u00e8re est un attribut d'une relation A devant appara\u00eetre comme cl\u00e9 primaire dans une relation B afin d\u2019\u00e9tablir un lien entre A et B (une cl\u00e9 \u00e9trang\u00e8re d'un tuple r\u00e9f\u00e9rence une cl\u00e9 primaire d'un autre tuple). La notion de cl\u00e9 \u00e9trang\u00e8re permet de pr\u00e9server l'int\u00e9grit\u00e9 d'une base de donn\u00e9es lorsque l\u2019on travail sur plusieurs relations en m\u00eame temps on appelle sch\u00e9ma relationnel l'ensemble des relations pr\u00e9sentes dans une base de donn\u00e9es. Dans le sch\u00e9ma relationnel on doit trouver : Les noms des diff\u00e9rentes relations pour chaque relation, la liste des attributs avec leur domaine respectif pour chaque relation, la cl\u00e9 primaire (soulign\u00e9e) et \u00e9ventuellement les cl\u00e9s \u00e9trang\u00e8res (pr\u00e9c\u00e9d\u00e9es d\u2019un #) exemple : AUTEURS( id : INT, nom : TEXT, prenom : TEXT, ann_naissance : INT, langue_ecriture : TEXT) LIVRES( id : INT, titre : TEXT, #id_auteur : INT, ann_publi : INT, note : INT)","title":"Ce qu\u2019il faut savoir"},{"location":"c3a/","text":"Pour cr\u00e9er une base de donn\u00e9es et effectuer des requ\u00eates sur cette derni\u00e8re, nous allons utiliser le logiciel \"DB Browser for SQLite\" : https://sqlitebrowser.org/ activit\u00e9 3.1 Apr\u00e8s avoir lanc\u00e9 le logiciel \"DB Browser for SQLite\", vous devriez obtenir ceci : Cliquez sur Nouvelle base de donn\u00e9es. Apr\u00e8s avoir choisi un nom pour votre base de donn\u00e9es (par exemple \"db_livres.db\"), vous devriez avoir la fen\u00eatre suivante : Cliquez alors sur Annuler Notre base de donn\u00e9es a \u00e9t\u00e9 cr\u00e9\u00e9e : mais pour l'instant elle ne contient aucune table (aucune relation), pour cr\u00e9er une table, cliquez sur l'onglet \"Ex\u00e9cuter le SQL\". On obtient alors : Copiez-collez le texte ci-dessous dans la fen\u00eatre \"SQL 1\" CREATE TABLE LIVRES ( id INT , titre TEXT , auteur TEXT , ann_publi INT , note INT , PRIMARY KEY ( id )); Cliquez ensuite sur le petit triangle situ\u00e9 au-dessus de la fen\u00eatre SQL 1 (ou appuyez sur F5), vous devriez avoir ceci : Comme indiqu\u00e9 dans la fen\u00eatre, \"Requ\u00eate ex\u00e9cut\u00e9e avec succ\u00e8s\" ! Vous venez de cr\u00e9er votre premi\u00e8re table. Revenons sur cette premi\u00e8re requ\u00eate : Le CREATE TABLE LIVRES ne devrait pas vous poser de probl\u00e8me : nous cr\u00e9ons une nouvelle table nomm\u00e9e \"LIVRES\". La suite est \u00e0 peine plus complexe : nous cr\u00e9ons ensuite les attributs : id titre auteur ann_publi note Nous avons pour chaque attribut pr\u00e9cis\u00e9 son domaine : id : entier (INT), titre : cha\u00eene de caract\u00e8res (TEXT), auteur : cha\u00eene de caract\u00e8res, ann_publi : entier et note : entier L'attribut \"id\" va jouer ici le r\u00f4le de cl\u00e9 primaire, nous avons donc pr\u00e9cis\u00e9 dans notre requ\u00eate que id jouera le r\u00f4le de cl\u00e9 primaire (PRIMARY KEY (id)). Notre syst\u00e8me de gestion de base de donn\u00e9es nous avertira si l'on tente d'attribuer 2 fois la m\u00eame valeur \u00e0 l'attribut\"id\". activit\u00e9 3.2 Nous allons maintenant ajouter des donn\u00e9es \u00e0 notre table. Toujours dans l'onglet \"Ex\u00e9cuter le SQL\", apr\u00e8s avoir effac\u00e9 la fen\u00eatre SQL 1, copiez-collez dans cette m\u00eame fen\u00eatre la requ\u00eate ci-dessous : INSERT INTO LIVRES ( id , titre , auteur , ann_publi , note ) VALUES ( 1 , '1984' , 'Orwell' , 1949 , 10 ), ( 2 , 'Dune' , 'Herbert' , 1965 , 8 ), ( 3 , 'Fondation' , 'Asimov' , 1951 , 9 ), ( 4 , 'Le meilleur des mondes' , 'Huxley' , 1931 , 7 ), ( 5 , 'Fahrenheit 451' , 'Bradbury' , 1953 , 7 ), ( 6 , 'Ubik' , 'K.Dick' , 1969 , 9 ), ( 7 , 'Chroniques martiennes' , 'Bradbury' , 1950 , 8 ), ( 8 , 'La nuit des temps' , 'Barjavel' , 1968 , 7 ), ( 9 , 'Blade Runner' , 'K.Dick' , 1968 , 8 ), ( 10 , 'Les Robots' , 'Asimov' , 1950 , 9 ), ( 11 , 'La Plan\u00e8te des singes' , 'Boulle' , 1963 , 8 ), ( 12 , 'Ravage' , 'Barjavel' , 1943 , 8 ), ( 13 , 'Le Ma\u00eetre du Haut Ch\u00e2teau' , 'K.Dick' , 1962 , 8 ), ( 14 , 'Le monde des \u0100' , 'Van Vogt' , 1945 , 7 ), ( 15 , 'La Fin de l\u2019\u00e9ternit\u00e9' , 'Asimov' , 1955 , 8 ), ( 16 , 'De la Terre \u00e0 la Lune' , 'Verne' , 1865 , 10 ); Un message devrait vous pr\u00e9ciser que votre requ\u00eate a \u00e9t\u00e9 ex\u00e9cut\u00e9e avec succ\u00e8s : La table LIVRES contient bien les donn\u00e9es souhait\u00e9es (onglet \"Parcourir les donn\u00e9es\") : activit\u00e9 3.3 Saisissez la requ\u00eate SQL suivante : SELECT id , titre , auteur , ann_publi , note FROM LIVRES puis appuyez sur le triangle (ou la touche F5) Apr\u00e8s un temps plus ou moins long, vous devriez voir s'afficher ceci : activit\u00e9 3.4 Effectuez une requ\u00eate qui permettra d'obtenir le titre et l'auteur de tous les livres pr\u00e9sents dans la table LIVRES. activit\u00e9 3.5 Saisissez et testez la requ\u00eate SQL suivante : SELECT titre , ann_publi FROM LIVRES WHERE auteur = 'Asimov' V\u00e9rifiez que vous obtenez bien uniquement les livres \u00e9crits par Isaac Asimov. activit\u00e9 3.6 \u00c9crivez et testez une requ\u00eate permettant d'obtenir uniquement les titres des livres \u00e9crits par Philip K.Dick. activit\u00e9 3.7 Saisissez et testez la requ\u00eate SQL suivante : SELECT titre , ann_publi FROM LIVRES WHERE auteur = 'Asimov' AND ann_publi > 1953 V\u00e9rifiez que nous obtenons bien le livre \u00e9crit par Asimov publi\u00e9 apr\u00e8s 1953. activit\u00e9 3.8 \u00c9crivez une requ\u00eate permettant d'obtenir les titres des livres publi\u00e9s apr\u00e8s 1945 qui ont une note sup\u00e9rieure ou \u00e9gale \u00e0 9. activit\u00e9 3.9 \u00c9crivez une requ\u00eate SQL permettant d'obtenir les livres de K.Dick class\u00e9s du plus ancien au plus r\u00e9cent. activit\u00e9 3.10 Cr\u00e9ez une nouvelle base de donn\u00e9es que vous nommerez par exemple db_livres_auteurs.db, puis cr\u00e9ez une table AUTEURS \u00e0 l'aide de la requ\u00eate SQL suivante : CREATE TABLE AUTEURS ( id INT , nom TEXT , prenom TEXT , ann_naissance INT , langue_ecriture TEXT , PRIMARY KEY ( id )); Cr\u00e9ez ensuite une deuxi\u00e8me table (LIVRES) : CREATE TABLE LIVRES ( id INT , titre TEXT , id_auteur INT , ann_publi INT , note INT , PRIMARY KEY ( id ), FOREIGN KEY ( id_auteur ) REFERENCES AUTEURS ( id )); Comme vous l'avez sans doute remarqu\u00e9 nous avons pr\u00e9cis\u00e9 dans notre requ\u00eate que l'attribut \"id_auteur\" jouera le r\u00f4le de cl\u00e9 \u00e9trang\u00e8re : liaison entre \"id_auteur\" de la table LIVRES et \"id\" de la table AUTEURS (FOREIGN KEY (id_auteur) REFERENCES AUTEURS(id)). Ajoutez des donn\u00e9es \u00e0 la table AUTEURS \u00e0 l'aide de la requ\u00eate SQL suivante : INSERT INTO AUTEURS ( id , nom , prenom , ann_naissance , langue_ecriture ) VALUES ( 1 , 'Orwell' , 'George' , 1903 , 'anglais' ), ( 2 , 'Herbert' , 'Frank' , 1920 , 'anglais' ), ( 3 , 'Asimov' , 'Isaac' , 1920 , 'anglais' ), ( 4 , 'Huxley' , 'Aldous' , 1894 , 'anglais' ), ( 5 , 'Bradbury' , 'Ray' , 1920 , 'anglais' ), ( 6 , 'K.Dick' , 'Philip' , 1928 , 'anglais' ), ( 7 , 'Barjavel' , 'Ren\u00e9' , 1911 , 'fran\u00e7ais' ), ( 8 , 'Boulle' , 'Pierre' , 1912 , 'fran\u00e7ais' ), ( 9 , 'Van Vogt' , 'Alfred Elton' , 1912 , 'anglais' ), ( 10 , 'Verne' , 'Jules' , 1828 , 'fran\u00e7ais' ); Ajoutez des donn\u00e9es \u00e0 la table LIVRES \u00e0 l'aide de la requ\u00eate SQL suivante : INSERT INTO LIVRES ( id , titre , id_auteur , ann_publi , note ) VALUES ( 1 , '1984' , 1 , 1949 , 10 ), ( 2 , 'Dune' , 2 , 1965 , 8 ), ( 3 , 'Fondation' , 3 , 1951 , 9 ), ( 4 , 'Le meilleur des mondes' , 4 , 1931 , 7 ), ( 5 , 'Fahrenheit 451' , 5 , 1953 , 7 ), ( 6 , 'Ubik' , 6 , 1969 , 9 ), ( 7 , 'Chroniques martiennes' , 5 , 1950 , 8 ), ( 8 , 'La nuit des temps' , 7 , 1968 , 7 ), ( 9 , 'Blade Runner' , 6 , 1968 , 8 ), ( 10 , 'Les Robots' , 3 , 1950 , 9 ), ( 11 , 'La Plan\u00e8te des singes' , 8 , 1963 , 8 ), ( 12 , 'Ravage' , 7 , 1943 , 8 ), ( 13 , 'Le Ma\u00eetre du Haut Ch\u00e2teau' , 6 , 1962 , 8 ), ( 14 , 'Le monde des \u0100' , 9 , 1945 , 7 ), ( 15 , 'La Fin de l\u2019\u00e9ternit\u00e9' , 3 , 1955 , 8 ), ( 16 , 'De la Terre \u00e0 la Lune' , 10 , 1865 , 10 ); activit\u00e9 3.11 Saisissez et testez la requ\u00eate SQL suivante : SELECT titre , nom , prenom FROM LIVRES INNER JOIN AUTEURS ON LIVRES . id_auteur = AUTEURS . id Rappel : attention, si un m\u00eame nom d'attribut est pr\u00e9sent dans les 2 tables (par exemple ici l'attribut id), il est n\u00e9cessaire d'ajouter le nom de la table devant afin de pouvoir les distinguer (AUTEURS.id et LIVRES.id). activit\u00e9 3.12 \u00c9crivez une requ\u00eate SQL permettant d'obtenir les titres des livres publi\u00e9s apr\u00e8s 1945 ainsi que le nom de leurs auteurs. activit\u00e9 3.13 Nous allons repartir avec une nouvelle base de donn\u00e9es. Cr\u00e9ez une nouvelle base de donn\u00e9es nomm\u00e9e \"db_livres.db\". Cr\u00e9ez ensuite une table LIVRES \u00e0 l'aide de la requ\u00eate suivante : CREATE TABLE LIVRES ( id INT , titre TEXT , auteur TEXT , ann_publi INT , note INT , PRIMARY KEY ( id )); Ajoutez des donn\u00e9es \u00e0 la table LIVRES \u00e0 l'aide de la requ\u00eate SQL suivante : INSERT INTO LIVRES ( id , titre , auteur , ann_publi , note ) VALUES ( 1 , '1984' , 'Orwell' , 1949 , 10 ), ( 2 , 'Dune' , 'Herbert' , 1965 , 8 ), ( 3 , 'Fondation' , 'Asimov' , 1951 , 9 ), ( 4 , 'Le meilleur des mondes' , 'Huxley' , 1931 , 7 ), ( 5 , 'Fahrenheit 451' , 'Bradbury' , 1953 , 7 ), ( 6 , 'Ubik' , 'K.Dick' , 1969 , 9 ), ( 7 , 'Chroniques martiennes' , 'Bradbury' , 1950 , 8 ), ( 8 , 'La nuit des temps' , 'Barjavel' , 1968 , 7 ), ( 9 , 'Blade Runner' , 'K.Dick' , 1968 , 8 ), ( 10 , 'Les Robots' , 'Asimov' , 1950 , 9 ), ( 11 , 'La Plan\u00e8te des singes' , 'Boulle' , 1963 , 8 ), ( 12 , 'Ravage' , 'Barjavel' , 1943 , 8 ), ( 13 , 'Le Ma\u00eetre du Haut Ch\u00e2teau' , 'K.Dick' , 1962 , 8 ), ( 14 , 'Le monde des \u0100' , 'Van Vogt' , 1945 , 7 ), ( 15 , 'La Fin de l\u2019\u00e9ternit\u00e9' , 'Asimov' , 1955 , 8 ), ( 16 , 'De la Terre \u00e0 la Lune' , 'Verne' , 1865 , 10 ); activit\u00e9 3.14 \u00c0 l'aide d'une requ\u00eate SQL, ajoutez \u00e0 la table LIVRES le livre suivant : id : 17 titre : \"2001 : L'Odyss\u00e9e de l'espace\" auteur : \"Clarcke\" ann\u00e9e de publication : 1968 note : 7 activit\u00e9 3.15 \u00c9crivez une requ\u00eate permettant d'attribuer la note de 10 \u00e0 tous les livres \u00e9crits par Asimov publi\u00e9s apr\u00e8s 1950. Testez cette requ\u00eate. activit\u00e9 3.16 \u00c9crivez une requ\u00eate permettant de supprimer les livres publi\u00e9s avant 1945. Testez cette requ\u00eate.","title":"Activit\u00e9s"},{"location":"c3a/#activite-31","text":"Apr\u00e8s avoir lanc\u00e9 le logiciel \"DB Browser for SQLite\", vous devriez obtenir ceci : Cliquez sur Nouvelle base de donn\u00e9es. Apr\u00e8s avoir choisi un nom pour votre base de donn\u00e9es (par exemple \"db_livres.db\"), vous devriez avoir la fen\u00eatre suivante : Cliquez alors sur Annuler Notre base de donn\u00e9es a \u00e9t\u00e9 cr\u00e9\u00e9e : mais pour l'instant elle ne contient aucune table (aucune relation), pour cr\u00e9er une table, cliquez sur l'onglet \"Ex\u00e9cuter le SQL\". On obtient alors : Copiez-collez le texte ci-dessous dans la fen\u00eatre \"SQL 1\" CREATE TABLE LIVRES ( id INT , titre TEXT , auteur TEXT , ann_publi INT , note INT , PRIMARY KEY ( id )); Cliquez ensuite sur le petit triangle situ\u00e9 au-dessus de la fen\u00eatre SQL 1 (ou appuyez sur F5), vous devriez avoir ceci : Comme indiqu\u00e9 dans la fen\u00eatre, \"Requ\u00eate ex\u00e9cut\u00e9e avec succ\u00e8s\" ! Vous venez de cr\u00e9er votre premi\u00e8re table. Revenons sur cette premi\u00e8re requ\u00eate : Le CREATE TABLE LIVRES ne devrait pas vous poser de probl\u00e8me : nous cr\u00e9ons une nouvelle table nomm\u00e9e \"LIVRES\". La suite est \u00e0 peine plus complexe : nous cr\u00e9ons ensuite les attributs : id titre auteur ann_publi note Nous avons pour chaque attribut pr\u00e9cis\u00e9 son domaine : id : entier (INT), titre : cha\u00eene de caract\u00e8res (TEXT), auteur : cha\u00eene de caract\u00e8res, ann_publi : entier et note : entier L'attribut \"id\" va jouer ici le r\u00f4le de cl\u00e9 primaire, nous avons donc pr\u00e9cis\u00e9 dans notre requ\u00eate que id jouera le r\u00f4le de cl\u00e9 primaire (PRIMARY KEY (id)). Notre syst\u00e8me de gestion de base de donn\u00e9es nous avertira si l'on tente d'attribuer 2 fois la m\u00eame valeur \u00e0 l'attribut\"id\".","title":"activit\u00e9 3.1"},{"location":"c3a/#activite-32","text":"Nous allons maintenant ajouter des donn\u00e9es \u00e0 notre table. Toujours dans l'onglet \"Ex\u00e9cuter le SQL\", apr\u00e8s avoir effac\u00e9 la fen\u00eatre SQL 1, copiez-collez dans cette m\u00eame fen\u00eatre la requ\u00eate ci-dessous : INSERT INTO LIVRES ( id , titre , auteur , ann_publi , note ) VALUES ( 1 , '1984' , 'Orwell' , 1949 , 10 ), ( 2 , 'Dune' , 'Herbert' , 1965 , 8 ), ( 3 , 'Fondation' , 'Asimov' , 1951 , 9 ), ( 4 , 'Le meilleur des mondes' , 'Huxley' , 1931 , 7 ), ( 5 , 'Fahrenheit 451' , 'Bradbury' , 1953 , 7 ), ( 6 , 'Ubik' , 'K.Dick' , 1969 , 9 ), ( 7 , 'Chroniques martiennes' , 'Bradbury' , 1950 , 8 ), ( 8 , 'La nuit des temps' , 'Barjavel' , 1968 , 7 ), ( 9 , 'Blade Runner' , 'K.Dick' , 1968 , 8 ), ( 10 , 'Les Robots' , 'Asimov' , 1950 , 9 ), ( 11 , 'La Plan\u00e8te des singes' , 'Boulle' , 1963 , 8 ), ( 12 , 'Ravage' , 'Barjavel' , 1943 , 8 ), ( 13 , 'Le Ma\u00eetre du Haut Ch\u00e2teau' , 'K.Dick' , 1962 , 8 ), ( 14 , 'Le monde des \u0100' , 'Van Vogt' , 1945 , 7 ), ( 15 , 'La Fin de l\u2019\u00e9ternit\u00e9' , 'Asimov' , 1955 , 8 ), ( 16 , 'De la Terre \u00e0 la Lune' , 'Verne' , 1865 , 10 ); Un message devrait vous pr\u00e9ciser que votre requ\u00eate a \u00e9t\u00e9 ex\u00e9cut\u00e9e avec succ\u00e8s : La table LIVRES contient bien les donn\u00e9es souhait\u00e9es (onglet \"Parcourir les donn\u00e9es\") :","title":"activit\u00e9 3.2"},{"location":"c3a/#activite-33","text":"Saisissez la requ\u00eate SQL suivante : SELECT id , titre , auteur , ann_publi , note FROM LIVRES puis appuyez sur le triangle (ou la touche F5) Apr\u00e8s un temps plus ou moins long, vous devriez voir s'afficher ceci :","title":"activit\u00e9 3.3"},{"location":"c3a/#activite-34","text":"Effectuez une requ\u00eate qui permettra d'obtenir le titre et l'auteur de tous les livres pr\u00e9sents dans la table LIVRES.","title":"activit\u00e9 3.4"},{"location":"c3a/#activite-35","text":"Saisissez et testez la requ\u00eate SQL suivante : SELECT titre , ann_publi FROM LIVRES WHERE auteur = 'Asimov' V\u00e9rifiez que vous obtenez bien uniquement les livres \u00e9crits par Isaac Asimov.","title":"activit\u00e9 3.5"},{"location":"c3a/#activite-36","text":"\u00c9crivez et testez une requ\u00eate permettant d'obtenir uniquement les titres des livres \u00e9crits par Philip K.Dick.","title":"activit\u00e9 3.6"},{"location":"c3a/#activite-37","text":"Saisissez et testez la requ\u00eate SQL suivante : SELECT titre , ann_publi FROM LIVRES WHERE auteur = 'Asimov' AND ann_publi > 1953 V\u00e9rifiez que nous obtenons bien le livre \u00e9crit par Asimov publi\u00e9 apr\u00e8s 1953.","title":"activit\u00e9 3.7"},{"location":"c3a/#activite-38","text":"\u00c9crivez une requ\u00eate permettant d'obtenir les titres des livres publi\u00e9s apr\u00e8s 1945 qui ont une note sup\u00e9rieure ou \u00e9gale \u00e0 9.","title":"activit\u00e9 3.8"},{"location":"c3a/#activite-39","text":"\u00c9crivez une requ\u00eate SQL permettant d'obtenir les livres de K.Dick class\u00e9s du plus ancien au plus r\u00e9cent.","title":"activit\u00e9 3.9"},{"location":"c3a/#activite-310","text":"Cr\u00e9ez une nouvelle base de donn\u00e9es que vous nommerez par exemple db_livres_auteurs.db, puis cr\u00e9ez une table AUTEURS \u00e0 l'aide de la requ\u00eate SQL suivante : CREATE TABLE AUTEURS ( id INT , nom TEXT , prenom TEXT , ann_naissance INT , langue_ecriture TEXT , PRIMARY KEY ( id )); Cr\u00e9ez ensuite une deuxi\u00e8me table (LIVRES) : CREATE TABLE LIVRES ( id INT , titre TEXT , id_auteur INT , ann_publi INT , note INT , PRIMARY KEY ( id ), FOREIGN KEY ( id_auteur ) REFERENCES AUTEURS ( id )); Comme vous l'avez sans doute remarqu\u00e9 nous avons pr\u00e9cis\u00e9 dans notre requ\u00eate que l'attribut \"id_auteur\" jouera le r\u00f4le de cl\u00e9 \u00e9trang\u00e8re : liaison entre \"id_auteur\" de la table LIVRES et \"id\" de la table AUTEURS (FOREIGN KEY (id_auteur) REFERENCES AUTEURS(id)). Ajoutez des donn\u00e9es \u00e0 la table AUTEURS \u00e0 l'aide de la requ\u00eate SQL suivante : INSERT INTO AUTEURS ( id , nom , prenom , ann_naissance , langue_ecriture ) VALUES ( 1 , 'Orwell' , 'George' , 1903 , 'anglais' ), ( 2 , 'Herbert' , 'Frank' , 1920 , 'anglais' ), ( 3 , 'Asimov' , 'Isaac' , 1920 , 'anglais' ), ( 4 , 'Huxley' , 'Aldous' , 1894 , 'anglais' ), ( 5 , 'Bradbury' , 'Ray' , 1920 , 'anglais' ), ( 6 , 'K.Dick' , 'Philip' , 1928 , 'anglais' ), ( 7 , 'Barjavel' , 'Ren\u00e9' , 1911 , 'fran\u00e7ais' ), ( 8 , 'Boulle' , 'Pierre' , 1912 , 'fran\u00e7ais' ), ( 9 , 'Van Vogt' , 'Alfred Elton' , 1912 , 'anglais' ), ( 10 , 'Verne' , 'Jules' , 1828 , 'fran\u00e7ais' ); Ajoutez des donn\u00e9es \u00e0 la table LIVRES \u00e0 l'aide de la requ\u00eate SQL suivante : INSERT INTO LIVRES ( id , titre , id_auteur , ann_publi , note ) VALUES ( 1 , '1984' , 1 , 1949 , 10 ), ( 2 , 'Dune' , 2 , 1965 , 8 ), ( 3 , 'Fondation' , 3 , 1951 , 9 ), ( 4 , 'Le meilleur des mondes' , 4 , 1931 , 7 ), ( 5 , 'Fahrenheit 451' , 5 , 1953 , 7 ), ( 6 , 'Ubik' , 6 , 1969 , 9 ), ( 7 , 'Chroniques martiennes' , 5 , 1950 , 8 ), ( 8 , 'La nuit des temps' , 7 , 1968 , 7 ), ( 9 , 'Blade Runner' , 6 , 1968 , 8 ), ( 10 , 'Les Robots' , 3 , 1950 , 9 ), ( 11 , 'La Plan\u00e8te des singes' , 8 , 1963 , 8 ), ( 12 , 'Ravage' , 7 , 1943 , 8 ), ( 13 , 'Le Ma\u00eetre du Haut Ch\u00e2teau' , 6 , 1962 , 8 ), ( 14 , 'Le monde des \u0100' , 9 , 1945 , 7 ), ( 15 , 'La Fin de l\u2019\u00e9ternit\u00e9' , 3 , 1955 , 8 ), ( 16 , 'De la Terre \u00e0 la Lune' , 10 , 1865 , 10 );","title":"activit\u00e9 3.10"},{"location":"c3a/#activite-311","text":"Saisissez et testez la requ\u00eate SQL suivante : SELECT titre , nom , prenom FROM LIVRES INNER JOIN AUTEURS ON LIVRES . id_auteur = AUTEURS . id Rappel : attention, si un m\u00eame nom d'attribut est pr\u00e9sent dans les 2 tables (par exemple ici l'attribut id), il est n\u00e9cessaire d'ajouter le nom de la table devant afin de pouvoir les distinguer (AUTEURS.id et LIVRES.id).","title":"activit\u00e9 3.11"},{"location":"c3a/#activite-312","text":"\u00c9crivez une requ\u00eate SQL permettant d'obtenir les titres des livres publi\u00e9s apr\u00e8s 1945 ainsi que le nom de leurs auteurs.","title":"activit\u00e9 3.12"},{"location":"c3a/#activite-313","text":"Nous allons repartir avec une nouvelle base de donn\u00e9es. Cr\u00e9ez une nouvelle base de donn\u00e9es nomm\u00e9e \"db_livres.db\". Cr\u00e9ez ensuite une table LIVRES \u00e0 l'aide de la requ\u00eate suivante : CREATE TABLE LIVRES ( id INT , titre TEXT , auteur TEXT , ann_publi INT , note INT , PRIMARY KEY ( id )); Ajoutez des donn\u00e9es \u00e0 la table LIVRES \u00e0 l'aide de la requ\u00eate SQL suivante : INSERT INTO LIVRES ( id , titre , auteur , ann_publi , note ) VALUES ( 1 , '1984' , 'Orwell' , 1949 , 10 ), ( 2 , 'Dune' , 'Herbert' , 1965 , 8 ), ( 3 , 'Fondation' , 'Asimov' , 1951 , 9 ), ( 4 , 'Le meilleur des mondes' , 'Huxley' , 1931 , 7 ), ( 5 , 'Fahrenheit 451' , 'Bradbury' , 1953 , 7 ), ( 6 , 'Ubik' , 'K.Dick' , 1969 , 9 ), ( 7 , 'Chroniques martiennes' , 'Bradbury' , 1950 , 8 ), ( 8 , 'La nuit des temps' , 'Barjavel' , 1968 , 7 ), ( 9 , 'Blade Runner' , 'K.Dick' , 1968 , 8 ), ( 10 , 'Les Robots' , 'Asimov' , 1950 , 9 ), ( 11 , 'La Plan\u00e8te des singes' , 'Boulle' , 1963 , 8 ), ( 12 , 'Ravage' , 'Barjavel' , 1943 , 8 ), ( 13 , 'Le Ma\u00eetre du Haut Ch\u00e2teau' , 'K.Dick' , 1962 , 8 ), ( 14 , 'Le monde des \u0100' , 'Van Vogt' , 1945 , 7 ), ( 15 , 'La Fin de l\u2019\u00e9ternit\u00e9' , 'Asimov' , 1955 , 8 ), ( 16 , 'De la Terre \u00e0 la Lune' , 'Verne' , 1865 , 10 );","title":"activit\u00e9 3.13"},{"location":"c3a/#activite-314","text":"\u00c0 l'aide d'une requ\u00eate SQL, ajoutez \u00e0 la table LIVRES le livre suivant : id : 17 titre : \"2001 : L'Odyss\u00e9e de l'espace\" auteur : \"Clarcke\" ann\u00e9e de publication : 1968 note : 7","title":"activit\u00e9 3.14"},{"location":"c3a/#activite-315","text":"\u00c9crivez une requ\u00eate permettant d'attribuer la note de 10 \u00e0 tous les livres \u00e9crits par Asimov publi\u00e9s apr\u00e8s 1950. Testez cette requ\u00eate.","title":"activit\u00e9 3.15"},{"location":"c3a/#activite-316","text":"\u00c9crivez une requ\u00eate permettant de supprimer les livres publi\u00e9s avant 1945. Testez cette requ\u00eate.","title":"activit\u00e9 3.16"},{"location":"c3c/","text":"1) introduction Nous avons eu l'occasion d'\u00e9tudier la structure d'une base de donn\u00e9es relationnelle, nous allons maintenant apprendre \u00e0 r\u00e9aliser des requ\u00eates, c'est-\u00e0-dire que nous allons apprendre \u00e0 cr\u00e9er une base des donn\u00e9es, cr\u00e9er des attributs, ajouter de donn\u00e9es, modifier des donn\u00e9es et enfin, nous allons surtout apprendre \u00e0 interroger une base de donn\u00e9es afin d'obtenir des informations. Pour r\u00e9aliser toutes ces requ\u00eates, nous allons devoir apprendre un langage de requ\u00eates : SQL (Structured Query Language). SQL est propre aux bases de donn\u00e9es relationnelles, les autres types de bases de donn\u00e9es utilisent d'autres langages pour effectuer des requ\u00eates. Dans ce cours nous allons travailler avec SQLite. SQLite est un syst\u00e8me de gestion de base de donn\u00e9es relationnelle tr\u00e8s r\u00e9pandu. Noter qu'il existe d'autres syst\u00e8mes de gestion de base de donn\u00e9es relationnelle comme MySQL ou PostgreSQL. Dans tous les cas, le langage de requ\u00eate utilis\u00e9 est le SQL (m\u00eame si parfois on peut noter quelques petites diff\u00e9rences). Ce qui sera vu ici avec SQLite pourra, \u00e0 quelques petites modifications pr\u00e8s, \u00eatre utilis\u00e9 avec, par exemple, MySQL. Pendant ce cours nous allons travailler avec les 2 tables (relations) suivantes : Table AUTEURS id nom prenom ann_naissance langue_ecriture 1 Orwell George 1903 anglais 2 Herbert Frank 1920 anglais 3 Asimov Isaac 1920 anglais 4 Huxley Aldous 1894 anglais 5 Bradbury Ray 1920 anglais 6 K.Dick Philip 1928 anglais 7 Barjavel Ren\u00e9 1911 fran\u00e7ais 8 Boulle Pierre 1912 fran\u00e7ais 9 Van Vogt Alfred Elton 1912 anglais 10 Verne Jules 1828 fran\u00e7ais Table LIVRES id titre id_auteur ann_publi note 1 1984 1 1949 10 2 Dune 2 1965 8 3 Fondation 3 1951 9 4 Le meilleur des mondes 4 1931 7 5 Fahrenheit 451 5 1953 7 6 Ubik 6 1969 9 7 Chroniques martiennes 5 1950 8 8 La nuit des temps 7 1968 7 9 Blade Runner 6 1968 8 10 Les Robots 3 1950 9 11 La Plan\u00e8te des singes 8 1963 8 12 Ravage 7 1943 8 13 Le Ma\u00eetre du Haut Ch\u00e2teau 6 1962 8 14 Le monde des \u0100 9 1945 7 15 La Fin de l\u2019\u00e9ternit\u00e9 3 1955 8 16 De la Terre \u00e0 la Lune 10 1865 10 2) requ\u00eates d'interrogation a) requ\u00eates d'interrogation \"simples\" Quand on d\u00e9sire extraire des informations d'une table, on effectue une requ\u00eate d'interrogation \u00e0 l'aide du mot cl\u00e9 SELECT. Voici un exemple de requ\u00eate d'interrogation : SELECT id , titre , id_auteur , ann_publi , note FROM LIVRES Cette requ\u00eate va nous permettre d'obtenir l'id, le titre, l'id de l'auteur, l'ann\u00e9e de publication et la note de tous les livres pr\u00e9sents dans la table LIVRES. D'une fa\u00e7on g\u00e9n\u00e9rale, le mot cl\u00e9 SELECT est suivi par les attributs que l'on d\u00e9sire obtenir. Le mot cl\u00e9 FROM est suivi par la table concern\u00e9e. Il est possible d'obtenir uniquement certains attributs. Par exemple : SELECT nom , prenom FROM AUTEURS nous permettra d'obtenir le nom et le pr\u00e9nom de tous les auteurs pr\u00e9sents dans la table AUTEURS. \u00c0 noter qu'il est possible d'obtenir tous les attributs sans \u00eatre oblig\u00e9 de tous les noter gr\u00e2ce au caract\u00e8re \u00e9toile * : SELECT * FROM AUTEURS sera \u00e9quivalent \u00e0 SELECT id , nom , prenom , ann_naissance , langue_ecriture FROM AUTEURS b) s\u00e9lectionner certaines lignes : la clause WHERE Il est possible d'utiliser la clause WHERE afin d'imposer une (ou des) condition(s) permettant de s\u00e9lectionner uniquement certaines lignes. La condition doit suivre le mot-cl\u00e9 WHERE : SELECT titre FROM LIVRES WHERE note > 9 La requ\u00eate ci-dessus permettra d'afficher uniquement les titres qui ont une note strictement sup\u00e9rieure \u00e0 9 (soit \"1984\" et \"De la Terre \u00e0 la Lune\") Il est possible de combiner les conditions \u00e0 l'aide d'un OR ou d'un AND : SELECT nom FROM AUTEURS WHERE langue_ecriture = 'fran\u00e7ais' AND ann_naissance > 1900 Cette requ\u00eate permet d'obtenir le nom des auteurs n\u00e9s apr\u00e8s 1900 qui \u00e9crivent en fran\u00e7ais (soit ici \"Barjavel\" et \"Boulle\") Il est aussi possible d'utiliser le OR \u00e0 la place du AND : SELECT nom FROM AUTEURS WHERE langue_ecriture = 'fran\u00e7ais' OR ann_naissance > 1920 Cette requ\u00eate permet d'obtenir le nom des auteurs qui \u00e9crivent en fran\u00e7ais (quelle que soit leur date de naissance) et des auteurs qui n'\u00e9crivent pas en fran\u00e7ais, mais qui sont n\u00e9s apr\u00e8s 1920 (soit ici \"Barjavel\", \"Boulle\", \"Verne\" et \"K.Dick\") c) mettre dans l'ordre les r\u00e9ponses : la clause ORDER BY Il est possible de classer les r\u00e9sultats d'une requ\u00eate par ordre croissant gr\u00e2ce \u00e0 la clause ORDER BY : SELECT nom FROM AUTEURS WHERE langue_ecriture = 'fran\u00e7ais' ORDER BY ann_naissance La requ\u00eate ci-dessus permettra d'obtenir le nom des auteurs \u00e9crivant en fran\u00e7ais class\u00e9 en fonction de leur ann\u00e9e de naissance (ici on obtiendra donc : \"Verne\", \"Barjavel\", \"Boulle\") En rajoutant DESC, on obtient l'ordre d\u00e9croissant : SELECT nom FROM AUTEURS WHERE langue_ecriture = 'fran\u00e7ais' ORDER BY ann_naissance DESC On obtiendra ici : \"Boulle\", \"Barjavel\", \"Verne\" \u00c0 noter que si la clause ORDER BY porte sur une chaine de caract\u00e8res, on obtient alors l'ordre alphab\u00e9tique : SELECT nom FROM AUTEURS WHERE langue_ecriture = 'fran\u00e7ais' ORDER BY nom On obtiendra : \"Barjavel\", \"Boulle\", \"Verne\" d) la clause DISTINCT Il est possible d'\u00e9viter les doublons dans une r\u00e9ponse gr\u00e2ce \u00e0 la clause DISTINCT. Imaginons la table suivante : Table MACHINES numero type proprietaire 1 X23 Marc 2 Y43 Pierre 3 Z24 Kevin 4 Y44 Marc La requ\u00eate suivante : SELECT proprietaire FROM MACHINES donnerait le r\u00e9sultat suivant : Marc, Pierre, Kevin, Marc Nous avons donc un doublon : Marc apparait 2 fois Pour \u00e9viter ce doublon, nous pouvons \u00e9crire : SELECT DISTINCT proprietaire FROM MACHINES qui nous donnera comme r\u00e9sultat : Marc, Pierre, Kevin e) les jointures Nous avons 2 tables, gr\u00e2ce aux jointures nous allons pouvoir associer ces 2 tables dans une m\u00eame requ\u00eate. En g\u00e9n\u00e9ral, les jointures consistent \u00e0 associer des lignes de 2 tables. Elles permettent d'\u00e9tablir un lien entre 2 tables. Qui dit lien entre 2 tables dit souvent cl\u00e9 \u00e9trang\u00e8re et cl\u00e9 primaire. Analysons la requ\u00eate suivante : SELECT * FROM LIVRES INNER JOIN AUTEURS ON LIVRES . id_auteur = AUTEURS . id Le \"FROM LIVRES INNER JOIN AUTEURS\" permet de cr\u00e9er une jointure entre les tables LIVRES et AUTEURS (\"rassembler\" les tables LIVRES et AUTEURS en une seule grande table). Le \"ON LIVRES.id_auteur = AUTEURS.id\" signifie qu'une ligne quelconque A de la table LIVRES devra \u00eatre fusionn\u00e9e avec la ligne B de la table AUTEURS \u00e0 condition que l'attribut id_auteur de la ligne A soit \u00e9gal \u00e0 l'attribut id de la ligne B. Par exemple, la ligne 1 (id=1) de la table LIVRES (que l'on nommera dans la suite ligne A) sera fusionn\u00e9e avec la ligne 1 (id=1) de la table AUTEURS (que l'on nommera dans la suite B) car l'attribut id_auteur de la ligne A est \u00e9gal \u00e0 1 et l'attribut id de la ligne B est aussi \u00e9gal \u00e0 1. Autre exemple, la ligne 1 (id=1) de la table LIVRES (que l'on nommera dans la suite ligne A) ne sera pas fusionn\u00e9e avec la ligne 2 (id=2) de la table AUTEURS (que l'on nommera dans la suite B') car l'attribut id_auteur de la ligne A est \u00e9gal \u00e0 1 alors que l'attribut id de la ligne B' est \u00e9gal \u00e0 2. Dans notre exemple l'attribut \"id_auteur\" de la tables LIVRES est bien une cl\u00e9 \u00e9trang\u00e8re puisque cet attribut correspond \u00e0 l'attribut \"id\" de la table \"AUTEURS\". La requ\u00eate ci-dessus permettra d'obtenir le r\u00e9sultat suivant : id titre id_auteur ann_publi note id nom prenom ann_naissance langue_ecriture 1 1984 1 1949 10 1 Orwell George 1903 anglais 2 Dune 2 1965 8 2 Herbert Frank 1920 anglais 3 Fondation 3 1951 9 3 Asimov Isaac 1920 anglais 4 Le meilleur des mondes 4 1931 7 4 Huxley Aldous 1894 anglais 5 Fahrenheit 451 5 1953 7 5 Bradbury Ray 1920 anglais 6 Ubik 6 1969 9 6 K.Dick Philip 1928 anglais 7 Chroniques martiennes 5 1950 8 5 Bradbury Ray 1920 anglais 8 La nuit des temps 7 1968 7 7 Barjavel Ren\u00e9 1911 fran\u00e7ais 9 Blade Runner 6 1968 8 6 K.Dick Philip 1928 anglais 10 Les Robots 3 1950 9 3 Asimov Isaac 1920 anglais 11 La Plan\u00e8te des singes 8 1963 8 8 Boulle Pierre 1912 fran\u00e7ais 12 Ravage 7 1943 8 7 Barjavel Ren\u00e9 1911 fran\u00e7ais 13 Le Ma\u00eetre du Haut Ch\u00e2teau 6 1962 8 6 K.Dick Philip 1928 anglais 14 Le monde des \u0100 9 1945 7 9 Van Vogt Alfred Elton 1912 anglais 15 La Fin de l\u2019\u00e9ternit\u00e9 3 1955 8 3 Asimov Isaac 1920 anglais 16 De la Terre \u00e0 la Lune 10 1865 10 10 Verne Jules 1828 fran\u00e7ais \u00c0 noter que pour \u00e9viter toute confusion il est souvent judicieux d'ajouter le nom de la table juste devant le nom de l'attribut : on \u00e9crira AUTEURS.id au lieu de simplement id, en effet, si on \u00e9crivait seulement id, il n'y aurait aucun moyen de distinguer l'id de la table LIVRES et l'id de la table AUTEURS. Je vous conseille d'adopter cette \u00e9criture syst\u00e9matiquement en cas de jointure, m\u00eame quand cela n'est pas obligatoire (par exemple on aurait pu \u00e9crire id_auteur \u00e0 la place de LIVRES.id_auteur puisqu'il y a uniquement un id_auteur dans la table LIVRES), cela vous permettra d'\u00e9viter certains d\u00e9boires. Dans le cas d'une jointure, il est tout \u00e0 fait possible de s\u00e9lectionner certains attributs et pas d'autres (aucune obligation de s\u00e9lectionner tous les attributs des 2 tables : SELECT LIVRES . titre , AUTEURS . nom , AUTEURS . prenom FROM AUTEURS INNER JOIN LIVRES ON LIVRES . id_auteur = AUTEURS . id On obtiendra alors une jointure uniquement avec l'attribut titre de la table LIVRES et les attributs nom, prenom de la table AUTEURS. titre nom prenom 1984 Orwell George Dune Herbert Frank Fondation Asimov Isaac Le meilleur des mondes Huxley Aldous Fahrenheit 451 Bradbury Ray Ubik K.Dick Philip Chroniques martiennes Bradbury Ray La nuit des temps Barjavel Ren\u00e9 Blade Runner K.Dick Philip Les Robots Asimov Isaac La Plan\u00e8te des singes Boulle Pierre Ravage Barjavel Ren\u00e9 Le Ma\u00eetre du Haut Ch\u00e2teau K.Dick Philip Le monde des \u0100 Van Vogt Alfred Elton La Fin de l\u2019\u00e9ternit\u00e9 Asimov Isaac De la Terre \u00e0 la Lune Verne Jules f) utilisation du WHERE dans les jointures Suite \u00e0 une jointure il est possible de s\u00e9lectionner certaines lignes gr\u00e2ce \u00e0 la clause WHERE : SELECT LIVRES . titre , AUTEURS . nom , AUTEURS . prenom FROM LIVRES INNER JOIN AUTEURS ON LIVRES . id_auteur = AUTEURS . id WHERE LIVRES . ann_publi > 1965 On obtient avec cette requ\u00eate le r\u00e9sultat suivant : titre nom prenom Ubik K.Dick Philip La nuit des temps Barjavel Ren\u00e9 Blade Runner K.Dick Philip g) les jointures plus complexes Pour terminer avec les jointures, vous devez savoir que nous avons abord\u00e9 la jointure la plus simple (INNER JOIN). Il existe des jointures plus complexes (CROSS JOIN, LEFT JOIN, RIGHT JOIN), ces autres jointures ne seront pas abord\u00e9es dans ce cours. 3) requ\u00eates d'insertion Il est possible d'ajouter une entr\u00e9e \u00e0 une table gr\u00e2ce \u00e0 une requ\u00eate d'insertion : INSERT INTO LIVRES ( id , titre , id_auteur , ann_publi , note ) VALUES ( 17 , 'Hyp\u00e9rion' , 11 , 1989 , 8 ); On emploie les mots cl\u00e9s INSERT INTO suivi de la table concern\u00e9e (ici LIVRES). Ensuite on indique les noms des attributs que l'on d\u00e9sire ajouter (ici (id,titre,auteur,ann_publi,note)), et enfin pour terminer les valeurs de chaque attribut (ici (17,'Hyp\u00e9rion','Simmons',1989,8), attention \u00e0 bien respecter l'ordre : 17 correspond \u00e0 id, Hyp\u00e9rion correspond au titre, 11 correspond \u00e0 id_auteur, 1989 correspond \u00e0 ann_publi et 8 correspond \u00e0 note). 4) requ\u00eates de mise \u00e0 jour \"UPDATE\" va permettre de modifier une ou des entr\u00e9es. Nous utiliserons \"WHERE\", comme dans le cas d'un \"SELECT\", pour sp\u00e9cifier les entr\u00e9es \u00e0 modifier. Voici un exemple de modification : UPDATE LIVRES SET note = 7 WHERE titre = 'Hyp\u00e9rion' Cette requ\u00eate permet de modifier la note du(des) livre(s) ayant pour titre Hyp\u00e9rion 5) requ\u00eates de suppression \"DELETE\" est utilis\u00e9e pour effectuer la suppression d'une (ou de plusieurs) entr\u00e9e(s). Ici aussi c'est le \"WHERE\" qui permettra de s\u00e9lectionner les entr\u00e9es \u00e0 supprimer : DELETE FROM LIVRES WHERE titre = 'Hyp\u00e9rion' Cette requ\u00eate permet de supprimer le(les) livre(s) ayant pour titre Hyp\u00e9rion Attention \u00e0 l'utilisation de cette requ\u00eate DELETE notamment si on oublie le WHERE. Un : DELETE FROM LIVRES supprimerait toutes les entr\u00e9es de la table LIVRES","title":"Cours"},{"location":"c3c/#1-introduction","text":"Nous avons eu l'occasion d'\u00e9tudier la structure d'une base de donn\u00e9es relationnelle, nous allons maintenant apprendre \u00e0 r\u00e9aliser des requ\u00eates, c'est-\u00e0-dire que nous allons apprendre \u00e0 cr\u00e9er une base des donn\u00e9es, cr\u00e9er des attributs, ajouter de donn\u00e9es, modifier des donn\u00e9es et enfin, nous allons surtout apprendre \u00e0 interroger une base de donn\u00e9es afin d'obtenir des informations. Pour r\u00e9aliser toutes ces requ\u00eates, nous allons devoir apprendre un langage de requ\u00eates : SQL (Structured Query Language). SQL est propre aux bases de donn\u00e9es relationnelles, les autres types de bases de donn\u00e9es utilisent d'autres langages pour effectuer des requ\u00eates. Dans ce cours nous allons travailler avec SQLite. SQLite est un syst\u00e8me de gestion de base de donn\u00e9es relationnelle tr\u00e8s r\u00e9pandu. Noter qu'il existe d'autres syst\u00e8mes de gestion de base de donn\u00e9es relationnelle comme MySQL ou PostgreSQL. Dans tous les cas, le langage de requ\u00eate utilis\u00e9 est le SQL (m\u00eame si parfois on peut noter quelques petites diff\u00e9rences). Ce qui sera vu ici avec SQLite pourra, \u00e0 quelques petites modifications pr\u00e8s, \u00eatre utilis\u00e9 avec, par exemple, MySQL. Pendant ce cours nous allons travailler avec les 2 tables (relations) suivantes : Table AUTEURS id nom prenom ann_naissance langue_ecriture 1 Orwell George 1903 anglais 2 Herbert Frank 1920 anglais 3 Asimov Isaac 1920 anglais 4 Huxley Aldous 1894 anglais 5 Bradbury Ray 1920 anglais 6 K.Dick Philip 1928 anglais 7 Barjavel Ren\u00e9 1911 fran\u00e7ais 8 Boulle Pierre 1912 fran\u00e7ais 9 Van Vogt Alfred Elton 1912 anglais 10 Verne Jules 1828 fran\u00e7ais Table LIVRES id titre id_auteur ann_publi note 1 1984 1 1949 10 2 Dune 2 1965 8 3 Fondation 3 1951 9 4 Le meilleur des mondes 4 1931 7 5 Fahrenheit 451 5 1953 7 6 Ubik 6 1969 9 7 Chroniques martiennes 5 1950 8 8 La nuit des temps 7 1968 7 9 Blade Runner 6 1968 8 10 Les Robots 3 1950 9 11 La Plan\u00e8te des singes 8 1963 8 12 Ravage 7 1943 8 13 Le Ma\u00eetre du Haut Ch\u00e2teau 6 1962 8 14 Le monde des \u0100 9 1945 7 15 La Fin de l\u2019\u00e9ternit\u00e9 3 1955 8 16 De la Terre \u00e0 la Lune 10 1865 10","title":"1) introduction"},{"location":"c3c/#2-requetes-dinterrogation","text":"","title":"2) requ\u00eates d'interrogation"},{"location":"c3c/#a-requetes-dinterrogation-simples","text":"Quand on d\u00e9sire extraire des informations d'une table, on effectue une requ\u00eate d'interrogation \u00e0 l'aide du mot cl\u00e9 SELECT. Voici un exemple de requ\u00eate d'interrogation : SELECT id , titre , id_auteur , ann_publi , note FROM LIVRES Cette requ\u00eate va nous permettre d'obtenir l'id, le titre, l'id de l'auteur, l'ann\u00e9e de publication et la note de tous les livres pr\u00e9sents dans la table LIVRES. D'une fa\u00e7on g\u00e9n\u00e9rale, le mot cl\u00e9 SELECT est suivi par les attributs que l'on d\u00e9sire obtenir. Le mot cl\u00e9 FROM est suivi par la table concern\u00e9e. Il est possible d'obtenir uniquement certains attributs. Par exemple : SELECT nom , prenom FROM AUTEURS nous permettra d'obtenir le nom et le pr\u00e9nom de tous les auteurs pr\u00e9sents dans la table AUTEURS. \u00c0 noter qu'il est possible d'obtenir tous les attributs sans \u00eatre oblig\u00e9 de tous les noter gr\u00e2ce au caract\u00e8re \u00e9toile * : SELECT * FROM AUTEURS sera \u00e9quivalent \u00e0 SELECT id , nom , prenom , ann_naissance , langue_ecriture FROM AUTEURS","title":"a) requ\u00eates d'interrogation \"simples\""},{"location":"c3c/#b-selectionner-certaines-lignes-la-clause-where","text":"Il est possible d'utiliser la clause WHERE afin d'imposer une (ou des) condition(s) permettant de s\u00e9lectionner uniquement certaines lignes. La condition doit suivre le mot-cl\u00e9 WHERE : SELECT titre FROM LIVRES WHERE note > 9 La requ\u00eate ci-dessus permettra d'afficher uniquement les titres qui ont une note strictement sup\u00e9rieure \u00e0 9 (soit \"1984\" et \"De la Terre \u00e0 la Lune\") Il est possible de combiner les conditions \u00e0 l'aide d'un OR ou d'un AND : SELECT nom FROM AUTEURS WHERE langue_ecriture = 'fran\u00e7ais' AND ann_naissance > 1900 Cette requ\u00eate permet d'obtenir le nom des auteurs n\u00e9s apr\u00e8s 1900 qui \u00e9crivent en fran\u00e7ais (soit ici \"Barjavel\" et \"Boulle\") Il est aussi possible d'utiliser le OR \u00e0 la place du AND : SELECT nom FROM AUTEURS WHERE langue_ecriture = 'fran\u00e7ais' OR ann_naissance > 1920 Cette requ\u00eate permet d'obtenir le nom des auteurs qui \u00e9crivent en fran\u00e7ais (quelle que soit leur date de naissance) et des auteurs qui n'\u00e9crivent pas en fran\u00e7ais, mais qui sont n\u00e9s apr\u00e8s 1920 (soit ici \"Barjavel\", \"Boulle\", \"Verne\" et \"K.Dick\")","title":"b) s\u00e9lectionner certaines lignes : la clause WHERE"},{"location":"c3c/#c-mettre-dans-lordre-les-reponses-la-clause-order-by","text":"Il est possible de classer les r\u00e9sultats d'une requ\u00eate par ordre croissant gr\u00e2ce \u00e0 la clause ORDER BY : SELECT nom FROM AUTEURS WHERE langue_ecriture = 'fran\u00e7ais' ORDER BY ann_naissance La requ\u00eate ci-dessus permettra d'obtenir le nom des auteurs \u00e9crivant en fran\u00e7ais class\u00e9 en fonction de leur ann\u00e9e de naissance (ici on obtiendra donc : \"Verne\", \"Barjavel\", \"Boulle\") En rajoutant DESC, on obtient l'ordre d\u00e9croissant : SELECT nom FROM AUTEURS WHERE langue_ecriture = 'fran\u00e7ais' ORDER BY ann_naissance DESC On obtiendra ici : \"Boulle\", \"Barjavel\", \"Verne\" \u00c0 noter que si la clause ORDER BY porte sur une chaine de caract\u00e8res, on obtient alors l'ordre alphab\u00e9tique : SELECT nom FROM AUTEURS WHERE langue_ecriture = 'fran\u00e7ais' ORDER BY nom On obtiendra : \"Barjavel\", \"Boulle\", \"Verne\"","title":"c) mettre dans l'ordre les r\u00e9ponses : la clause ORDER BY"},{"location":"c3c/#d-la-clause-distinct","text":"Il est possible d'\u00e9viter les doublons dans une r\u00e9ponse gr\u00e2ce \u00e0 la clause DISTINCT. Imaginons la table suivante : Table MACHINES numero type proprietaire 1 X23 Marc 2 Y43 Pierre 3 Z24 Kevin 4 Y44 Marc La requ\u00eate suivante : SELECT proprietaire FROM MACHINES donnerait le r\u00e9sultat suivant : Marc, Pierre, Kevin, Marc Nous avons donc un doublon : Marc apparait 2 fois Pour \u00e9viter ce doublon, nous pouvons \u00e9crire : SELECT DISTINCT proprietaire FROM MACHINES qui nous donnera comme r\u00e9sultat : Marc, Pierre, Kevin","title":"d) la clause DISTINCT"},{"location":"c3c/#e-les-jointures","text":"Nous avons 2 tables, gr\u00e2ce aux jointures nous allons pouvoir associer ces 2 tables dans une m\u00eame requ\u00eate. En g\u00e9n\u00e9ral, les jointures consistent \u00e0 associer des lignes de 2 tables. Elles permettent d'\u00e9tablir un lien entre 2 tables. Qui dit lien entre 2 tables dit souvent cl\u00e9 \u00e9trang\u00e8re et cl\u00e9 primaire. Analysons la requ\u00eate suivante : SELECT * FROM LIVRES INNER JOIN AUTEURS ON LIVRES . id_auteur = AUTEURS . id Le \"FROM LIVRES INNER JOIN AUTEURS\" permet de cr\u00e9er une jointure entre les tables LIVRES et AUTEURS (\"rassembler\" les tables LIVRES et AUTEURS en une seule grande table). Le \"ON LIVRES.id_auteur = AUTEURS.id\" signifie qu'une ligne quelconque A de la table LIVRES devra \u00eatre fusionn\u00e9e avec la ligne B de la table AUTEURS \u00e0 condition que l'attribut id_auteur de la ligne A soit \u00e9gal \u00e0 l'attribut id de la ligne B. Par exemple, la ligne 1 (id=1) de la table LIVRES (que l'on nommera dans la suite ligne A) sera fusionn\u00e9e avec la ligne 1 (id=1) de la table AUTEURS (que l'on nommera dans la suite B) car l'attribut id_auteur de la ligne A est \u00e9gal \u00e0 1 et l'attribut id de la ligne B est aussi \u00e9gal \u00e0 1. Autre exemple, la ligne 1 (id=1) de la table LIVRES (que l'on nommera dans la suite ligne A) ne sera pas fusionn\u00e9e avec la ligne 2 (id=2) de la table AUTEURS (que l'on nommera dans la suite B') car l'attribut id_auteur de la ligne A est \u00e9gal \u00e0 1 alors que l'attribut id de la ligne B' est \u00e9gal \u00e0 2. Dans notre exemple l'attribut \"id_auteur\" de la tables LIVRES est bien une cl\u00e9 \u00e9trang\u00e8re puisque cet attribut correspond \u00e0 l'attribut \"id\" de la table \"AUTEURS\". La requ\u00eate ci-dessus permettra d'obtenir le r\u00e9sultat suivant : id titre id_auteur ann_publi note id nom prenom ann_naissance langue_ecriture 1 1984 1 1949 10 1 Orwell George 1903 anglais 2 Dune 2 1965 8 2 Herbert Frank 1920 anglais 3 Fondation 3 1951 9 3 Asimov Isaac 1920 anglais 4 Le meilleur des mondes 4 1931 7 4 Huxley Aldous 1894 anglais 5 Fahrenheit 451 5 1953 7 5 Bradbury Ray 1920 anglais 6 Ubik 6 1969 9 6 K.Dick Philip 1928 anglais 7 Chroniques martiennes 5 1950 8 5 Bradbury Ray 1920 anglais 8 La nuit des temps 7 1968 7 7 Barjavel Ren\u00e9 1911 fran\u00e7ais 9 Blade Runner 6 1968 8 6 K.Dick Philip 1928 anglais 10 Les Robots 3 1950 9 3 Asimov Isaac 1920 anglais 11 La Plan\u00e8te des singes 8 1963 8 8 Boulle Pierre 1912 fran\u00e7ais 12 Ravage 7 1943 8 7 Barjavel Ren\u00e9 1911 fran\u00e7ais 13 Le Ma\u00eetre du Haut Ch\u00e2teau 6 1962 8 6 K.Dick Philip 1928 anglais 14 Le monde des \u0100 9 1945 7 9 Van Vogt Alfred Elton 1912 anglais 15 La Fin de l\u2019\u00e9ternit\u00e9 3 1955 8 3 Asimov Isaac 1920 anglais 16 De la Terre \u00e0 la Lune 10 1865 10 10 Verne Jules 1828 fran\u00e7ais \u00c0 noter que pour \u00e9viter toute confusion il est souvent judicieux d'ajouter le nom de la table juste devant le nom de l'attribut : on \u00e9crira AUTEURS.id au lieu de simplement id, en effet, si on \u00e9crivait seulement id, il n'y aurait aucun moyen de distinguer l'id de la table LIVRES et l'id de la table AUTEURS. Je vous conseille d'adopter cette \u00e9criture syst\u00e9matiquement en cas de jointure, m\u00eame quand cela n'est pas obligatoire (par exemple on aurait pu \u00e9crire id_auteur \u00e0 la place de LIVRES.id_auteur puisqu'il y a uniquement un id_auteur dans la table LIVRES), cela vous permettra d'\u00e9viter certains d\u00e9boires. Dans le cas d'une jointure, il est tout \u00e0 fait possible de s\u00e9lectionner certains attributs et pas d'autres (aucune obligation de s\u00e9lectionner tous les attributs des 2 tables : SELECT LIVRES . titre , AUTEURS . nom , AUTEURS . prenom FROM AUTEURS INNER JOIN LIVRES ON LIVRES . id_auteur = AUTEURS . id On obtiendra alors une jointure uniquement avec l'attribut titre de la table LIVRES et les attributs nom, prenom de la table AUTEURS. titre nom prenom 1984 Orwell George Dune Herbert Frank Fondation Asimov Isaac Le meilleur des mondes Huxley Aldous Fahrenheit 451 Bradbury Ray Ubik K.Dick Philip Chroniques martiennes Bradbury Ray La nuit des temps Barjavel Ren\u00e9 Blade Runner K.Dick Philip Les Robots Asimov Isaac La Plan\u00e8te des singes Boulle Pierre Ravage Barjavel Ren\u00e9 Le Ma\u00eetre du Haut Ch\u00e2teau K.Dick Philip Le monde des \u0100 Van Vogt Alfred Elton La Fin de l\u2019\u00e9ternit\u00e9 Asimov Isaac De la Terre \u00e0 la Lune Verne Jules","title":"e) les jointures"},{"location":"c3c/#f-utilisation-du-where-dans-les-jointures","text":"Suite \u00e0 une jointure il est possible de s\u00e9lectionner certaines lignes gr\u00e2ce \u00e0 la clause WHERE : SELECT LIVRES . titre , AUTEURS . nom , AUTEURS . prenom FROM LIVRES INNER JOIN AUTEURS ON LIVRES . id_auteur = AUTEURS . id WHERE LIVRES . ann_publi > 1965 On obtient avec cette requ\u00eate le r\u00e9sultat suivant : titre nom prenom Ubik K.Dick Philip La nuit des temps Barjavel Ren\u00e9 Blade Runner K.Dick Philip","title":"f) utilisation du WHERE dans les jointures"},{"location":"c3c/#g-les-jointures-plus-complexes","text":"Pour terminer avec les jointures, vous devez savoir que nous avons abord\u00e9 la jointure la plus simple (INNER JOIN). Il existe des jointures plus complexes (CROSS JOIN, LEFT JOIN, RIGHT JOIN), ces autres jointures ne seront pas abord\u00e9es dans ce cours.","title":"g) les jointures plus complexes"},{"location":"c3c/#3-requetes-dinsertion","text":"Il est possible d'ajouter une entr\u00e9e \u00e0 une table gr\u00e2ce \u00e0 une requ\u00eate d'insertion : INSERT INTO LIVRES ( id , titre , id_auteur , ann_publi , note ) VALUES ( 17 , 'Hyp\u00e9rion' , 11 , 1989 , 8 ); On emploie les mots cl\u00e9s INSERT INTO suivi de la table concern\u00e9e (ici LIVRES). Ensuite on indique les noms des attributs que l'on d\u00e9sire ajouter (ici (id,titre,auteur,ann_publi,note)), et enfin pour terminer les valeurs de chaque attribut (ici (17,'Hyp\u00e9rion','Simmons',1989,8), attention \u00e0 bien respecter l'ordre : 17 correspond \u00e0 id, Hyp\u00e9rion correspond au titre, 11 correspond \u00e0 id_auteur, 1989 correspond \u00e0 ann_publi et 8 correspond \u00e0 note).","title":"3) requ\u00eates d'insertion"},{"location":"c3c/#4-requetes-de-mise-a-jour","text":"\"UPDATE\" va permettre de modifier une ou des entr\u00e9es. Nous utiliserons \"WHERE\", comme dans le cas d'un \"SELECT\", pour sp\u00e9cifier les entr\u00e9es \u00e0 modifier. Voici un exemple de modification : UPDATE LIVRES SET note = 7 WHERE titre = 'Hyp\u00e9rion' Cette requ\u00eate permet de modifier la note du(des) livre(s) ayant pour titre Hyp\u00e9rion","title":"4) requ\u00eates de mise \u00e0 jour"},{"location":"c3c/#5-requetes-de-suppression","text":"\"DELETE\" est utilis\u00e9e pour effectuer la suppression d'une (ou de plusieurs) entr\u00e9e(s). Ici aussi c'est le \"WHERE\" qui permettra de s\u00e9lectionner les entr\u00e9es \u00e0 supprimer : DELETE FROM LIVRES WHERE titre = 'Hyp\u00e9rion' Cette requ\u00eate permet de supprimer le(les) livre(s) ayant pour titre Hyp\u00e9rion Attention \u00e0 l'utilisation de cette requ\u00eate DELETE notamment si on oublie le WHERE. Un : DELETE FROM LIVRES supprimerait toutes les entr\u00e9es de la table LIVRES","title":"5) requ\u00eates de suppression"},{"location":"c3e/","text":"exercice 3.1 Un ski-club utilise une base de donn\u00e9es constitu\u00e9e de 2 tables : une table ADHERENTS une table STATIONS Dans la table ADHERENTS on trouve un attribut \u201cref_station\u201d qui permet de conna\u00eetre les stations de ski pr\u00e9f\u00e9r\u00e9es des adh\u00e9rents. Table ADHERENTS num_licence nom prenom annee_naissance ref_station 12558 Doe John 1988 5 13668 Vect Alice 1974 6 1777 Dect Bob 1967 3 13447 Beau Tristan 1999 4 1141 Pabeau John 1975 3 table STATIONS ref nom altitude_max 3 Le grand Bornand 2050 4 La clusaz 2616 5 Flaine 2510 6 Avoriaz 2466 Comment appelle-t-on l\u2019attribut ref_station de la table ADHERENTS ? \u00c9crire la requ\u00eate SQL permettant d\u2019obtenir le nom des stations ayant une altitude maxi strictement sup\u00e9rieure \u00e0 2500 m. \u00c9crire une requ\u00eate SQL permettant d\u2019obtenir le num\u00e9ro de licence des adh\u00e9rents n\u00e9s apr\u00e8s 1980 et ayant pour pr\u00e9nom John. Donnez le r\u00e9sultat de la requ\u00eate SQL suivante : SELECT nom FROM ADHERENTS WHERE num_licence > 2000 OR ref_station = 3 5. Donnez le r\u00e9sultat de la requ\u00eate SQL suivante : SELECT STATIONS . nom FROM STATIONS INNER JOIN ADHERENTS ON ADHERENTS . ref_station = STATIONS . ref WHERE annee_naissance > 1975 exercices du bac Sujet 1 2021 Exercice 4 Sujet 2 2021 Exercice 3 Sujet 3 2021 Exercice 2 Sujet 4 2021 Exercice 1 Sujet 5 2021 Exercice 1 Sujet 7 2021 Exercice 4 Sujet 8 2021 Exercice 1 Sujet 10 2021 Exercice 3 Sujet 1 2022 Exercice 3 Sujet 2 2022 Exercice 2 Sujet 3 2022 Exercice 4 Sujet 4 2022 Exercice 1 Sujet 5 2022 Exercice 3 Sujet 6 2022 Exercice 4 Sujet 7 2022 Exercice 3 Sujet 8 2022 Exercice 2 Sujet 9 2022 Exercice 4 Sujet 10 2022 Exercice 3 Sujet 11 2022 Exercice 2 Sujet 12 2022 Exercice 3 Sujet 13 2022 Exercice 1 Sujet 14 2022 Exercice 3","title":"Exercices"},{"location":"c3e/#exercice-31","text":"Un ski-club utilise une base de donn\u00e9es constitu\u00e9e de 2 tables : une table ADHERENTS une table STATIONS Dans la table ADHERENTS on trouve un attribut \u201cref_station\u201d qui permet de conna\u00eetre les stations de ski pr\u00e9f\u00e9r\u00e9es des adh\u00e9rents. Table ADHERENTS num_licence nom prenom annee_naissance ref_station 12558 Doe John 1988 5 13668 Vect Alice 1974 6 1777 Dect Bob 1967 3 13447 Beau Tristan 1999 4 1141 Pabeau John 1975 3 table STATIONS ref nom altitude_max 3 Le grand Bornand 2050 4 La clusaz 2616 5 Flaine 2510 6 Avoriaz 2466 Comment appelle-t-on l\u2019attribut ref_station de la table ADHERENTS ? \u00c9crire la requ\u00eate SQL permettant d\u2019obtenir le nom des stations ayant une altitude maxi strictement sup\u00e9rieure \u00e0 2500 m. \u00c9crire une requ\u00eate SQL permettant d\u2019obtenir le num\u00e9ro de licence des adh\u00e9rents n\u00e9s apr\u00e8s 1980 et ayant pour pr\u00e9nom John. Donnez le r\u00e9sultat de la requ\u00eate SQL suivante : SELECT nom FROM ADHERENTS WHERE num_licence > 2000 OR ref_station = 3 5. Donnez le r\u00e9sultat de la requ\u00eate SQL suivante : SELECT STATIONS . nom FROM STATIONS INNER JOIN ADHERENTS ON ADHERENTS . ref_station = STATIONS . ref WHERE annee_naissance > 1975","title":"exercice 3.1"},{"location":"c3e/#exercices-du-bac","text":"Sujet 1 2021 Exercice 4 Sujet 2 2021 Exercice 3 Sujet 3 2021 Exercice 2 Sujet 4 2021 Exercice 1 Sujet 5 2021 Exercice 1 Sujet 7 2021 Exercice 4 Sujet 8 2021 Exercice 1 Sujet 10 2021 Exercice 3 Sujet 1 2022 Exercice 3 Sujet 2 2022 Exercice 2 Sujet 3 2022 Exercice 4 Sujet 4 2022 Exercice 1 Sujet 5 2022 Exercice 3 Sujet 6 2022 Exercice 4 Sujet 7 2022 Exercice 3 Sujet 8 2022 Exercice 2 Sujet 9 2022 Exercice 4 Sujet 10 2022 Exercice 3 Sujet 11 2022 Exercice 2 Sujet 12 2022 Exercice 3 Sujet 13 2022 Exercice 1 Sujet 14 2022 Exercice 3","title":"exercices du bac"},{"location":"c3r/","text":"Ce qu\u2019il faut savoir Pour consulter des donn\u00e9es, ajouter une entr\u00e9e, modifier une entr\u00e9e ou supprimer une entr\u00e9e dans une base de donn\u00e9es relationnelle, il est n\u00e9cessaire d\u2019effectuer des \u201crequ\u00eates SQL\u201d (utilisation du langage SQL) Pour ajouter des entr\u00e9es \u00e0 une table, on utilisera \u201cINSERT\u201d (exemple : INSERT INTO LIVRES (id,titre,auteur,ann_publi,note) VALUES (1,'1984','Orwell',1949,10);) Pour interroger une table, on utilisera \u201cSELECT\u201d (exemple : SELECT titre FROM LIVRES WHERE auteur='Asimov') Pour modifier une entr\u00e9e, on utilisera \u201cUPDATE\u201d (exemple : UPDATE LIVRES SET note=7 WHERE titre = 'Hyp\u00e9rion') Pour supprimer une entr\u00e9e, on utilisera \u201cDELETE\u201d (exemple : DELETE FROM LIVRES WHERE titre='Hyp\u00e9rion') Pour r\u00e9aliser une jointure, il est possible d\u2019utiliser \u201cINNER JOIN\u201d (exemple : SELECT FROM LIVRES INNER JOIN AUTEURS ON LIVRES.id_auteur = AUTEURS.id) Ce qu\u2019il faut savoir faire Vous devez \u00eatre capable d\u2019effectuer des requ\u00eates SQL simples (utilisation de \u201cINSERT\u201d, \u201cSELECT\u201d, \u201cUPDATE\u201d et \u201cDELETE\u201d) Vous devez \u00eatre capable d\u2019effectuer une jointure entre 2 tables (utilisation de \u201cINNER JOIN\u201d)","title":"R\u00e9vision"},{"location":"c3r/#ce-quil-faut-savoir","text":"Pour consulter des donn\u00e9es, ajouter une entr\u00e9e, modifier une entr\u00e9e ou supprimer une entr\u00e9e dans une base de donn\u00e9es relationnelle, il est n\u00e9cessaire d\u2019effectuer des \u201crequ\u00eates SQL\u201d (utilisation du langage SQL) Pour ajouter des entr\u00e9es \u00e0 une table, on utilisera \u201cINSERT\u201d (exemple : INSERT INTO LIVRES (id,titre,auteur,ann_publi,note) VALUES (1,'1984','Orwell',1949,10);) Pour interroger une table, on utilisera \u201cSELECT\u201d (exemple : SELECT titre FROM LIVRES WHERE auteur='Asimov') Pour modifier une entr\u00e9e, on utilisera \u201cUPDATE\u201d (exemple : UPDATE LIVRES SET note=7 WHERE titre = 'Hyp\u00e9rion') Pour supprimer une entr\u00e9e, on utilisera \u201cDELETE\u201d (exemple : DELETE FROM LIVRES WHERE titre='Hyp\u00e9rion') Pour r\u00e9aliser une jointure, il est possible d\u2019utiliser \u201cINNER JOIN\u201d (exemple : SELECT FROM LIVRES INNER JOIN AUTEURS ON LIVRES.id_auteur = AUTEURS.id)","title":"Ce qu\u2019il faut savoir"},{"location":"c3r/#ce-quil-faut-savoir-faire","text":"Vous devez \u00eatre capable d\u2019effectuer des requ\u00eates SQL simples (utilisation de \u201cINSERT\u201d, \u201cSELECT\u201d, \u201cUPDATE\u201d et \u201cDELETE\u201d) Vous devez \u00eatre capable d\u2019effectuer une jointure entre 2 tables (utilisation de \u201cINNER JOIN\u201d)","title":"Ce qu\u2019il faut savoir faire"},{"location":"c4a/","text":"activit\u00e9 4.1 On rappelle que la suite de Fibonacci est d\u00e9finie comme suit : u 0 = 0 et u 1 = 1 et par la relation de r\u00e9currence suivante avec n entier et n > 1 : u n = u n-1 + u n-2 \u00c9crivez une fonction r\u00e9cursive fib qui donnera le (n+1)i\u00e8me terme de la suite de Fibonacci (la suite commence avec n = 0 donc pour le 4e terme, nous avons n = 3). Cette fonction prendra en param\u00e8tre l'entier n. activit\u00e9 4.2 Dans cette activt\u00e9, nous allons utiliser le module Python Turtle. Ce module permet de dessiner tr\u00e8s simplement. \u00c9tudiez le Wikibook consacr\u00e9 au module Turtle ( wikibook Turtle ) afin d'acqu\u00e9rir les bases de ce module. Essayez de pr\u00e9voir le r\u00e9sultat de l'ex\u00e9cution du programme ci-dessus. V\u00e9rifiez votre hypoth\u00e8se en ex\u00e9cutant le programme. import turtle as t t . forward ( 100 ) t . left ( 120 ) t . forward ( 100 ) t . left ( 120 ) t . forward ( 100 ) Nous allons maintenant \u00e9tudier le flocon de Koch. Visionnez la vid\u00e9o consacr\u00e9e au flocon de Koch : vid\u00e9o consacr\u00e9e au flocon de Koch Apr\u00e8s avoir test\u00e9 le programme ci-dessous, vous l'\u00e9tudierez attentivement. Vous vous concentrerez notamment sur le r\u00f4le des param\u00e8tres taille et etape de la fonction flocon. import turtle as t def koch ( longueur , n ): if n == 0 : t . forward ( longueur ) else : koch ( longueur / 3 , n - 1 ) t . left ( 60 ) koch ( longueur / 3 , n - 1 ) t . right ( 120 ) koch ( longueur / 3 , n - 1 ) t . left ( 60 ) koch ( longueur / 3 , n - 1 ) def flocon ( taille , etape ): koch ( taille , etape ) t . right ( 120 ) koch ( taille , etape ) t . right ( 120 ) koch ( taille , etape ) flocon ( 100 , 3 )","title":"Activit\u00e9s"},{"location":"c4a/#activite-41","text":"On rappelle que la suite de Fibonacci est d\u00e9finie comme suit : u 0 = 0 et u 1 = 1 et par la relation de r\u00e9currence suivante avec n entier et n > 1 : u n = u n-1 + u n-2 \u00c9crivez une fonction r\u00e9cursive fib qui donnera le (n+1)i\u00e8me terme de la suite de Fibonacci (la suite commence avec n = 0 donc pour le 4e terme, nous avons n = 3). Cette fonction prendra en param\u00e8tre l'entier n.","title":"activit\u00e9 4.1"},{"location":"c4a/#activite-42","text":"Dans cette activt\u00e9, nous allons utiliser le module Python Turtle. Ce module permet de dessiner tr\u00e8s simplement. \u00c9tudiez le Wikibook consacr\u00e9 au module Turtle ( wikibook Turtle ) afin d'acqu\u00e9rir les bases de ce module. Essayez de pr\u00e9voir le r\u00e9sultat de l'ex\u00e9cution du programme ci-dessus. V\u00e9rifiez votre hypoth\u00e8se en ex\u00e9cutant le programme. import turtle as t t . forward ( 100 ) t . left ( 120 ) t . forward ( 100 ) t . left ( 120 ) t . forward ( 100 ) Nous allons maintenant \u00e9tudier le flocon de Koch. Visionnez la vid\u00e9o consacr\u00e9e au flocon de Koch : vid\u00e9o consacr\u00e9e au flocon de Koch Apr\u00e8s avoir test\u00e9 le programme ci-dessous, vous l'\u00e9tudierez attentivement. Vous vous concentrerez notamment sur le r\u00f4le des param\u00e8tres taille et etape de la fonction flocon. import turtle as t def koch ( longueur , n ): if n == 0 : t . forward ( longueur ) else : koch ( longueur / 3 , n - 1 ) t . left ( 60 ) koch ( longueur / 3 , n - 1 ) t . right ( 120 ) koch ( longueur / 3 , n - 1 ) t . left ( 60 ) koch ( longueur / 3 , n - 1 ) def flocon ( taille , etape ): koch ( taille , etape ) t . right ( 120 ) koch ( taille , etape ) t . right ( 120 ) koch ( taille , etape ) flocon ( 100 , 3 )","title":"activit\u00e9 4.2"},{"location":"c4c/","text":"Consid\u00e9rons le programme suivant : def fctA (): print ( \"D\u00e9but fonction fctA\" ) i = 0 while i < 5 : print ( f \"fctA { i } \" ) i = i + 1 print ( \"Fin fonction fctA\" ) def fctB (): print ( \"D\u00e9but fonction fctB\" ) i = 0 while i < 5 : if i == 3 : fctA () print ( \"Retour \u00e0 la fonction fctB\" ) print ( f \"fctB { i } \" ) i = i + 1 print ( \"Fin fonction fctB\" ) fctB () l'ex\u00e9cution de ce programme donne le r\u00e9sultat suivant : D\u00e9but fonction fctB fctB 0 fctB 1 fctB 2 D\u00e9but fonction fctA fctA 0 fctA 1 fctA 2 fctA 3 fctA 4 Fin fonction fctA Retour \u00e0 la fonction fctB fctB 3 fctB 4 Fin fonction fctB Dans l'exemple ci-dessus, nous avons une fonction (fctB) qui appelle une autre fonction (fctA). La principale chose \u00e0 retenir de cet exemple est que l'ex\u00e9cution de fctB est interrompue pendant l'ex\u00e9cution de fctA. Une fois l'ex\u00e9cution de fctA termin\u00e9e, l'ex\u00e9cution de fctB reprendra l\u00e0 o\u00f9 elle avait \u00e9t\u00e9 interrompue. Pour g\u00e9rer ces fonctions qui appellent d'autres fonctions, le syst\u00e8me utilise une \"pile d'ex\u00e9cution\". Une pile d'ex\u00e9cution permet d'enregistrer des informations sur les fonctions en cours d'ex\u00e9cution dans un programme. On parle de pile, car les ex\u00e9cutions successives \"s'empilent\" les unes sur les autres. Si nous nous int\u00e9ressons \u00e0 la pile d'ex\u00e9cution du programme \u00e9tudi\u00e9 ci-dessus, nous obtenons le sch\u00e9ma suivant : Nous pouvons \"d\u00e9couper\" l'ex\u00e9cution de ce programme en 3 parties : la fonction fctB s'ex\u00e9cute jusqu'\u00e0 l'appel de la fonction fctA l'ex\u00e9cution de la fctB est mise en \"pause\" pendant l'ex\u00e9cution de la fonction fctA une fois que l'ex\u00e9cution de fctA est termin\u00e9e, on termine l'ex\u00e9cution de la fonction fctB Il est important de bien comprendre que la fonction situ\u00e9e au sommet de la pile d'ex\u00e9cution est en cours d'ex\u00e9cution. Toutes les fonctions situ\u00e9es \"en dessous\" sont mises en pause jusqu'au moment o\u00f9 elles se retrouveront au sommet de la pile. Quand une fonction termine son ex\u00e9cution, elle est automatiquement retir\u00e9e du sommet de la pile (on dit que la fonction est d\u00e9pil\u00e9e). La pile d'ex\u00e9cution permet de retenir la prochaine instruction \u00e0 ex\u00e9cuter au moment o\u00f9 une fonction sera sortie de son \"\"\u00e9tat de pause\" (qu'elle se retrouvera au sommet de la pile d'ex\u00e9cution) : \u00c9videmment l'explication donn\u00e9e ci-dessus est quelque peu simpliste : c'est l'adresse m\u00e9moire de la prochaine instruction machine \u00e0 ex\u00e9cuter qui est conserv\u00e9e dans la pile d'ex\u00e9cution Dans l'exemple ci-dessus, on retrouve une variable i dans les deux fonctions : fctA et fctB. La variable i pr\u00e9sente dans la fonction fctA n'a rien \u00e0 voir avec la variable i pr\u00e9sente dans la fonction fctB (elles portent le m\u00eame nom, mais elles repr\u00e9sentent 2 adresses m\u00e9moires diff\u00e9rentes). Il est tr\u00e8s important de bien comprendre que les variables cr\u00e9\u00e9es dans une fonction ne \"sortent\" pas de la fonction : chaque fonction poss\u00e8de sa propre liste de variable, comme d\u00e9j\u00e0 dit ci-dessus la variable i de la fonction fctB est diff\u00e9rente de la variable i de la fonction fctA. La pile d'ex\u00e9cution conserve une \"trace\" des valeurs des variables lorsqu'une autre fonction est ex\u00e9cut\u00e9e. Par exemple la valeur de i (fctB) est conserv\u00e9e au moment de l'ex\u00e9cution de fctA. Quand l'ex\u00e9cution de fctA se termine est que l'ex\u00e9cution de fctB \"reprend\", la valeur r\u00e9f\u00e9renc\u00e9e par i (fctB) a \u00e9t\u00e9 \"conserv\u00e9e\" (voil\u00e0 pourquoi on reprend l'ex\u00e9cution de fctB avec un \"fctB 3\"). Une fonction peut s'appeler elle-m\u00eame, on parle alors de fonction r\u00e9cursive. Consid\u00e9rons de programme suivant : def fctA (): print ( \"Hello\" ) fctA () fctA () Si nous ex\u00e9cutons ce programme, nous allons obtenir une erreur : RecursionError: maximum recursion depth exceeded while calling a Python object Dans le cas o\u00f9 une fonction s'appelle elle-m\u00eame (fonction r\u00e9cursive), on retrouve le m\u00eame syst\u00e8me de pile d'ex\u00e9cution. Dans l'exemple trait\u00e9 ci-dessus, les appels s'enchainent sans rien pour mettre un terme \u00e0 cet enchainement, la taille de la pile d'ex\u00e9cution augmente sans cesse (aucune fonction ne termine son ex\u00e9cution, nous n'avons pas de \"d\u00e9pilement\" juste des \"empilements\"). Le syst\u00e8me interrompt le programme en g\u00e9n\u00e9rant une erreur quand la pile d'ex\u00e9cution d\u00e9passe une certaine taille. Quand on \u00e9crit une fonction r\u00e9cursive, il est donc n\u00e9cessaire de bien penser \u00e0 mettre en place une structure qui \u00e0 un moment ou \u00e0 un autre mettra fin \u00e0 ces appels r\u00e9cursifs. Dans le cas de fonctions r\u00e9cursives, il est, comme pour n'importe quelle fonction, possible d'utiliser des param\u00e8tres : Soit le programme suivant : def fonct ( n ): if n > 0 : fonct ( n - 1 ) print ( n ) fonct ( 3 ) Analysons en d\u00e9tail le fonctionnement de ce programme : 1er appel de la fonction fonct avec le param\u00e8tre n = 3 ; n > 0 donc appel de la fonction fonct avec le param\u00e8tre n = 2 2e appel de la fonction fonct avec le param\u00e8tre n = 2 ; n > 0 donc appel de la fonction fonct avec le param\u00e8tre n = 1 3e appel de la fonction fonct avec le param\u00e8tre n = 1 ; n > 0 donc appel de la fonction fonct avec le param\u00e8tre n = 0 4e appel de la fonction fonct avec le param\u00e8tre n = 0 ; n = 0 donc on ex\u00e9cute l'instruction print(n) => affichage : 0 on \"d\u00e9pile\" (3e appel, n = 1) : on ex\u00e9cute l'instruction print(n) => affichage : 1 on \"d\u00e9pile\" (2e appel, n = 2) : on ex\u00e9cute l'instruction print(n) => affichage : 2 on \"d\u00e9pile\" (1er appel, n = 3) : on ex\u00e9cute l'instruction print(n) => affichage : 3 Voici un sch\u00e9ma expliquant le processus en termes de pile d'ex\u00e9cution : Il ne faut jamais perdre de vu qu'\u00e0 chaque nouvel appel de la fonction fonct le param\u00e8tre n est diff\u00e9rent. Nous allons \u00e9tudier le calcul de la factorielle gr\u00e2ce \u00e0 une fonction r\u00e9cursive. D'apr\u00e8s Wikip\u00e9dia : \"En math\u00e9matiques, la factorielle d'un entier naturel n est le produit des nombres entiers strictement positifs inf\u00e9rieurs ou \u00e9gaux \u00e0 n\". Par exemple : la factorielle de 3 est : 3 x 2 x 1 = 6 ; la factorielle de 4 est 4 x 3 x 2 x 1 = 24 ; la factorielle de 5 est 5 x 4 x 3 x 2 x 1 = 120 ... Si on note la factorielle de n par n!, on a : 0! = 1 (par d\u00e9finition Pour tout entier n > 0, n! = n x (n \u2013 1)! Nous allons utiliser cette d\u00e9finition de la factorielle pour d\u00e9finir notre fonction r\u00e9cursive (nous allons utiliser le fait que la factorielle de n d\u00e9pend de la factorielle de n-1 et que 0! = 1) Analysons le programme suivant : def fact ( n ) : if n > 0 : return n * fact ( n - 1 ) else : return 1 Comme vous pouvez le constater, la fonction fact est structur\u00e9e de la m\u00eame mani\u00e8re que la d\u00e9finition math\u00e9matique vu ci-dessus : dans le cas o\u00f9 n = 0 la fonction renvoie 1 (0! = 1) dans le cas o\u00f9 n > 0 la fonction renvoie n*fact(n-1) (n! = n x (n \u2013 1)!) On peut essayer de comprendre le fonctionnement du programme ci-dessus \u00e0 l'aide du sch\u00e9ma suivant : On a fact(4) = 4 * fact(3) avec fact(3) = 3 * fact(2) avec fact(2) = 2 * fact(1) avec fact(1) = 1 * fact(0) avec fact(0) = 1 (par d\u00e9finition) donc fact(1) = 1 donc fact(2) = 2 donc fact(3) = 6 donc fact(4) = 24 L'utilisation des fonctions r\u00e9cursives est souvent li\u00e9e \u00e0 la notion de r\u00e9currence en math\u00e9matiques : En math\u00e9matiques une suite d\u00e9finie par r\u00e9currence est une suite d\u00e9finie par son premier terme et par une relation de r\u00e9currence, qui d\u00e9finit chaque terme \u00e0 partir du pr\u00e9c\u00e9dent ou des pr\u00e9c\u00e9dents lorsqu'ils existent. Prenons l'exemple de la suite de Fibonacci qui est d\u00e9finie par : u 0 = 0 et u 1 = 1 et par la relation de r\u00e9currence suivante avec n entier et n > 1 : u n = u n-1 + u n-2 Ce qui nous donne pour les 6 premiers termes de la suite de Fibonacci : u 0 = 0 u 1 = 1 u 2 = u 1 + u 0 = 1 + 0 = 1 u 3 = u 2 + u 1 = 1 + 1 = 2 u 4 = u 3 + u 2 = 2 + 1 = 3 u 5 = u 4 + u 3 = 3 + 2 = 5","title":"Cours"},{"location":"c4e/","text":"exercice 4.1 Soit le programme Python suivant : def fct ( n ): if n > 5 : return 1 else : return n + fct ( n + 1 ) a = fct ( 2 ) Que vaut la variable a apr\u00e8s l\u2019ex\u00e9cution de ce programme (justifiez votre r\u00e9ponse) ? exercice 4.2 La fonction puissance prend un param\u00e8tre n et renvoie 2 n . On d\u00e9finit la fonction puissance comme suit : si n = 0 alors puissance(0) = 1 si n > 0 alors puissance(n) = 2 x puissance(n-1) \u00c9crivez en Python une version r\u00e9cursive de la fonction puissance exercices du bac Sujet 1 2021 Exercice 2 Sujet 5 2021 Exercice 4 Sujet 1 2022 Exercice 1 Sujet 7 2022 Exercice 1","title":"Exercices"},{"location":"c4e/#exercice-41","text":"Soit le programme Python suivant : def fct ( n ): if n > 5 : return 1 else : return n + fct ( n + 1 ) a = fct ( 2 ) Que vaut la variable a apr\u00e8s l\u2019ex\u00e9cution de ce programme (justifiez votre r\u00e9ponse) ?","title":"exercice 4.1"},{"location":"c4e/#exercice-42","text":"La fonction puissance prend un param\u00e8tre n et renvoie 2 n . On d\u00e9finit la fonction puissance comme suit : si n = 0 alors puissance(0) = 1 si n > 0 alors puissance(n) = 2 x puissance(n-1) \u00c9crivez en Python une version r\u00e9cursive de la fonction puissance","title":"exercice 4.2"},{"location":"c4e/#exercices-du-bac","text":"Sujet 1 2021 Exercice 2 Sujet 5 2021 Exercice 4 Sujet 1 2022 Exercice 1 Sujet 7 2022 Exercice 1","title":"exercices du bac"},{"location":"c4r/","text":"Ce qu\u2019il faut savoir Une fonction r\u00e9cursive est une fonction qui s\u2019appelle elle-m\u00eame Quand on \u00e9crit une fonction r\u00e9cursive, il est n\u00e9cessaire de bien penser \u00e0 mettre en place une structure qui \u00e0 un moment ou \u00e0 un autre mettra fin \u00e0 ces appels r\u00e9cursifs. L'utilisation des fonctions r\u00e9cursives est souvent li\u00e9e \u00e0 la notion de r\u00e9currence en math\u00e9matiques. Ce qu\u2019il faut savoir faire Analyser le fonctionnement d\u2019un programme r\u00e9cursif (programme r\u00e9cursif = programme qui comporte au moins une fonction r\u00e9cursive). \u00eatre capable d\u2019\u00e9crire une fonction r\u00e9cursive simple","title":"R\u00e9vision"},{"location":"c4r/#ce-quil-faut-savoir","text":"Une fonction r\u00e9cursive est une fonction qui s\u2019appelle elle-m\u00eame Quand on \u00e9crit une fonction r\u00e9cursive, il est n\u00e9cessaire de bien penser \u00e0 mettre en place une structure qui \u00e0 un moment ou \u00e0 un autre mettra fin \u00e0 ces appels r\u00e9cursifs. L'utilisation des fonctions r\u00e9cursives est souvent li\u00e9e \u00e0 la notion de r\u00e9currence en math\u00e9matiques.","title":"Ce qu\u2019il faut savoir"},{"location":"c4r/#ce-quil-faut-savoir-faire","text":"Analyser le fonctionnement d\u2019un programme r\u00e9cursif (programme r\u00e9cursif = programme qui comporte au moins une fonction r\u00e9cursive). \u00eatre capable d\u2019\u00e9crire une fonction r\u00e9cursive simple","title":"Ce qu\u2019il faut savoir faire"},{"location":"c5a/","text":"activit\u00e9 5.1 Soit la suite d'instructions suivantes : L = vide() L = cons(12, cons(5, cons (32, L))) a = car(L) L1 = cdr(L) L1 = cons(42, cons(23, L1)) Donnez le contenu des listes L et L1 et la valeur de a. activit\u00e9 5.2 Soit une pile P compos\u00e9e des \u00e9l\u00e9ments suivants : 15, 11, 32, 45 et 67 (le sommet de la pile est 67). Quel est l'effet de l'instruction pop(P) ? activit\u00e9 5.3 Soit une pile P initialement vide. Soit les instructions suivantes : push(P,34) push(P,76) push(P,43) a = pop(P) push(P,42) b = taille(P) Donnez le contenu de la pile P, la valeur de a et la valeur de b. activit\u00e9 5.4 Soit une file F compos\u00e9e des \u00e9l\u00e9ments suivants : 1, 12, 24, 17, 21 et 72 (le premier \u00e9l\u00e9ment rentr\u00e9 dans la file est 72 ; le dernier \u00e9l\u00e9ment rentr\u00e9 dans la file est 1). Quel est l'effet de l'instruction enqueue(F,25) ? activit\u00e9 5.5 Soit une file F initialement vide. Soit les instructions suivantes : enqueue(F,67) enqueue(F,34) enqueue(F,78) a = dequeue(F) enqueue(F,23) b = taille(F) Donnez le contenu de la file F, la valeur de a et la valeur de b. activit\u00e9 5.6 Soit le programme Python suivant : def vide (): return None def estVide ( L ): return L is None def cons ( x , L ): return ( x , L ) def car ( L ): return ( L [ 0 ]) def cdr ( L ): return ( L [ 1 ]) Quel est le but de ce programme ? V\u00e9rifiez \u00e0 l'aide de ce programme que les r\u00e9ponses que vous avez apport\u00e9es \u00e0 l'activit\u00e9 5.1 \u00e9taient correctes. activit\u00e9 5.7 Python propose une impl\u00e9mentation des piles. Apr\u00e8s avoir \u00e9tudi\u00e9 la documentation consacr\u00e9e \u00e0 l'impl\u00e9mentation des piles en Python (voir https://docs.python.org/fr/3/tutorial/datastructures.html partie 5.1.1), vous \u00e9crirez un programme permettant de v\u00e9rifier que les r\u00e9ponses que vous avez apport\u00e9es \u00e0 l'activit\u00e9 5.3 \u00e9taient correctes. activit\u00e9 5.8 Python propose une impl\u00e9mentation des files. Apr\u00e8s avoir \u00e9tudi\u00e9 la documentation consacr\u00e9e \u00e0 l'impl\u00e9mentation des files en Python (voir https://docs.python.org/fr/3/tutorial/datastructures.html partie 5.1.2), vous \u00e9crirez un programme permettant de v\u00e9rifier que les r\u00e9ponses que vous avez apport\u00e9es \u00e0 l'activit\u00e9 5.5 \u00e9taient correctes. activit\u00e9 5.9 \u00c9crivez une fonction Python permettant de d\u00e9terminer le nombre d'\u00e9l\u00e9ments pr\u00e9sents dans une liste.","title":"Activit\u00e9s"},{"location":"c5a/#activite-51","text":"Soit la suite d'instructions suivantes : L = vide() L = cons(12, cons(5, cons (32, L))) a = car(L) L1 = cdr(L) L1 = cons(42, cons(23, L1)) Donnez le contenu des listes L et L1 et la valeur de a.","title":"activit\u00e9 5.1"},{"location":"c5a/#activite-52","text":"Soit une pile P compos\u00e9e des \u00e9l\u00e9ments suivants : 15, 11, 32, 45 et 67 (le sommet de la pile est 67). Quel est l'effet de l'instruction pop(P) ?","title":"activit\u00e9 5.2"},{"location":"c5a/#activite-53","text":"Soit une pile P initialement vide. Soit les instructions suivantes : push(P,34) push(P,76) push(P,43) a = pop(P) push(P,42) b = taille(P) Donnez le contenu de la pile P, la valeur de a et la valeur de b.","title":"activit\u00e9 5.3"},{"location":"c5a/#activite-54","text":"Soit une file F compos\u00e9e des \u00e9l\u00e9ments suivants : 1, 12, 24, 17, 21 et 72 (le premier \u00e9l\u00e9ment rentr\u00e9 dans la file est 72 ; le dernier \u00e9l\u00e9ment rentr\u00e9 dans la file est 1). Quel est l'effet de l'instruction enqueue(F,25) ?","title":"activit\u00e9 5.4"},{"location":"c5a/#activite-55","text":"Soit une file F initialement vide. Soit les instructions suivantes : enqueue(F,67) enqueue(F,34) enqueue(F,78) a = dequeue(F) enqueue(F,23) b = taille(F) Donnez le contenu de la file F, la valeur de a et la valeur de b.","title":"activit\u00e9 5.5"},{"location":"c5a/#activite-56","text":"Soit le programme Python suivant : def vide (): return None def estVide ( L ): return L is None def cons ( x , L ): return ( x , L ) def car ( L ): return ( L [ 0 ]) def cdr ( L ): return ( L [ 1 ]) Quel est le but de ce programme ? V\u00e9rifiez \u00e0 l'aide de ce programme que les r\u00e9ponses que vous avez apport\u00e9es \u00e0 l'activit\u00e9 5.1 \u00e9taient correctes.","title":"activit\u00e9 5.6"},{"location":"c5a/#activite-57","text":"Python propose une impl\u00e9mentation des piles. Apr\u00e8s avoir \u00e9tudi\u00e9 la documentation consacr\u00e9e \u00e0 l'impl\u00e9mentation des piles en Python (voir https://docs.python.org/fr/3/tutorial/datastructures.html partie 5.1.1), vous \u00e9crirez un programme permettant de v\u00e9rifier que les r\u00e9ponses que vous avez apport\u00e9es \u00e0 l'activit\u00e9 5.3 \u00e9taient correctes.","title":"activit\u00e9 5.7"},{"location":"c5a/#activite-58","text":"Python propose une impl\u00e9mentation des files. Apr\u00e8s avoir \u00e9tudi\u00e9 la documentation consacr\u00e9e \u00e0 l'impl\u00e9mentation des files en Python (voir https://docs.python.org/fr/3/tutorial/datastructures.html partie 5.1.2), vous \u00e9crirez un programme permettant de v\u00e9rifier que les r\u00e9ponses que vous avez apport\u00e9es \u00e0 l'activit\u00e9 5.5 \u00e9taient correctes.","title":"activit\u00e9 5.8"},{"location":"c5a/#activite-59","text":"\u00c9crivez une fonction Python permettant de d\u00e9terminer le nombre d'\u00e9l\u00e9ments pr\u00e9sents dans une liste.","title":"activit\u00e9 5.9"},{"location":"c5c/","text":"1) introduction De nombreux algorithmes \"classiques\" manipulent des structures de donn\u00e9es plus complexes que des simples nombres (nous aurons l'occasion d'en voir plusieurs cette ann\u00e9e). Nous allons ici voir quelques-unes de ces structures de donn\u00e9es. Nous allons commencer par des types de structures relativement simples : les listes, les piles et les files. Ces trois types de structures sont qualifi\u00e9s de lin\u00e9aires. 2) les listes Une liste est une structure de donn\u00e9es permettant de regrouper des donn\u00e9es. Une liste L est compos\u00e9e de 2 parties : sa t\u00eate (souvent not\u00e9 car), qui correspond au dernier \u00e9l\u00e9ment ajout\u00e9 \u00e0 la liste, et sa queue (souvent not\u00e9 cdr) qui correspond au reste de la liste. Le langage de programmation Lisp (invent\u00e9 par John McCarthy en 1958) a \u00e9t\u00e9 un des premiers langages de programmation \u00e0 introduire cette notion de liste (Lisp signifie \"list processing\"). Voici les op\u00e9rations qui peuvent \u00eatre effectu\u00e9es sur une liste : obtenir une liste vide (vide) tester si une liste est vide (estVide) obtenir le dernier \u00e9l\u00e9ment ajout\u00e9 \u00e0 la liste (car) obtenir une liste contenant tous les \u00e9l\u00e9ments d'une liste \u00e0 l'exception du dernier \u00e9l\u00e9ment ajout\u00e9 (cdr) construire une liste \u00e0 partir d'un \u00e9l\u00e9ment et d'un autre liste (cons) Une liste vide est tr\u00e8s souvent repr\u00e9sent\u00e9e par nil. Exemples : Soit une liste L ( les exemples suivants s\u2019encha\u00eenent ) L = vide() => permet d'obtenir une liste vide not\u00e9e L estVide(L) => renvoie True L1 = cons(12, L) => permet d'obtenir une liste L1 qui contient le nombre 12 estVide(L1) => renvoie False L1 = cons(15, L1) => d\u00e9sormais la liste L1 contient les nombres 15 et 12 il est possible d'enchainer les \"cons\" : L1 = cons(1, cons(11, L1)) => permet d'obtenir un liste L1 qui contient d\u00e9sormais les nombres 1, 11, 15 et 12 car(L1) renvoie 1, la liste L1 reste inchang\u00e9e L2 = cdr(L1) => la liste L2 contient 11,15 et 12 (la liste L1 reste inchang\u00e9e) 3) les piles On retrouve dans les piles une partie des propri\u00e9t\u00e9s vues sur les listes. Dans les piles, il est uniquement possible de manipuler le dernier \u00e9l\u00e9ment introduit dans la pile. On prend souvent l'analogie avec une pile d'assiettes : dans une pile d'assiettes la seule assiette directement accessible et la derni\u00e8re assiette qui a \u00e9t\u00e9 d\u00e9pos\u00e9e sur la pile. Les piles sont bas\u00e9es sur le principe LIFO (Last In First Out : le dernier rentr\u00e9 sera le premier \u00e0 sortir). On retrouve souvent ce principe LIFO en informatique. Voici les op\u00e9rations que l'on peut r\u00e9aliser sur une pile : on peut savoir si une pile est vide (estVide) on peut empiler un nouvel \u00e9l\u00e9ment sur la pile (piler en fran\u00e7ais, push en anglais) on peut r\u00e9cup\u00e9rer l'\u00e9l\u00e9ment au sommet de la pile tout en le supprimant. On dit que l'on d\u00e9pile (d\u00e9piler en fran\u00e7ais, pop en anglais) on peut connaitre le nombre d'\u00e9l\u00e9ments pr\u00e9sents dans la pile (taille) Exemples : Soit une pile P compos\u00e9e des \u00e9l\u00e9ments suivants : 12, 14, 8, 7, 19 et 22 (le sommet de la pile est 22) Pour chaque exemple ci-dessous on repart de la pile d'origine : pop(P) renvoie 22 et la pile P est maintenant compos\u00e9e des \u00e9l\u00e9ments suivants : 12, 14, 8, 7 et 19 (le sommet de la pile est 19) push(P,42) la pile P est maintenant compos\u00e9e des \u00e9l\u00e9ments suivants : 12, 14, 8, 7, 19, 22 et 42 (le sommet de la pile est 42) si on applique pop(P) 6 fois de suite, estVide(P) renvoie vrai apr\u00e8s avoir appliqu\u00e9 pop(P) une fois, taille(P) renvoie 5 4) les files Comme les piles, les files ont des points communs avec les listes. Diff\u00e9rences majeures : dans une file on ajoute des \u00e9l\u00e9ments \u00e0 une extr\u00e9mit\u00e9 de la file et on supprime des \u00e9l\u00e9ments \u00e0 l'autre extr\u00e9mit\u00e9. On prend souvent l'analogie de la file d'attente devant un magasin pour d\u00e9crire une file de donn\u00e9es. Les files sont bas\u00e9es sur le principe FIFO (First In First Out : le premier qui est rentr\u00e9 sera le premier \u00e0 sortir. Ici aussi, on retrouve souvent ce principe FIFO en informatique. Voici les op\u00e9rations que l'on peut r\u00e9aliser sur une file : on peut savoir si une file est vide (estVide) on peut ajouter un nouvel \u00e9l\u00e9ment \u00e0 la file (enfiler en fran\u00e7ais, enqueue en anglais) on peut r\u00e9cup\u00e9rer l'\u00e9l\u00e9ment situ\u00e9 en bout de file tout en le supprimant (d\u00e9filer en fran\u00e7ais, dequeue en anglais) on peut connaitre le nombre d'\u00e9l\u00e9ments pr\u00e9sents dans la file (taille) Exemples : Soit une file F compos\u00e9e des \u00e9l\u00e9ments suivants : 12, 14, 8, 7, 19 et 22 (le premier \u00e9l\u00e9ment rentr\u00e9 dans la file est 22 ; le dernier \u00e9l\u00e9ment rentr\u00e9 dans la file est 12). Pour chaque exemple ci-dessous on repart de la file d'origine : enqueue(F,42) la file F est maintenant compos\u00e9e des \u00e9l\u00e9ments suivants : 42, 12, 14, 8, 7, 19 et 22 (le premier \u00e9l\u00e9ment rentr\u00e9 dans la file est 22 ; le dernier \u00e9l\u00e9ment rentr\u00e9 dans la file est 42) dequeue(F) la file F est maintenant compos\u00e9e des \u00e9l\u00e9ments suivants : 12, 14, 8, 7, et 19 (le premier \u00e9l\u00e9ment rentr\u00e9 dans la file est 19 ; le dernier \u00e9l\u00e9ment rentr\u00e9 dans la file est 12) si on applique dequeue(F) 6 fois de suite, estVide(F) renvoie vrai apr\u00e8s avoir appliqu\u00e9 dequeue(F) une fois, taille(F) renvoie 5. 5) Types abstraits et repr\u00e9sentation concr\u00e8te des donn\u00e9es Nous avons \u00e9voqu\u00e9 ci-dessus la manipulation des types de donn\u00e9es (liste, pile et file) par des algorithmes, mais, au-del\u00e0 de la beaut\u00e9 intellectuelle de r\u00e9fl\u00e9chir sur ces algorithmes, le but de l'op\u00e9ration est souvent, \u00e0 un moment ou un autre, de \"traduire\" ces algorithmes dans un langage compr\u00e9hensible pour un ordinateur (Python, Java, C,...). On dit alors que l'on impl\u00e9mente un algorithme. Il est donc aussi n\u00e9cessaire d'impl\u00e9menter les types de donn\u00e9es comme les listes, les piles ou les files afin qu'ils soient utilisables par les ordinateurs. Les listes, les piles ou les files sont des \"vues de l'esprit\" pr\u00e9sentes uniquement dans la t\u00eate des informaticiens, on dit que ce sont des types abstraits de donn\u00e9es (ou plus simplement des types abstraits). L'impl\u00e9mentation de ces types abstraits, afin qu'ils soient utilisables par une machine, est loin d'\u00eatre une chose triviale. L'impl\u00e9mentation d'un type de donn\u00e9es d\u00e9pend du langage de programmation. Il faut, quel que soit le langage utilis\u00e9, que le programmeur retrouve les fonctions qui ont \u00e9t\u00e9 d\u00e9finies pour le type abstrait (pour les listes, les piles et les files cela correspond aux fonctions d\u00e9finies ci-dessus). Certains types abstraits ne sont pas forc\u00e9ment impl\u00e9ment\u00e9s dans un langage donn\u00e9, si le programmeur veut utiliser ce type abstrait, il faudra qu'il le programme par lui-m\u00eame en utilisant les \"outils\" fournis par son langage de programmation. Pour impl\u00e9menter les listes (ou les piles et les files), beaucoup de langages de programmation utilisent 2 structures : les tableaux et les listes cha\u00een\u00e9es. Un tableau est une suite contigu\u00eb de cases m\u00e9moires (les adresses des cases m\u00e9moire se suivent) : Le syst\u00e8me r\u00e9serve une plage d'adresse m\u00e9moire afin de stocker des \u00e9l\u00e9ments. La taille d'un tableau est fixe : une fois que l'on a d\u00e9fini le nombre d'\u00e9l\u00e9ments que le tableau peut accueillir, il n'est pas possible modifier sa taille. Si l'on veut ins\u00e9rer une donn\u00e9e, on doit cr\u00e9er un nouveau tableau plus grand et d\u00e9placer les \u00e9l\u00e9ments du premier tableau vers le second tout en ajoutant la donn\u00e9e au bon endroit ! Dans certains langages de programmation, on trouve une version \"\u00e9volu\u00e9e\" des tableaux : les tableaux dynamiques. Les tableaux dynamiques ont une taille qui peut varier. Il est donc relativement simple d'ins\u00e9rer des \u00e9l\u00e9ments dans le tableau. Ce type de tableaux permet d'impl\u00e9menter facilement le type abstrait liste (de m\u00eame pour les piles et les files). \u00c0 noter que les \"listes Python\" (listes Python) sont des tableaux dynamiques. Attention de ne pas confondre avec le type abstrait liste d\u00e9fini ci-dessus, ce sont de \"faux amis\". tableau dynamique : Autre type de structure que l'on rencontre souvent et qui permet d'impl\u00e9menter les listes, les piles et les files : les listes cha\u00een\u00e9es. Dans une liste cha\u00een\u00e9e, \u00e0 chaque \u00e9l\u00e9ment de la liste on associe 2 cases m\u00e9moire : la premi\u00e8re case contient l'\u00e9l\u00e9ment et la deuxi\u00e8me contient l'adresse m\u00e9moire de l'\u00e9l\u00e9ment suivant. Il est relativement facile d'ins\u00e9rer un \u00e9l\u00e9ment dans une liste cha\u00een\u00e9e : Il est aussi possible d'impl\u00e9menter les types abstraits en utilisant des structures plus complexes que les tableaux et les listes cha\u00een\u00e9es (nous verrons des exemples en Python dans les activit\u00e9s).","title":"Cours"},{"location":"c5c/#1-introduction","text":"De nombreux algorithmes \"classiques\" manipulent des structures de donn\u00e9es plus complexes que des simples nombres (nous aurons l'occasion d'en voir plusieurs cette ann\u00e9e). Nous allons ici voir quelques-unes de ces structures de donn\u00e9es. Nous allons commencer par des types de structures relativement simples : les listes, les piles et les files. Ces trois types de structures sont qualifi\u00e9s de lin\u00e9aires.","title":"1) introduction"},{"location":"c5c/#2-les-listes","text":"Une liste est une structure de donn\u00e9es permettant de regrouper des donn\u00e9es. Une liste L est compos\u00e9e de 2 parties : sa t\u00eate (souvent not\u00e9 car), qui correspond au dernier \u00e9l\u00e9ment ajout\u00e9 \u00e0 la liste, et sa queue (souvent not\u00e9 cdr) qui correspond au reste de la liste. Le langage de programmation Lisp (invent\u00e9 par John McCarthy en 1958) a \u00e9t\u00e9 un des premiers langages de programmation \u00e0 introduire cette notion de liste (Lisp signifie \"list processing\"). Voici les op\u00e9rations qui peuvent \u00eatre effectu\u00e9es sur une liste : obtenir une liste vide (vide) tester si une liste est vide (estVide) obtenir le dernier \u00e9l\u00e9ment ajout\u00e9 \u00e0 la liste (car) obtenir une liste contenant tous les \u00e9l\u00e9ments d'une liste \u00e0 l'exception du dernier \u00e9l\u00e9ment ajout\u00e9 (cdr) construire une liste \u00e0 partir d'un \u00e9l\u00e9ment et d'un autre liste (cons) Une liste vide est tr\u00e8s souvent repr\u00e9sent\u00e9e par nil. Exemples : Soit une liste L ( les exemples suivants s\u2019encha\u00eenent ) L = vide() => permet d'obtenir une liste vide not\u00e9e L estVide(L) => renvoie True L1 = cons(12, L) => permet d'obtenir une liste L1 qui contient le nombre 12 estVide(L1) => renvoie False L1 = cons(15, L1) => d\u00e9sormais la liste L1 contient les nombres 15 et 12 il est possible d'enchainer les \"cons\" : L1 = cons(1, cons(11, L1)) => permet d'obtenir un liste L1 qui contient d\u00e9sormais les nombres 1, 11, 15 et 12 car(L1) renvoie 1, la liste L1 reste inchang\u00e9e L2 = cdr(L1) => la liste L2 contient 11,15 et 12 (la liste L1 reste inchang\u00e9e)","title":"2) les listes"},{"location":"c5c/#3-les-piles","text":"On retrouve dans les piles une partie des propri\u00e9t\u00e9s vues sur les listes. Dans les piles, il est uniquement possible de manipuler le dernier \u00e9l\u00e9ment introduit dans la pile. On prend souvent l'analogie avec une pile d'assiettes : dans une pile d'assiettes la seule assiette directement accessible et la derni\u00e8re assiette qui a \u00e9t\u00e9 d\u00e9pos\u00e9e sur la pile. Les piles sont bas\u00e9es sur le principe LIFO (Last In First Out : le dernier rentr\u00e9 sera le premier \u00e0 sortir). On retrouve souvent ce principe LIFO en informatique. Voici les op\u00e9rations que l'on peut r\u00e9aliser sur une pile : on peut savoir si une pile est vide (estVide) on peut empiler un nouvel \u00e9l\u00e9ment sur la pile (piler en fran\u00e7ais, push en anglais) on peut r\u00e9cup\u00e9rer l'\u00e9l\u00e9ment au sommet de la pile tout en le supprimant. On dit que l'on d\u00e9pile (d\u00e9piler en fran\u00e7ais, pop en anglais) on peut connaitre le nombre d'\u00e9l\u00e9ments pr\u00e9sents dans la pile (taille) Exemples : Soit une pile P compos\u00e9e des \u00e9l\u00e9ments suivants : 12, 14, 8, 7, 19 et 22 (le sommet de la pile est 22) Pour chaque exemple ci-dessous on repart de la pile d'origine : pop(P) renvoie 22 et la pile P est maintenant compos\u00e9e des \u00e9l\u00e9ments suivants : 12, 14, 8, 7 et 19 (le sommet de la pile est 19) push(P,42) la pile P est maintenant compos\u00e9e des \u00e9l\u00e9ments suivants : 12, 14, 8, 7, 19, 22 et 42 (le sommet de la pile est 42) si on applique pop(P) 6 fois de suite, estVide(P) renvoie vrai apr\u00e8s avoir appliqu\u00e9 pop(P) une fois, taille(P) renvoie 5","title":"3) les  piles"},{"location":"c5c/#4-les-files","text":"Comme les piles, les files ont des points communs avec les listes. Diff\u00e9rences majeures : dans une file on ajoute des \u00e9l\u00e9ments \u00e0 une extr\u00e9mit\u00e9 de la file et on supprime des \u00e9l\u00e9ments \u00e0 l'autre extr\u00e9mit\u00e9. On prend souvent l'analogie de la file d'attente devant un magasin pour d\u00e9crire une file de donn\u00e9es. Les files sont bas\u00e9es sur le principe FIFO (First In First Out : le premier qui est rentr\u00e9 sera le premier \u00e0 sortir. Ici aussi, on retrouve souvent ce principe FIFO en informatique. Voici les op\u00e9rations que l'on peut r\u00e9aliser sur une file : on peut savoir si une file est vide (estVide) on peut ajouter un nouvel \u00e9l\u00e9ment \u00e0 la file (enfiler en fran\u00e7ais, enqueue en anglais) on peut r\u00e9cup\u00e9rer l'\u00e9l\u00e9ment situ\u00e9 en bout de file tout en le supprimant (d\u00e9filer en fran\u00e7ais, dequeue en anglais) on peut connaitre le nombre d'\u00e9l\u00e9ments pr\u00e9sents dans la file (taille) Exemples : Soit une file F compos\u00e9e des \u00e9l\u00e9ments suivants : 12, 14, 8, 7, 19 et 22 (le premier \u00e9l\u00e9ment rentr\u00e9 dans la file est 22 ; le dernier \u00e9l\u00e9ment rentr\u00e9 dans la file est 12). Pour chaque exemple ci-dessous on repart de la file d'origine : enqueue(F,42) la file F est maintenant compos\u00e9e des \u00e9l\u00e9ments suivants : 42, 12, 14, 8, 7, 19 et 22 (le premier \u00e9l\u00e9ment rentr\u00e9 dans la file est 22 ; le dernier \u00e9l\u00e9ment rentr\u00e9 dans la file est 42) dequeue(F) la file F est maintenant compos\u00e9e des \u00e9l\u00e9ments suivants : 12, 14, 8, 7, et 19 (le premier \u00e9l\u00e9ment rentr\u00e9 dans la file est 19 ; le dernier \u00e9l\u00e9ment rentr\u00e9 dans la file est 12) si on applique dequeue(F) 6 fois de suite, estVide(F) renvoie vrai apr\u00e8s avoir appliqu\u00e9 dequeue(F) une fois, taille(F) renvoie 5.","title":"4)  les  files"},{"location":"c5c/#5-types-abstraits-et-representation-concrete-des-donnees","text":"Nous avons \u00e9voqu\u00e9 ci-dessus la manipulation des types de donn\u00e9es (liste, pile et file) par des algorithmes, mais, au-del\u00e0 de la beaut\u00e9 intellectuelle de r\u00e9fl\u00e9chir sur ces algorithmes, le but de l'op\u00e9ration est souvent, \u00e0 un moment ou un autre, de \"traduire\" ces algorithmes dans un langage compr\u00e9hensible pour un ordinateur (Python, Java, C,...). On dit alors que l'on impl\u00e9mente un algorithme. Il est donc aussi n\u00e9cessaire d'impl\u00e9menter les types de donn\u00e9es comme les listes, les piles ou les files afin qu'ils soient utilisables par les ordinateurs. Les listes, les piles ou les files sont des \"vues de l'esprit\" pr\u00e9sentes uniquement dans la t\u00eate des informaticiens, on dit que ce sont des types abstraits de donn\u00e9es (ou plus simplement des types abstraits). L'impl\u00e9mentation de ces types abstraits, afin qu'ils soient utilisables par une machine, est loin d'\u00eatre une chose triviale. L'impl\u00e9mentation d'un type de donn\u00e9es d\u00e9pend du langage de programmation. Il faut, quel que soit le langage utilis\u00e9, que le programmeur retrouve les fonctions qui ont \u00e9t\u00e9 d\u00e9finies pour le type abstrait (pour les listes, les piles et les files cela correspond aux fonctions d\u00e9finies ci-dessus). Certains types abstraits ne sont pas forc\u00e9ment impl\u00e9ment\u00e9s dans un langage donn\u00e9, si le programmeur veut utiliser ce type abstrait, il faudra qu'il le programme par lui-m\u00eame en utilisant les \"outils\" fournis par son langage de programmation. Pour impl\u00e9menter les listes (ou les piles et les files), beaucoup de langages de programmation utilisent 2 structures : les tableaux et les listes cha\u00een\u00e9es. Un tableau est une suite contigu\u00eb de cases m\u00e9moires (les adresses des cases m\u00e9moire se suivent) : Le syst\u00e8me r\u00e9serve une plage d'adresse m\u00e9moire afin de stocker des \u00e9l\u00e9ments. La taille d'un tableau est fixe : une fois que l'on a d\u00e9fini le nombre d'\u00e9l\u00e9ments que le tableau peut accueillir, il n'est pas possible modifier sa taille. Si l'on veut ins\u00e9rer une donn\u00e9e, on doit cr\u00e9er un nouveau tableau plus grand et d\u00e9placer les \u00e9l\u00e9ments du premier tableau vers le second tout en ajoutant la donn\u00e9e au bon endroit ! Dans certains langages de programmation, on trouve une version \"\u00e9volu\u00e9e\" des tableaux : les tableaux dynamiques. Les tableaux dynamiques ont une taille qui peut varier. Il est donc relativement simple d'ins\u00e9rer des \u00e9l\u00e9ments dans le tableau. Ce type de tableaux permet d'impl\u00e9menter facilement le type abstrait liste (de m\u00eame pour les piles et les files). \u00c0 noter que les \"listes Python\" (listes Python) sont des tableaux dynamiques. Attention de ne pas confondre avec le type abstrait liste d\u00e9fini ci-dessus, ce sont de \"faux amis\". tableau dynamique : Autre type de structure que l'on rencontre souvent et qui permet d'impl\u00e9menter les listes, les piles et les files : les listes cha\u00een\u00e9es. Dans une liste cha\u00een\u00e9e, \u00e0 chaque \u00e9l\u00e9ment de la liste on associe 2 cases m\u00e9moire : la premi\u00e8re case contient l'\u00e9l\u00e9ment et la deuxi\u00e8me contient l'adresse m\u00e9moire de l'\u00e9l\u00e9ment suivant. Il est relativement facile d'ins\u00e9rer un \u00e9l\u00e9ment dans une liste cha\u00een\u00e9e : Il est aussi possible d'impl\u00e9menter les types abstraits en utilisant des structures plus complexes que les tableaux et les listes cha\u00een\u00e9es (nous verrons des exemples en Python dans les activit\u00e9s).","title":"5) Types abstraits et repr\u00e9sentation concr\u00e8te des donn\u00e9es"},{"location":"c5e/","text":"exercice 5.1 Soit la suite d'instructions suivantes : L = vide() L = cons(2, cons(15, cons (23, L))) L1 = cdr(L) a = car(L1) L1 = cons(4, cons(3, L1)) Donnez le contenu des listes L et L1 et la valeur de a. exercice 5.2 Soit une pile P initialement vide. Soit les instructions suivantes : push(P,4) push(P,7) a = pop(P) b = taille(P) c = pop(P) push(P,3) push(P,2) d = taille(P) Donnez le contenu de la pile P, la valeur de a, la valeur de b, la valeur de c et la valeur de d. exercice 5.3 Soit une file F initialement vide. Soit les instructions suivantes : enqueue(F,6) enqueue(F,3) a = dequeue(F) enqueue(F,9) b = taille(F) enqueue(F,17) c = dequeue(F) enqueue(F,2) d = taille(F) Donnez le contenu de la file F, la valeur de a, la valeur de b, la valeur de c et la valeur de d. exercice 5.4 Soit le programme Python suivant : pile = [] tab = [5,8,6,1,3,7] pile.append(5) pile.append(10) pile.append(8) pile.append(15) for i in tab: if i > 5: pile.pop() Donnez l\u2019\u00e9tat de la pile pile apr\u00e8s l\u2019ex\u00e9cution de ce programme. exercice 5.5 Soit le programme Python suivant : from collections import deque file = deque ([]) tab = [ 2 , 78 , 6 , 89 , 3 , 17 ] file . append ( 5 ) file . append ( 10 ) file . append ( 8 ) file . append ( 15 ) for i in tab : if i > 50 : file . popleft () Donnez l\u2019\u00e9tat de la file file apr\u00e8s l\u2019ex\u00e9cution de ce programme exercices du bac Sujet 1 2021 Exercice 1 Sujet 3 2021 Exercice 5 Sujet 6 2021 Exercice 5 Sujet 7 2021 Exercice 1 Sujet 8 2021 Exercice 5 Sujet 1 2022 Exercice 4 Sujet 2 2022 Exercice 1 Sujet 3 2022 Exercice 2 Sujet 4 2022 Exercice 5 Sujet 10 2022 Exercice 1 Sujet 11 2022 Exercice 1 Sujet 14 2022 Exercice 5","title":"Exercices"},{"location":"c5e/#exercice-51","text":"Soit la suite d'instructions suivantes : L = vide() L = cons(2, cons(15, cons (23, L))) L1 = cdr(L) a = car(L1) L1 = cons(4, cons(3, L1)) Donnez le contenu des listes L et L1 et la valeur de a.","title":"exercice 5.1"},{"location":"c5e/#exercice-52","text":"Soit une pile P initialement vide. Soit les instructions suivantes : push(P,4) push(P,7) a = pop(P) b = taille(P) c = pop(P) push(P,3) push(P,2) d = taille(P) Donnez le contenu de la pile P, la valeur de a, la valeur de b, la valeur de c et la valeur de d.","title":"exercice 5.2"},{"location":"c5e/#exercice-53","text":"Soit une file F initialement vide. Soit les instructions suivantes : enqueue(F,6) enqueue(F,3) a = dequeue(F) enqueue(F,9) b = taille(F) enqueue(F,17) c = dequeue(F) enqueue(F,2) d = taille(F) Donnez le contenu de la file F, la valeur de a, la valeur de b, la valeur de c et la valeur de d.","title":"exercice 5.3"},{"location":"c5e/#exercice-54","text":"Soit le programme Python suivant : pile = [] tab = [5,8,6,1,3,7] pile.append(5) pile.append(10) pile.append(8) pile.append(15) for i in tab: if i > 5: pile.pop() Donnez l\u2019\u00e9tat de la pile pile apr\u00e8s l\u2019ex\u00e9cution de ce programme.","title":"exercice 5.4"},{"location":"c5e/#exercice-55","text":"Soit le programme Python suivant : from collections import deque file = deque ([]) tab = [ 2 , 78 , 6 , 89 , 3 , 17 ] file . append ( 5 ) file . append ( 10 ) file . append ( 8 ) file . append ( 15 ) for i in tab : if i > 50 : file . popleft () Donnez l\u2019\u00e9tat de la file file apr\u00e8s l\u2019ex\u00e9cution de ce programme","title":"exercice 5.5"},{"location":"c5e/#exercices-du-bac","text":"Sujet 1 2021 Exercice 1 Sujet 3 2021 Exercice 5 Sujet 6 2021 Exercice 5 Sujet 7 2021 Exercice 1 Sujet 8 2021 Exercice 5 Sujet 1 2022 Exercice 4 Sujet 2 2022 Exercice 1 Sujet 3 2022 Exercice 2 Sujet 4 2022 Exercice 5 Sujet 10 2022 Exercice 1 Sujet 11 2022 Exercice 1 Sujet 14 2022 Exercice 5","title":"exercices du bac"},{"location":"c5r/","text":"Ce qu\u2019il faut savoir Les listes Une liste est une structure de donn\u00e9es permettant de regrouper des donn\u00e9es. Une liste L est compos\u00e9e de 2 parties : sa t\u00eate (souvent not\u00e9e car), qui correspond au dernier \u00e9l\u00e9ment ajout\u00e9 \u00e0 la liste, et sa queue (souvent not\u00e9e cdr) qui correspond au reste de la liste. Voici les op\u00e9rations qui peuvent \u00eatre effectu\u00e9es sur une liste : obtenir une liste vide (vide) tester si une liste est vide (estVide) obtenir le dernier \u00e9l\u00e9ment ajout\u00e9 \u00e0 la liste (car) obtenir une liste contenant tous les \u00e9l\u00e9ments d'une liste \u00e0 l'exception du dernier \u00e9l\u00e9ment ajout\u00e9 (cdr) construire une liste \u00e0 partir d'un \u00e9l\u00e9ment et d'un autre liste (cons) Les piles On retrouve dans les piles une partie des propri\u00e9t\u00e9s vues sur les listes. Dans les piles, il est uniquement possible de manipuler le dernier \u00e9l\u00e9ment introduit dans la pile. Les piles sont bas\u00e9es sur le principe LIFO Voici les op\u00e9rations que l'on peut r\u00e9aliser sur une pile : on peut savoir si une pile est vide (estVide) on peut empiler un nouvel \u00e9l\u00e9ment sur la pile (piler en fran\u00e7ais, push en anglais) on peut r\u00e9cup\u00e9rer l'\u00e9l\u00e9ment au sommet de la pile tout en le supprimant. On dit que l'on d\u00e9pile (d\u00e9piler en fran\u00e7ais, pop en anglais) on peut connaitre le nombre d'\u00e9l\u00e9ments pr\u00e9sents dans la pile (taille) Les files Comme les piles, les files ont des points communs avec les listes. Diff\u00e9rences majeures : dans une file on ajoute des \u00e9l\u00e9ments \u00e0 une extr\u00e9mit\u00e9 de la file et on supprime des \u00e9l\u00e9ments \u00e0 l'autre extr\u00e9mit\u00e9. Les files sont bas\u00e9es sur le principe FIFO. Voici les op\u00e9rations que l'on peut r\u00e9aliser sur une file : on peut savoir si une file est vide (estVide) on peut ajouter un nouvel \u00e9l\u00e9ment \u00e0 la file (enfiler en fran\u00e7ais, enqueue en anglais) on peut r\u00e9cup\u00e9rer l'\u00e9l\u00e9ment situ\u00e9 en bout de file tout en le supprimant (d\u00e9filer en fran\u00e7ais, dequeue en anglais) on peut connaitre le nombre d'\u00e9l\u00e9ments pr\u00e9sents dans la file (taille) Ce qu\u2019il faut savoir faire Impl\u00e9menter les structures abstraites liste, pile et file en Python","title":"R\u00e9vision"},{"location":"c5r/#ce-quil-faut-savoir","text":"","title":"Ce qu\u2019il faut savoir"},{"location":"c5r/#les-listes","text":"Une liste est une structure de donn\u00e9es permettant de regrouper des donn\u00e9es. Une liste L est compos\u00e9e de 2 parties : sa t\u00eate (souvent not\u00e9e car), qui correspond au dernier \u00e9l\u00e9ment ajout\u00e9 \u00e0 la liste, et sa queue (souvent not\u00e9e cdr) qui correspond au reste de la liste. Voici les op\u00e9rations qui peuvent \u00eatre effectu\u00e9es sur une liste : obtenir une liste vide (vide) tester si une liste est vide (estVide) obtenir le dernier \u00e9l\u00e9ment ajout\u00e9 \u00e0 la liste (car) obtenir une liste contenant tous les \u00e9l\u00e9ments d'une liste \u00e0 l'exception du dernier \u00e9l\u00e9ment ajout\u00e9 (cdr) construire une liste \u00e0 partir d'un \u00e9l\u00e9ment et d'un autre liste (cons)","title":"Les listes"},{"location":"c5r/#les-piles","text":"On retrouve dans les piles une partie des propri\u00e9t\u00e9s vues sur les listes. Dans les piles, il est uniquement possible de manipuler le dernier \u00e9l\u00e9ment introduit dans la pile. Les piles sont bas\u00e9es sur le principe LIFO Voici les op\u00e9rations que l'on peut r\u00e9aliser sur une pile : on peut savoir si une pile est vide (estVide) on peut empiler un nouvel \u00e9l\u00e9ment sur la pile (piler en fran\u00e7ais, push en anglais) on peut r\u00e9cup\u00e9rer l'\u00e9l\u00e9ment au sommet de la pile tout en le supprimant. On dit que l'on d\u00e9pile (d\u00e9piler en fran\u00e7ais, pop en anglais) on peut connaitre le nombre d'\u00e9l\u00e9ments pr\u00e9sents dans la pile (taille)","title":"Les piles"},{"location":"c5r/#les-files","text":"Comme les piles, les files ont des points communs avec les listes. Diff\u00e9rences majeures : dans une file on ajoute des \u00e9l\u00e9ments \u00e0 une extr\u00e9mit\u00e9 de la file et on supprime des \u00e9l\u00e9ments \u00e0 l'autre extr\u00e9mit\u00e9. Les files sont bas\u00e9es sur le principe FIFO. Voici les op\u00e9rations que l'on peut r\u00e9aliser sur une file : on peut savoir si une file est vide (estVide) on peut ajouter un nouvel \u00e9l\u00e9ment \u00e0 la file (enfiler en fran\u00e7ais, enqueue en anglais) on peut r\u00e9cup\u00e9rer l'\u00e9l\u00e9ment situ\u00e9 en bout de file tout en le supprimant (d\u00e9filer en fran\u00e7ais, dequeue en anglais) on peut connaitre le nombre d'\u00e9l\u00e9ments pr\u00e9sents dans la file (taille)","title":"Les files"},{"location":"c5r/#ce-quil-faut-savoir-faire","text":"Impl\u00e9menter les structures abstraites liste, pile et file en Python","title":"Ce qu\u2019il faut savoir faire"},{"location":"c6a/","text":"activit\u00e9 6.1 \u00c9crivez un programme Python qui permettra de cr\u00e9er un dictionnaire avec les couples cl\u00e9/valeur suivants : nom => Doe prenom => John age => 42 activit\u00e9 6.2 Soit les donn\u00e9es suivantes : prenom nom age John Doe 42 Pierre Martin 23 Christine Dune 27 Marie Tellaz 12 Proposez une structure de donn\u00e9es permettant de stocker ces informations (on attend un programme Python). activit\u00e9 6.3 En vous aidant de ce qui a \u00e9t\u00e9 vu en premi\u00e8re, \u00e9crivez un programme Python permettant de lister l'ensemble des noms \"stock\u00e9s\" \u00e0 l'activit\u00e9 6.2 (on attend une structure de type boucle)","title":"Activit\u00e9s"},{"location":"c6a/#activite-61","text":"\u00c9crivez un programme Python qui permettra de cr\u00e9er un dictionnaire avec les couples cl\u00e9/valeur suivants : nom => Doe prenom => John age => 42","title":"activit\u00e9 6.1"},{"location":"c6a/#activite-62","text":"Soit les donn\u00e9es suivantes : prenom nom age John Doe 42 Pierre Martin 23 Christine Dune 27 Marie Tellaz 12 Proposez une structure de donn\u00e9es permettant de stocker ces informations (on attend un programme Python).","title":"activit\u00e9 6.2"},{"location":"c6a/#activite-63","text":"En vous aidant de ce qui a \u00e9t\u00e9 vu en premi\u00e8re, \u00e9crivez un programme Python permettant de lister l'ensemble des noms \"stock\u00e9s\" \u00e0 l'activit\u00e9 6.2 (on attend une structure de type boucle)","title":"activit\u00e9 6.3"},{"location":"c6c/","text":"1) Les dictionnaires Nous allons maintenant \u00e9tudier un autre type abstrait de donn\u00e9es : les dictionnaires aussi appel\u00e9s tableau associatif. On retrouve une structure qui ressemble, \u00e0 premi\u00e8re vue, beaucoup \u00e0 un tableau (\u00e0 chaque \u00e9l\u00e9ment on associe un indice de position). Mais au lieu d'associer chaque \u00e9l\u00e9ment \u00e0 un indice de position, dans un dictionnaire, on associe chaque \u00e9l\u00e9ment (on parle de valeur dans un dictionnaire) \u00e0 une cl\u00e9, on dit qu'un dictionnaire contient des couples cl\u00e9:valeur (chaque cl\u00e9 est associ\u00e9e \u00e0 une valeur). Exemples de couples cl\u00e9:valeur => prenom:Kevin, nom:Durand, date-naissance:17-05-2005. prenom, nom et date sont des cl\u00e9s ; Kevin, Durand et 17-05-2005 sont des valeurs. Voici les op\u00e9rations que l'on peut effectuer sur le type abstrait dictionnaire : ajout : on associe une nouvelle valeur \u00e0 une nouvelle cl\u00e9 modif : on modifie un couple cl\u00e9:valeur en rempla\u00e7ant la valeur courante par une autre valeur (la cl\u00e9 restant identique) suppr : on supprime une cl\u00e9 (et donc la valeur qui lui est associ\u00e9e) rech : on recherche une valeur \u00e0 l'aide de la cl\u00e9 associ\u00e9e \u00e0 cette valeur. Exemples : Soit le dictionnaire D compos\u00e9 des couples cl\u00e9:valeur suivants => prenom:Kevin, nom:Durand, date-naissance:17-05-2005. Pour chaque exemple ci-dessous on repart du dictionnaire d'origine : ajout(D,tel:06060606) ; le dictionnaire D est maintenant compos\u00e9 des couples suivants : prenom:Kevin, nom:Durand, date-naissance:17-05-2005, tel:06060606 modif(D,nom:Dupont) ; le dictionnaire D est maintenant compos\u00e9 des couples suivants : prenom:Kevin, nom:Dupont, date-naissance:17-05-2005 suppr(D,date-naissance) ; le dictionnaire D est maintenant compos\u00e9 des couples suivants : prenom:Kevin, nom:Durand rech(D,prenom) ; la fonction renvoie Kevin 2) Impl\u00e9mentation des dictionnaires L'impl\u00e9mentation des dictionnaires dans les langages de programmation peut se faire \u00e0 l'aide des tables de hachage. Les tables de hachages ainsi que les fonctions de hachages qui sont utilis\u00e9es pour construire les tables de hachages, ne sont pas au programme de NSI. Cependant, l'utilisation des fonctions de hachages est omnipr\u00e9sente en informatique, il serait donc bon, pour votre \"culture g\u00e9n\u00e9rale informatique\", de conna\u00eetre le principe des fonctions de hachages. Voici un texte qui vous permettra de comprendre le principe des fonctions de hachages : c'est quoi le hachage . Pour avoir quelques id\u00e9es sur le principe des tables de hachages, je vous recommande le visionnage de cette vid\u00e9o : wandida : les tables de hachage Si vous avez visionn\u00e9 la vid\u00e9o de wandida, vous avez d\u00e9j\u00e0 compris que l'algorithme de recherche dans une table de hachage a une complexit\u00e9 O(1) (le temps de recherche ne d\u00e9pend pas du nombre d'\u00e9l\u00e9ments pr\u00e9sents dans la table de hachage), alors que la complexit\u00e9 de l'algorithme de recherche dans un tableau non tri\u00e9 est O(n). Comme l'impl\u00e9mentation des dictionnaires s'appuie sur les tables de hachage, on peut dire que l'algorithme de recherche d'un \u00e9l\u00e9ment dans un dictionnaire a une complexit\u00e9 O(1) alors que l'algorithme de recherche d'un \u00e9l\u00e9ment dans un tableau non tri\u00e9 a une complexit\u00e9 O(n). Python propose une impl\u00e9mentation des dictionnaires, nous avons d\u00e9j\u00e0 \u00e9tudi\u00e9 cette impl\u00e9mentation l'ann\u00e9e derni\u00e8re, n'h\u00e9sitez pas \u00e0 vous r\u00e9f\u00e9rer \u00e0 la ressource propos\u00e9e l'an pass\u00e9 : les dictionnaires en Python","title":"Cours"},{"location":"c6c/#1-les-dictionnaires","text":"Nous allons maintenant \u00e9tudier un autre type abstrait de donn\u00e9es : les dictionnaires aussi appel\u00e9s tableau associatif. On retrouve une structure qui ressemble, \u00e0 premi\u00e8re vue, beaucoup \u00e0 un tableau (\u00e0 chaque \u00e9l\u00e9ment on associe un indice de position). Mais au lieu d'associer chaque \u00e9l\u00e9ment \u00e0 un indice de position, dans un dictionnaire, on associe chaque \u00e9l\u00e9ment (on parle de valeur dans un dictionnaire) \u00e0 une cl\u00e9, on dit qu'un dictionnaire contient des couples cl\u00e9:valeur (chaque cl\u00e9 est associ\u00e9e \u00e0 une valeur). Exemples de couples cl\u00e9:valeur => prenom:Kevin, nom:Durand, date-naissance:17-05-2005. prenom, nom et date sont des cl\u00e9s ; Kevin, Durand et 17-05-2005 sont des valeurs. Voici les op\u00e9rations que l'on peut effectuer sur le type abstrait dictionnaire : ajout : on associe une nouvelle valeur \u00e0 une nouvelle cl\u00e9 modif : on modifie un couple cl\u00e9:valeur en rempla\u00e7ant la valeur courante par une autre valeur (la cl\u00e9 restant identique) suppr : on supprime une cl\u00e9 (et donc la valeur qui lui est associ\u00e9e) rech : on recherche une valeur \u00e0 l'aide de la cl\u00e9 associ\u00e9e \u00e0 cette valeur. Exemples : Soit le dictionnaire D compos\u00e9 des couples cl\u00e9:valeur suivants => prenom:Kevin, nom:Durand, date-naissance:17-05-2005. Pour chaque exemple ci-dessous on repart du dictionnaire d'origine : ajout(D,tel:06060606) ; le dictionnaire D est maintenant compos\u00e9 des couples suivants : prenom:Kevin, nom:Durand, date-naissance:17-05-2005, tel:06060606 modif(D,nom:Dupont) ; le dictionnaire D est maintenant compos\u00e9 des couples suivants : prenom:Kevin, nom:Dupont, date-naissance:17-05-2005 suppr(D,date-naissance) ; le dictionnaire D est maintenant compos\u00e9 des couples suivants : prenom:Kevin, nom:Durand rech(D,prenom) ; la fonction renvoie Kevin","title":"1) Les dictionnaires"},{"location":"c6c/#2-implementation-des-dictionnaires","text":"L'impl\u00e9mentation des dictionnaires dans les langages de programmation peut se faire \u00e0 l'aide des tables de hachage. Les tables de hachages ainsi que les fonctions de hachages qui sont utilis\u00e9es pour construire les tables de hachages, ne sont pas au programme de NSI. Cependant, l'utilisation des fonctions de hachages est omnipr\u00e9sente en informatique, il serait donc bon, pour votre \"culture g\u00e9n\u00e9rale informatique\", de conna\u00eetre le principe des fonctions de hachages. Voici un texte qui vous permettra de comprendre le principe des fonctions de hachages : c'est quoi le hachage . Pour avoir quelques id\u00e9es sur le principe des tables de hachages, je vous recommande le visionnage de cette vid\u00e9o : wandida : les tables de hachage Si vous avez visionn\u00e9 la vid\u00e9o de wandida, vous avez d\u00e9j\u00e0 compris que l'algorithme de recherche dans une table de hachage a une complexit\u00e9 O(1) (le temps de recherche ne d\u00e9pend pas du nombre d'\u00e9l\u00e9ments pr\u00e9sents dans la table de hachage), alors que la complexit\u00e9 de l'algorithme de recherche dans un tableau non tri\u00e9 est O(n). Comme l'impl\u00e9mentation des dictionnaires s'appuie sur les tables de hachage, on peut dire que l'algorithme de recherche d'un \u00e9l\u00e9ment dans un dictionnaire a une complexit\u00e9 O(1) alors que l'algorithme de recherche d'un \u00e9l\u00e9ment dans un tableau non tri\u00e9 a une complexit\u00e9 O(n). Python propose une impl\u00e9mentation des dictionnaires, nous avons d\u00e9j\u00e0 \u00e9tudi\u00e9 cette impl\u00e9mentation l'ann\u00e9e derni\u00e8re, n'h\u00e9sitez pas \u00e0 vous r\u00e9f\u00e9rer \u00e0 la ressource propos\u00e9e l'an pass\u00e9 : les dictionnaires en Python","title":"2)  Impl\u00e9mentation des dictionnaires"},{"location":"c6e/","text":"exercice 6.1 Soit le programme Python suivant : inventaire = { 'pommes' : 430 , 'bananes' : 312 , 'oranges' : 274 , 'poires' : 137 } stock = 0 for fruit in inventaire . keys (): if fruit != 'bananes' : stock = stock + inventaire [ fruit ] Quelle est la valeur de la variable stock apr\u00e8s l'ex\u00e9cution de ce programme ? exercice 6.2 Soit le programme Python suivant : P = [{ \"nom\" : \"Turing\" , \"prenom\" : \"Alan\" , \"age\" : 28 },{ \"nom\" : \"Lovelace\" , \"prenom\" : \"Ada\" , \"age\" : 27 }] Qu'obtient-on si on tape P[1]['age'] dans une console Python ? exercice 6.3 Soit le programme Python suivant : def ajoute ( stock , element , quantite ): if element in stock : stock [ element ] = stock [ element ] + quantite else : stock [ element ] = quantite stock = { 'clous' : 14 , 'vis' : 27 , 'boulons' : 8 , '\u00e9crous' : 24 } ajoute ( stock , 'vis' , 5 ) ajoute ( stock , 'chevilles' , 3 ) Quelle est la valeur de la variable stock \u00e0 la fin de cette ex\u00e9cution ? exercices du bac Sujet 6 2021 Exercice 2 Sujet 10 2021 Exercice 2 Sujet 6 2022 Exercice 1 Sujet 6 2022 Exercice 3 Sujet 7 2022 Exercice 2","title":"Exercices"},{"location":"c6e/#exercice-61","text":"Soit le programme Python suivant : inventaire = { 'pommes' : 430 , 'bananes' : 312 , 'oranges' : 274 , 'poires' : 137 } stock = 0 for fruit in inventaire . keys (): if fruit != 'bananes' : stock = stock + inventaire [ fruit ] Quelle est la valeur de la variable stock apr\u00e8s l'ex\u00e9cution de ce programme ?","title":"exercice 6.1"},{"location":"c6e/#exercice-62","text":"Soit le programme Python suivant : P = [{ \"nom\" : \"Turing\" , \"prenom\" : \"Alan\" , \"age\" : 28 },{ \"nom\" : \"Lovelace\" , \"prenom\" : \"Ada\" , \"age\" : 27 }] Qu'obtient-on si on tape P[1]['age'] dans une console Python ?","title":"exercice 6.2"},{"location":"c6e/#exercice-63","text":"Soit le programme Python suivant : def ajoute ( stock , element , quantite ): if element in stock : stock [ element ] = stock [ element ] + quantite else : stock [ element ] = quantite stock = { 'clous' : 14 , 'vis' : 27 , 'boulons' : 8 , '\u00e9crous' : 24 } ajoute ( stock , 'vis' , 5 ) ajoute ( stock , 'chevilles' , 3 ) Quelle est la valeur de la variable stock \u00e0 la fin de cette ex\u00e9cution ?","title":"exercice 6.3"},{"location":"c6e/#exercices-du-bac","text":"Sujet 6 2021 Exercice 2 Sujet 10 2021 Exercice 2 Sujet 6 2022 Exercice 1 Sujet 6 2022 Exercice 3 Sujet 7 2022 Exercice 2","title":"exercices du bac"},{"location":"c6r/","text":"Ce qu\u2019il faut savoir Types abstraits dictionnaire Dans un dictionnaire (aussi appel\u00e9 tableau associatif), chaque \u00e9l\u00e9ment (appel\u00e9 valeur) est associ\u00e9 \u00e0 une cl\u00e9. Un dictionnaire contient donc des couples cl\u00e9:valeur. Voici les op\u00e9rations que l'on peut effectuer sur le type abstrait dictionnaire : ajout : on associe une nouvelle valeur \u00e0 une nouvelle cl\u00e9 modification : on modifie un couple clef:valeur en rempla\u00e7ant la valeur courante par une autre valeur (la cl\u00e9 restant identique) suppression : on supprime une cl\u00e9 (et donc la valeur qui lui est associ\u00e9e) recherche : on recherche une valeur \u00e0 l'aide de la cl\u00e9 associ\u00e9e \u00e0 cette valeur. Impl\u00e9mentation des dictionnaires Dans beaucoup de langage de programmation les dictionnaires sont impl\u00e9ment\u00e9s \u00e0 l\u2019aide de tables de hachage. Algorithme de recherche dans un dictionnaire L'algorithme de recherche d'un \u00e9l\u00e9ment dans un dictionnaire a une complexit\u00e9 O(1). La dur\u00e9e de recherche ne d\u00e9pend pas du nombre d'\u00e9l\u00e9ments pr\u00e9sents dans le dictionnaire. Ce qu\u2019il faut savoir faire Savoir utiliser les dictionnaires en Python","title":"R\u00e9vision"},{"location":"c6r/#ce-quil-faut-savoir","text":"","title":"Ce qu\u2019il faut savoir"},{"location":"c6r/#types-abstraits-dictionnaire","text":"Dans un dictionnaire (aussi appel\u00e9 tableau associatif), chaque \u00e9l\u00e9ment (appel\u00e9 valeur) est associ\u00e9 \u00e0 une cl\u00e9. Un dictionnaire contient donc des couples cl\u00e9:valeur. Voici les op\u00e9rations que l'on peut effectuer sur le type abstrait dictionnaire : ajout : on associe une nouvelle valeur \u00e0 une nouvelle cl\u00e9 modification : on modifie un couple clef:valeur en rempla\u00e7ant la valeur courante par une autre valeur (la cl\u00e9 restant identique) suppression : on supprime une cl\u00e9 (et donc la valeur qui lui est associ\u00e9e) recherche : on recherche une valeur \u00e0 l'aide de la cl\u00e9 associ\u00e9e \u00e0 cette valeur.","title":"Types abstraits dictionnaire"},{"location":"c6r/#implementation-des-dictionnaires","text":"Dans beaucoup de langage de programmation les dictionnaires sont impl\u00e9ment\u00e9s \u00e0 l\u2019aide de tables de hachage.","title":"Impl\u00e9mentation des dictionnaires"},{"location":"c6r/#algorithme-de-recherche-dans-un-dictionnaire","text":"L'algorithme de recherche d'un \u00e9l\u00e9ment dans un dictionnaire a une complexit\u00e9 O(1). La dur\u00e9e de recherche ne d\u00e9pend pas du nombre d'\u00e9l\u00e9ments pr\u00e9sents dans le dictionnaire.","title":"Algorithme de recherche dans un dictionnaire"},{"location":"c6r/#ce-quil-faut-savoir-faire","text":"Savoir utiliser les dictionnaires en Python","title":"Ce qu\u2019il faut savoir faire"},{"location":"c7a/","text":"activit\u00e9 7.1 Trouvez un autre exemple de donn\u00e9es qui peuvent \u00eatre repr\u00e9sent\u00e9es par un arbre binaire (dans le domaine de votre choix). Dessinez au moins une partie de cet arbre binaire. D\u00e9terminez la hauteur et la taille de l'arbre que vous aurez dessin\u00e9. activit\u00e9 7.2 Soit l'arbre binaire suivant : 1) Cet arbre est-il un arbre binaire ? Justifiez votre r\u00e9ponse. 2) Donnez la cl\u00e9 (valeur) de la racine de cet arbre. 3) Quels sont les fils du noeud B. 4) Donnez l'arbre droit du noeud A. 5) Le noeud C est-il une feuille ? Justifiez votre r\u00e9ponse. 6) Donnez la taille de cet arbre. 7) Donnez la profondeur du noeud B (on prendra la profondeur de la racine \u00e9gale \u00e0 0). 8) Donnez la hauteur de cet arbre (on prendra la profondeur de la racine \u00e9gale \u00e0 0). activit\u00e9 7.3 1) Expliquez pourquoi cet arbre binaire n'est pas un arbre binaire de recherche. 2) Modifiez cet arbre pour le transformer en arbre binaire de recherche. activit\u00e9 7.4 Soit les valeurs suivantes : 14, 22, 8, 47, 42, 13, 1, 24, 33, 74. Construisez un arbre binaire de recherche \u00e0 partir de ces valeurs.","title":"Activit\u00e9s"},{"location":"c7a/#activite-71","text":"Trouvez un autre exemple de donn\u00e9es qui peuvent \u00eatre repr\u00e9sent\u00e9es par un arbre binaire (dans le domaine de votre choix). Dessinez au moins une partie de cet arbre binaire. D\u00e9terminez la hauteur et la taille de l'arbre que vous aurez dessin\u00e9.","title":"activit\u00e9 7.1"},{"location":"c7a/#activite-72","text":"Soit l'arbre binaire suivant : 1) Cet arbre est-il un arbre binaire ? Justifiez votre r\u00e9ponse. 2) Donnez la cl\u00e9 (valeur) de la racine de cet arbre. 3) Quels sont les fils du noeud B. 4) Donnez l'arbre droit du noeud A. 5) Le noeud C est-il une feuille ? Justifiez votre r\u00e9ponse. 6) Donnez la taille de cet arbre. 7) Donnez la profondeur du noeud B (on prendra la profondeur de la racine \u00e9gale \u00e0 0). 8) Donnez la hauteur de cet arbre (on prendra la profondeur de la racine \u00e9gale \u00e0 0).","title":"activit\u00e9 7.2"},{"location":"c7a/#activite-73","text":"1) Expliquez pourquoi cet arbre binaire n'est pas un arbre binaire de recherche. 2) Modifiez cet arbre pour le transformer en arbre binaire de recherche.","title":"activit\u00e9 7.3"},{"location":"c7a/#activite-74","text":"Soit les valeurs suivantes : 14, 22, 8, 47, 42, 13, 1, 24, 33, 74. Construisez un arbre binaire de recherche \u00e0 partir de ces valeurs.","title":"activit\u00e9 7.4"},{"location":"c7c/","text":"1) La notion d'arbre Un organisateur de tournoi de rugby recherche la meilleure solution pour afficher les potentiels quarts de final, demi-finales et finale : Au d\u00e9part nous avons 4 poules de 4 \u00e9quipes. Les 4 \u00e9quipes d'une poule s'affrontent dans un mini championnat (3 matchs par \u00e9quipe). \u00c0 l'issue de cette phase de poule, les 2 premi\u00e8res \u00e9quipes de chaque poule sont qualifi\u00e9es pour les quarts de finale. Dans ce qui suit, on d\u00e9signe les 2 qualifi\u00e9s par poule par : Poule 1 => 1er Eq1 ; 2e Eq8 Poule 2 => 1er Eq2 ; 2e Eq7 Poule 3 => 1er Eq3 ; 2e Eq6 Poule 4 => 1er Eq4 ; 2e Eq5 En quart de final, on va avoir : quart de finale 1 => Eq1 contre Eq5 quart de finale 2 => Eq2 contre Eq6 quart de finale 3 => Eq3 contre Eq7 quart de finale 4 => Eq4 contre Eq8 Pour les demi-finales on aura : demi-finale 1 => vainqueur quart de finale 1 contre vainqueur quart de finale 3 demi-finale 2 => vainqueur quart de finale 2 contre vainqueur quart de finale 4 L'organisateur du tournoi affiche les informations ci-dessus le jour du tournoi. Malheureusement, la plupart des spectateurs se perdent quand ils cherchent \u00e0 d\u00e9terminer les potentielles demi-finales (et ne parlons pas de la finale !) Pourtant, un simple graphique aurait grandement simplifi\u00e9 les choses : Les spectateurs peuvent alors recopier sur un bout de papier ce sch\u00e9ma et ensuite se livrer au jeu des pronostics. Nous avons ci-dessous ce que l'on appelle une structure en arbre. On peut aussi retrouver cette m\u00eame structure dans un arbre \"p\u00e8re/m\u00e8re\" : Dernier exemple, les syst\u00e8mes de fichiers dans les syst\u00e8mes de type UNIX ont aussi une structure en arbre (notion vue l'ann\u00e9e derni\u00e8re) Les arbres sont des types abstraits tr\u00e8s utilis\u00e9s en informatique. On les utilise notamment quand on a besoin d'une structure hi\u00e9rarchique des donn\u00e9es : dans l'exemple ci-dessous le fichier grub.cfg ne se trouve pas au m\u00eame niveau que le fichier rapport.odt (le fichier grub.cfg se trouve \"plus proche\" de la racine / que le fichier rapport.odt). On ne pourrait pas avec une simple liste qui contiendrait les noms des fichiers et des r\u00e9pertoires, rendre compte de cette hi\u00e9rarchie (plus ou moins \"proche\" de la racine). On trouve souvent dans cette hi\u00e9rarchie une notion de temps (les quarts de finale sont avant les demi-finales ou encore votre grand-m\u00e8re paternelle est n\u00e9e avant votre p\u00e8re), mais ce n'est pas une obligation (voir l'arborescence du syst\u00e8me de fichiers). 2) les arbres binaires a) introduction Les arbres binaires sont des cas particuliers d'arbres : l'arbre du tournoi de rugby et l'arbre \"p\u00e8re, m\u00e8re...\" sont des arbres binaires, en revanche, l'arbre repr\u00e9sentant la structure du syst\u00e8me de fichier n'est pas un arbre binaire (m\u00eame chose pour un v\u00e9ritable arbre g\u00e9n\u00e9alogique). Dans un arbre binaire, on a au maximum 2 branches qui partent d'un \u00e9l\u00e9ment (pour le syst\u00e8me de fichiers, on a 7 branches qui partent de la racine : ce n'est donc pas un arbre binaire). Dans la suite nous allons uniquement travailler sur les arbres binaires. Soit l'arbre binaire suivant : b) un peu de vocabulaire chaque \u00e9l\u00e9ment de l'arbre est appel\u00e9 noeud (par exemple : A, B, C, D,...,P et Q sont des noeuds) le noeud initial (ici A) est appel\u00e9 noeud racine ou plus simplement racine On dira que le noeud E et le noeud D sont les fils du noeud B. On dira que le noeud B est le p\u00e8re des noeuds E et D Dans un arbre binaire, un noeud poss\u00e8de au plus 2 fils Un noeud n'ayant aucun fils est appel\u00e9 feuille (exemples : D, H, N, O, J, K, L, P et Q sont des feuilles) \u00c0 chaque noeud d'un arbre binaire, on associe une cl\u00e9 (on peut aussi utiliser le terme \"valeur\" \u00e0 la place de cl\u00e9), un \"sous-arbre gauche\" et un \"sous-arbre droit\" (exemple : \u00e0 partir du noeud ayant pour cl\u00e9 C on va trouver un sous-arbre gauche compos\u00e9 des noeuds F, J et K et un sous-arbre droit compos\u00e9 des noeuds G, L, M, P et Q) Un arbre (ou un sous-arbre) vide est not\u00e9 NIL (NIL est une abr\u00e9viation du latin nihil qui veut dire \"rien\"). Par exemple, le sous-arbre gauche du noeud D est NIL (m\u00eame chose pour son sous-arbre droit d'ailleurs puisque D est une feuille). On appelle ar\u00eate le segment qui relie 2 noeuds. On appelle taille d'un arbre le nombre de noeuds pr\u00e9sents dans cet arbre On appelle profondeur d'un n\u0153ud ou d'une feuille dans un arbre binaire le nombre de n\u0153uds du chemin qui va de la racine \u00e0 ce n\u0153ud. La racine d'un arbre est \u00e0 une profondeur 1, et la profondeur d'un n\u0153ud est \u00e9gale \u00e0 la profondeur de son pr\u00e9d\u00e9cesseur plus 1. Si un noeud est \u00e0 une profondeur p, tous ses successeurs sont \u00e0 une profondeur p+1. Exemples : profondeur de B = 2 ; profondeur de I = 4 ; profondeur de P = 5 ATTENTION : on trouve aussi dans certains livres la profondeur de la racine \u00e9gale \u00e0 0 (on trouve alors : profondeur de B = 1 ; profondeur de I = 3 ; profondeur de P = 4). Les 2 d\u00e9finitions sont valables, il faut juste pr\u00e9ciser si vous consid\u00e9rez que la profondeur de la racine est de 1 ou de 0. On appelle hauteur d'un arbre la profondeur maximale des n\u0153uds de l'arbre. Exemple : la profondeur de P = 5, c'est un des noeuds les plus profond, donc la hauteur de l'arbre est de 5. ATTENTION : comme on trouve 2 d\u00e9finitions pour la profondeur, on peut trouver 2 r\u00e9sultats diff\u00e9rents pour la hauteur : si on consid\u00e8re la profondeur de la racine \u00e9gale \u00e0 1, on aura bien une hauteur de 5, mais si l'on consid\u00e8re que la profondeur de la racine est de 0, on aura alors une hauteur de 4. c) structure r\u00e9cursive Il est important de bien noter que l'on peut aussi voir les arbres comme des structures r\u00e9cursives : les fils d'un noeud sont des arbres (sous-arbre gauche et un sous-arbre droite dans le cas d'un arbre binaire), ces arbres sont eux-m\u00eames constitu\u00e9s d'arbres... d) encadrement de la hauteur d'un arbre Il est possible d'avoir des arbres binaires de m\u00eame taille, mais de \"forme\" tr\u00e8s diff\u00e9rente : Sur le sch\u00e9ma ci-dessus l'arbre 1 est dit \" filiforme\" alors que l'arbre 2 est dit \"complet\" (on dira qu'un arbre binaire est complet si tous les noeuds poss\u00e8dent 2 fils et que toutes les feuilles se situent \u00e0 la m\u00eame profondeur). On pourra aussi dire que l'arbre 1 est d\u00e9s\u00e9quilibr\u00e9 alors que l'arbre 2 est \u00e9quilibr\u00e9. Si on prend un arbre filiforme de taille n, on peut dire que la hauteur de cet arbre est \u00e9gale \u00e0 \\(n\u22121\\) (si on prend la d\u00e9finition de la hauteur d'un arbre o\u00f9 la racine a une profondeur 0) Si on prend un arbre complet de taille n, on peut d\u00e9montrer que la hauteur de cet arbre est \u00e9gale \u00e0 la partie enti\u00e8re de \\(log_2(n)\\) (on arrondit \u00e0 l'entier imm\u00e9diatement inf\u00e9rieur le \\(log_2(n)\\) ). Dans le cas de l'arbre 2, nous avons \\(log_2(7)=2,8\\) donc en prenant la partie enti\u00e8re on a bien la hauteur de l'arbre 2 \u00e9gale \u00e0 2. Un arbre filiforme et un arbre complet \u00e9tant deux cas extr\u00eames, on peut affirmer que pour un arbre binaire quelconque : \\(\\lfloor log_2(n) \\rfloor \\leq h \\leq n-1\\) avec n la taille de l'arbre et h la hauteur de l'arbre ( \\(\\lfloor log_2(n) \\rfloor\\) permet de prendre la partie enti\u00e8re du logarithme base 2 de n) e) les arbres binaires en Python Python ne propose pas de fa\u00e7on native l'impl\u00e9mentation des arbres binaires. Mais nous aurons, plus tard dans l'ann\u00e9e, l'occasion d'impl\u00e9menter des arbres binaires en Python en utilisant la programmation orient\u00e9e objet. 3) les arbres binaires de recherche Un arbre binaire de recherche est un cas particulier d'arbre binaire. Pour avoir un arbre binaire de recherche : il faut avoir un arbre binaire il faut que les cl\u00e9s de noeuds composant l'arbre soient ordonnables (on doit pouvoir classer les noeuds, par exemple, de la plus petite cl\u00e9 \u00e0 la plus grande) soit x un noeud d'un arbre binaire de recherche. Si y est un noeud du sous-arbre gauche de x, alors il faut que y.cl\u00e9 \u2a7d x.cl\u00e9. Si y est un noeud du sous-arbre droit de x, il faut alors que x.cl\u00e9 \u2a7d y.cl\u00e9 exemple d'arbre binaire de recherche : Vous pouvez v\u00e9rifier que le fils gauche d'un noeud a une valeur plus petite que son p\u00e8re (par exemple 3 < 6) et que le fils droit d'un noeud a une valeur plus grande que son p\u00e8re (par exemple 7 > 6) Attention : pour un noeud donn\u00e9 A, tous les noeuds de l'arbre gauche de A auront des valeurs plus petites que la valeur du noeud A et tous les noeuds de l'arbre droit de A auront des valeurs plus grandes que la valeur du noeud A.","title":"Cours"},{"location":"c7c/#1-la-notion-darbre","text":"Un organisateur de tournoi de rugby recherche la meilleure solution pour afficher les potentiels quarts de final, demi-finales et finale : Au d\u00e9part nous avons 4 poules de 4 \u00e9quipes. Les 4 \u00e9quipes d'une poule s'affrontent dans un mini championnat (3 matchs par \u00e9quipe). \u00c0 l'issue de cette phase de poule, les 2 premi\u00e8res \u00e9quipes de chaque poule sont qualifi\u00e9es pour les quarts de finale. Dans ce qui suit, on d\u00e9signe les 2 qualifi\u00e9s par poule par : Poule 1 => 1er Eq1 ; 2e Eq8 Poule 2 => 1er Eq2 ; 2e Eq7 Poule 3 => 1er Eq3 ; 2e Eq6 Poule 4 => 1er Eq4 ; 2e Eq5 En quart de final, on va avoir : quart de finale 1 => Eq1 contre Eq5 quart de finale 2 => Eq2 contre Eq6 quart de finale 3 => Eq3 contre Eq7 quart de finale 4 => Eq4 contre Eq8 Pour les demi-finales on aura : demi-finale 1 => vainqueur quart de finale 1 contre vainqueur quart de finale 3 demi-finale 2 => vainqueur quart de finale 2 contre vainqueur quart de finale 4 L'organisateur du tournoi affiche les informations ci-dessus le jour du tournoi. Malheureusement, la plupart des spectateurs se perdent quand ils cherchent \u00e0 d\u00e9terminer les potentielles demi-finales (et ne parlons pas de la finale !) Pourtant, un simple graphique aurait grandement simplifi\u00e9 les choses : Les spectateurs peuvent alors recopier sur un bout de papier ce sch\u00e9ma et ensuite se livrer au jeu des pronostics. Nous avons ci-dessous ce que l'on appelle une structure en arbre. On peut aussi retrouver cette m\u00eame structure dans un arbre \"p\u00e8re/m\u00e8re\" : Dernier exemple, les syst\u00e8mes de fichiers dans les syst\u00e8mes de type UNIX ont aussi une structure en arbre (notion vue l'ann\u00e9e derni\u00e8re) Les arbres sont des types abstraits tr\u00e8s utilis\u00e9s en informatique. On les utilise notamment quand on a besoin d'une structure hi\u00e9rarchique des donn\u00e9es : dans l'exemple ci-dessous le fichier grub.cfg ne se trouve pas au m\u00eame niveau que le fichier rapport.odt (le fichier grub.cfg se trouve \"plus proche\" de la racine / que le fichier rapport.odt). On ne pourrait pas avec une simple liste qui contiendrait les noms des fichiers et des r\u00e9pertoires, rendre compte de cette hi\u00e9rarchie (plus ou moins \"proche\" de la racine). On trouve souvent dans cette hi\u00e9rarchie une notion de temps (les quarts de finale sont avant les demi-finales ou encore votre grand-m\u00e8re paternelle est n\u00e9e avant votre p\u00e8re), mais ce n'est pas une obligation (voir l'arborescence du syst\u00e8me de fichiers).","title":"1) La notion d'arbre"},{"location":"c7c/#2-les-arbres-binaires","text":"","title":"2) les arbres binaires"},{"location":"c7c/#a-introduction","text":"Les arbres binaires sont des cas particuliers d'arbres : l'arbre du tournoi de rugby et l'arbre \"p\u00e8re, m\u00e8re...\" sont des arbres binaires, en revanche, l'arbre repr\u00e9sentant la structure du syst\u00e8me de fichier n'est pas un arbre binaire (m\u00eame chose pour un v\u00e9ritable arbre g\u00e9n\u00e9alogique). Dans un arbre binaire, on a au maximum 2 branches qui partent d'un \u00e9l\u00e9ment (pour le syst\u00e8me de fichiers, on a 7 branches qui partent de la racine : ce n'est donc pas un arbre binaire). Dans la suite nous allons uniquement travailler sur les arbres binaires. Soit l'arbre binaire suivant :","title":"a) introduction"},{"location":"c7c/#b-un-peu-de-vocabulaire","text":"chaque \u00e9l\u00e9ment de l'arbre est appel\u00e9 noeud (par exemple : A, B, C, D,...,P et Q sont des noeuds) le noeud initial (ici A) est appel\u00e9 noeud racine ou plus simplement racine On dira que le noeud E et le noeud D sont les fils du noeud B. On dira que le noeud B est le p\u00e8re des noeuds E et D Dans un arbre binaire, un noeud poss\u00e8de au plus 2 fils Un noeud n'ayant aucun fils est appel\u00e9 feuille (exemples : D, H, N, O, J, K, L, P et Q sont des feuilles) \u00c0 chaque noeud d'un arbre binaire, on associe une cl\u00e9 (on peut aussi utiliser le terme \"valeur\" \u00e0 la place de cl\u00e9), un \"sous-arbre gauche\" et un \"sous-arbre droit\" (exemple : \u00e0 partir du noeud ayant pour cl\u00e9 C on va trouver un sous-arbre gauche compos\u00e9 des noeuds F, J et K et un sous-arbre droit compos\u00e9 des noeuds G, L, M, P et Q) Un arbre (ou un sous-arbre) vide est not\u00e9 NIL (NIL est une abr\u00e9viation du latin nihil qui veut dire \"rien\"). Par exemple, le sous-arbre gauche du noeud D est NIL (m\u00eame chose pour son sous-arbre droit d'ailleurs puisque D est une feuille). On appelle ar\u00eate le segment qui relie 2 noeuds. On appelle taille d'un arbre le nombre de noeuds pr\u00e9sents dans cet arbre On appelle profondeur d'un n\u0153ud ou d'une feuille dans un arbre binaire le nombre de n\u0153uds du chemin qui va de la racine \u00e0 ce n\u0153ud. La racine d'un arbre est \u00e0 une profondeur 1, et la profondeur d'un n\u0153ud est \u00e9gale \u00e0 la profondeur de son pr\u00e9d\u00e9cesseur plus 1. Si un noeud est \u00e0 une profondeur p, tous ses successeurs sont \u00e0 une profondeur p+1. Exemples : profondeur de B = 2 ; profondeur de I = 4 ; profondeur de P = 5 ATTENTION : on trouve aussi dans certains livres la profondeur de la racine \u00e9gale \u00e0 0 (on trouve alors : profondeur de B = 1 ; profondeur de I = 3 ; profondeur de P = 4). Les 2 d\u00e9finitions sont valables, il faut juste pr\u00e9ciser si vous consid\u00e9rez que la profondeur de la racine est de 1 ou de 0. On appelle hauteur d'un arbre la profondeur maximale des n\u0153uds de l'arbre. Exemple : la profondeur de P = 5, c'est un des noeuds les plus profond, donc la hauteur de l'arbre est de 5. ATTENTION : comme on trouve 2 d\u00e9finitions pour la profondeur, on peut trouver 2 r\u00e9sultats diff\u00e9rents pour la hauteur : si on consid\u00e8re la profondeur de la racine \u00e9gale \u00e0 1, on aura bien une hauteur de 5, mais si l'on consid\u00e8re que la profondeur de la racine est de 0, on aura alors une hauteur de 4.","title":"b) un peu de vocabulaire"},{"location":"c7c/#c-structure-recursive","text":"Il est important de bien noter que l'on peut aussi voir les arbres comme des structures r\u00e9cursives : les fils d'un noeud sont des arbres (sous-arbre gauche et un sous-arbre droite dans le cas d'un arbre binaire), ces arbres sont eux-m\u00eames constitu\u00e9s d'arbres...","title":"c) structure r\u00e9cursive"},{"location":"c7c/#d-encadrement-de-la-hauteur-dun-arbre","text":"Il est possible d'avoir des arbres binaires de m\u00eame taille, mais de \"forme\" tr\u00e8s diff\u00e9rente : Sur le sch\u00e9ma ci-dessus l'arbre 1 est dit \" filiforme\" alors que l'arbre 2 est dit \"complet\" (on dira qu'un arbre binaire est complet si tous les noeuds poss\u00e8dent 2 fils et que toutes les feuilles se situent \u00e0 la m\u00eame profondeur). On pourra aussi dire que l'arbre 1 est d\u00e9s\u00e9quilibr\u00e9 alors que l'arbre 2 est \u00e9quilibr\u00e9. Si on prend un arbre filiforme de taille n, on peut dire que la hauteur de cet arbre est \u00e9gale \u00e0 \\(n\u22121\\) (si on prend la d\u00e9finition de la hauteur d'un arbre o\u00f9 la racine a une profondeur 0) Si on prend un arbre complet de taille n, on peut d\u00e9montrer que la hauteur de cet arbre est \u00e9gale \u00e0 la partie enti\u00e8re de \\(log_2(n)\\) (on arrondit \u00e0 l'entier imm\u00e9diatement inf\u00e9rieur le \\(log_2(n)\\) ). Dans le cas de l'arbre 2, nous avons \\(log_2(7)=2,8\\) donc en prenant la partie enti\u00e8re on a bien la hauteur de l'arbre 2 \u00e9gale \u00e0 2. Un arbre filiforme et un arbre complet \u00e9tant deux cas extr\u00eames, on peut affirmer que pour un arbre binaire quelconque : \\(\\lfloor log_2(n) \\rfloor \\leq h \\leq n-1\\) avec n la taille de l'arbre et h la hauteur de l'arbre ( \\(\\lfloor log_2(n) \\rfloor\\) permet de prendre la partie enti\u00e8re du logarithme base 2 de n)","title":"d) encadrement de la hauteur d'un arbre"},{"location":"c7c/#e-les-arbres-binaires-en-python","text":"Python ne propose pas de fa\u00e7on native l'impl\u00e9mentation des arbres binaires. Mais nous aurons, plus tard dans l'ann\u00e9e, l'occasion d'impl\u00e9menter des arbres binaires en Python en utilisant la programmation orient\u00e9e objet.","title":"e) les arbres binaires en Python"},{"location":"c7c/#3-les-arbres-binaires-de-recherche","text":"Un arbre binaire de recherche est un cas particulier d'arbre binaire. Pour avoir un arbre binaire de recherche : il faut avoir un arbre binaire il faut que les cl\u00e9s de noeuds composant l'arbre soient ordonnables (on doit pouvoir classer les noeuds, par exemple, de la plus petite cl\u00e9 \u00e0 la plus grande) soit x un noeud d'un arbre binaire de recherche. Si y est un noeud du sous-arbre gauche de x, alors il faut que y.cl\u00e9 \u2a7d x.cl\u00e9. Si y est un noeud du sous-arbre droit de x, il faut alors que x.cl\u00e9 \u2a7d y.cl\u00e9 exemple d'arbre binaire de recherche : Vous pouvez v\u00e9rifier que le fils gauche d'un noeud a une valeur plus petite que son p\u00e8re (par exemple 3 < 6) et que le fils droit d'un noeud a une valeur plus grande que son p\u00e8re (par exemple 7 > 6) Attention : pour un noeud donn\u00e9 A, tous les noeuds de l'arbre gauche de A auront des valeurs plus petites que la valeur du noeud A et tous les noeuds de l'arbre droit de A auront des valeurs plus grandes que la valeur du noeud A.","title":"3) les arbres binaires de recherche"},{"location":"c7e/","text":"voir les exercices du chapitre 8","title":"Exercices"},{"location":"c7r/","text":"ce qu'il faut savoir Les arbres sont des types abstraits tr\u00e8s utilis\u00e9s en informatique. On les utilise notamment quand on a besoin d'une structure hi\u00e9rarchique des donn\u00e9es. Vocabulaire : chaque \u00e9l\u00e9ment de l'arbre est appel\u00e9 noeud (par exemple : A, B, C, D,...,P et Q sont des noeuds) le noeud initial (A) est appel\u00e9 noeud racine ou plus simplement racine On dira que le noeud E et le noeud D sont les fils du noeud B. On dira que le noeud B est le p\u00e8re des noeuds E et D Dans un arbre binaire, un noeud poss\u00e8de au plus 2 fils Un noeud n'ayant aucun fils est appel\u00e9 feuille (exemples : D, H, N, O, J, K, L, P et Q sont des feuilles) \u00c0 chaque noeud d'un arbre binaire, on associe une cl\u00e9 (\"valeur\" associ\u00e9e au noeud on peut aussi utiliser le terme \"valeur\" \u00e0 la place de cl\u00e9), un \"sous-arbre gauche\" et un \"sous-arbre droit\" (exemple : \u00e0 partir du noeud ayant pour cl\u00e9 C on va trouver un sous-arbre gauche compos\u00e9 des noeuds F, J et K et un sous-arbre droit compos\u00e9 des noeuds G, L, M, P et Q) Un arbre (ou un sous-arbre) vide est not\u00e9 NIL (NIL est une abr\u00e9viation du latin nihil qui veut dire \"rien\"). Par exemple, le sous-arbre gauche du noeud D est NIL (m\u00eame chose pour son sous-arbre droit d'ailleurs puisque D est une feuille). On appelle ar\u00eate le segment qui relie 2 noeuds. On appelle taille d'un arbre le nombre de noeuds pr\u00e9sents dans cet arbre On appelle profondeur d'un n\u0153ud ou d'une feuille dans un arbre binaire le nombre de n\u0153uds du chemin qui va de la racine \u00e0 ce n\u0153ud. La racine d'un arbre est \u00e0 une profondeur 1, et la profondeur d'un n\u0153ud est \u00e9gale \u00e0 la profondeur de son pr\u00e9d\u00e9cesseur plus 1. Si un noeud est \u00e0 une profondeur p, tous ses successeurs sont \u00e0 une profondeur p+1. Exemples : profondeur de B = 2 ; profondeur de I = 4 ; profondeur de P = 5 ATTENTION : on trouve aussi dans certains livres la profondeur de la racine \u00e9gale \u00e0 0 (on trouve alors : profondeur de B = 1 ; profondeur de I = 3 ; profondeur de P = 4). Les 2 d\u00e9finitions sont valables, il faut juste pr\u00e9ciser si vous consid\u00e9rez que la profondeur de la racine est de 1 ou de 0. On appelle hauteur d'un arbre la profondeur maximale des n\u0153uds de l'arbre. Exemple : la profondeur de P = 5, c'est un des noeuds les plus profond, donc la hauteur de l'arbre est de 5. ATTENTION : comme on trouve 2 d\u00e9finitions pour la profondeur, on peut trouver 2 r\u00e9sultats diff\u00e9rents pour la hauteur : si on consid\u00e8re la profondeur de la racine \u00e9gale \u00e0 1, on aura bien une hauteur de 5, mais si l'on consid\u00e8re que la profondeur de la racine est de 0, on aura alors une hauteur de 4. Pour un arbre binaire quelconque, nous avons : \\(\\lfloor log_2(n) \\rfloor \\leq h \\leq n-1\\) avec n la taille de l'arbre et h la hauteur de l'arbre ( \\(\\lfloor log_2(n) \\rfloor\\) permet de prendre la partie enti\u00e8re du logarithme base 2 de n. Il est aussi important de bien noter que l'on peut aussi voir les arbres comme des structures r\u00e9cursives : les fils d'un n\u0153ud sont des arbres (sous-arbre gauche et un sous-arbre droite dans le cas d'un arbre binaire), ces arbres sont eux-m\u00eames constitu\u00e9s d'arbres... Un arbre binaire de recherche est un cas particulier d'arbre binaire. Pour avoir un arbre binaire de recherche : il faut avoir un arbre binaire il faut que les cl\u00e9s de noeuds composant l'arbre soient ordonnables (on doit pouvoir classer les noeuds, par exemple, de la plus petite cl\u00e9 \u00e0 la plus grande) soit x un noeud d'un arbre binaire de recherche. Si y est un noeud du sous-arbre gauche de x, alors il faut que y.cl\u00e9 \u2a7d x.cl\u00e9. Si y est un noeud du sous-arbre droit de x, il faut alors que x.cl\u00e9 \u2a7d y.cl\u00e9 Attention : pour un noeud donn\u00e9 A, tous les noeuds de l'arbre gauche de A auront des valeurs plus petites que la valeur du noeud A et tous les noeuds de l'arbre droit de A auront des valeurs plus grandes que la valeur du noeud A.","title":"R\u00e9vision"},{"location":"c7r/#ce-quil-faut-savoir","text":"Les arbres sont des types abstraits tr\u00e8s utilis\u00e9s en informatique. On les utilise notamment quand on a besoin d'une structure hi\u00e9rarchique des donn\u00e9es. Vocabulaire : chaque \u00e9l\u00e9ment de l'arbre est appel\u00e9 noeud (par exemple : A, B, C, D,...,P et Q sont des noeuds) le noeud initial (A) est appel\u00e9 noeud racine ou plus simplement racine On dira que le noeud E et le noeud D sont les fils du noeud B. On dira que le noeud B est le p\u00e8re des noeuds E et D Dans un arbre binaire, un noeud poss\u00e8de au plus 2 fils Un noeud n'ayant aucun fils est appel\u00e9 feuille (exemples : D, H, N, O, J, K, L, P et Q sont des feuilles) \u00c0 chaque noeud d'un arbre binaire, on associe une cl\u00e9 (\"valeur\" associ\u00e9e au noeud on peut aussi utiliser le terme \"valeur\" \u00e0 la place de cl\u00e9), un \"sous-arbre gauche\" et un \"sous-arbre droit\" (exemple : \u00e0 partir du noeud ayant pour cl\u00e9 C on va trouver un sous-arbre gauche compos\u00e9 des noeuds F, J et K et un sous-arbre droit compos\u00e9 des noeuds G, L, M, P et Q) Un arbre (ou un sous-arbre) vide est not\u00e9 NIL (NIL est une abr\u00e9viation du latin nihil qui veut dire \"rien\"). Par exemple, le sous-arbre gauche du noeud D est NIL (m\u00eame chose pour son sous-arbre droit d'ailleurs puisque D est une feuille). On appelle ar\u00eate le segment qui relie 2 noeuds. On appelle taille d'un arbre le nombre de noeuds pr\u00e9sents dans cet arbre On appelle profondeur d'un n\u0153ud ou d'une feuille dans un arbre binaire le nombre de n\u0153uds du chemin qui va de la racine \u00e0 ce n\u0153ud. La racine d'un arbre est \u00e0 une profondeur 1, et la profondeur d'un n\u0153ud est \u00e9gale \u00e0 la profondeur de son pr\u00e9d\u00e9cesseur plus 1. Si un noeud est \u00e0 une profondeur p, tous ses successeurs sont \u00e0 une profondeur p+1. Exemples : profondeur de B = 2 ; profondeur de I = 4 ; profondeur de P = 5 ATTENTION : on trouve aussi dans certains livres la profondeur de la racine \u00e9gale \u00e0 0 (on trouve alors : profondeur de B = 1 ; profondeur de I = 3 ; profondeur de P = 4). Les 2 d\u00e9finitions sont valables, il faut juste pr\u00e9ciser si vous consid\u00e9rez que la profondeur de la racine est de 1 ou de 0. On appelle hauteur d'un arbre la profondeur maximale des n\u0153uds de l'arbre. Exemple : la profondeur de P = 5, c'est un des noeuds les plus profond, donc la hauteur de l'arbre est de 5. ATTENTION : comme on trouve 2 d\u00e9finitions pour la profondeur, on peut trouver 2 r\u00e9sultats diff\u00e9rents pour la hauteur : si on consid\u00e8re la profondeur de la racine \u00e9gale \u00e0 1, on aura bien une hauteur de 5, mais si l'on consid\u00e8re que la profondeur de la racine est de 0, on aura alors une hauteur de 4. Pour un arbre binaire quelconque, nous avons : \\(\\lfloor log_2(n) \\rfloor \\leq h \\leq n-1\\) avec n la taille de l'arbre et h la hauteur de l'arbre ( \\(\\lfloor log_2(n) \\rfloor\\) permet de prendre la partie enti\u00e8re du logarithme base 2 de n. Il est aussi important de bien noter que l'on peut aussi voir les arbres comme des structures r\u00e9cursives : les fils d'un n\u0153ud sont des arbres (sous-arbre gauche et un sous-arbre droite dans le cas d'un arbre binaire), ces arbres sont eux-m\u00eames constitu\u00e9s d'arbres... Un arbre binaire de recherche est un cas particulier d'arbre binaire. Pour avoir un arbre binaire de recherche : il faut avoir un arbre binaire il faut que les cl\u00e9s de noeuds composant l'arbre soient ordonnables (on doit pouvoir classer les noeuds, par exemple, de la plus petite cl\u00e9 \u00e0 la plus grande) soit x un noeud d'un arbre binaire de recherche. Si y est un noeud du sous-arbre gauche de x, alors il faut que y.cl\u00e9 \u2a7d x.cl\u00e9. Si y est un noeud du sous-arbre droit de x, il faut alors que x.cl\u00e9 \u2a7d y.cl\u00e9 Attention : pour un noeud donn\u00e9 A, tous les noeuds de l'arbre gauche de A auront des valeurs plus petites que la valeur du noeud A et tous les noeuds de l'arbre droit de A auront des valeurs plus grandes que la valeur du noeud A.","title":"ce qu'il faut savoir"},{"location":"c8a/","text":"activit\u00e9 8.1 Soit l'arbre suivant : Appliquez l'algorithme qui permet de calculer le hauteur d'un arbre binaire \u00e0 l'arbre ci-dessus. Quel r\u00e9sultat obtenez-vous ? activit\u00e9 8.2 Soit l'arbre suivant : Appliquez l'algorithme qui permet de calculer la taille d'un arbre binaire \u00e0 l'arbre ci-dessus. Quel r\u00e9sultat obtenez-vous ? activit\u00e9 8.3 Soit l'arbre suivant : Appliquez l'algorithme qui permet de trouver un parcours dans l'ordre pr\u00e9fixe \u00e0 l'arbre ci-dessus. Quel r\u00e9sultat obtenez-vous ? activit\u00e9 8.4 Soit l'arbre suivant : Appliquez l'algorithme qui permet de trouver un parcours dans l'ordre suffixe \u00e0 l'arbre ci-dessus. Quel r\u00e9sultat obtenez-vous ? activit\u00e9 8.5 Soit l'arbre suivant : Appliquez l'algorithme qui permet de trouver un parcours dans l'ordre infixe \u00e0 l'arbre ci-dessus. Quel r\u00e9sultat obtenez-vous ? activit\u00e9 8.6 Soit l'arbre suivant : Appliquez l'algorithme qui permet de trouver un parcours en largeur d'abord \u00e0 l'arbre ci-dessus. Quel r\u00e9sultat obtenez-vous ? activit\u00e9 8.7 Soit l'arbre suivant : Appliquez l'algorithme qui permet de trouver un parcours dans l'ordre infixe \u00e0 l'arbre ci-dessus. Quel r\u00e9sultat obtenez-vous ? activit\u00e9 8.8 Appliquez l'algorithme de recherche d'une cl\u00e9 dans un arbre binaire de recherche sur l'arbre ci-dessous. On prendra k = 13. Quel r\u00e9sultat obtenez-vous ? activit\u00e9 8.9 Appliquez l'algorithme de recherche d'une cl\u00e9 dans un arbre binaire de recherche sur l'arbre ci-dessous. On prendra k = 16. Quel r\u00e9sultat obtenez-vous ?","title":"Activit\u00e9s"},{"location":"c8a/#activite-81","text":"Soit l'arbre suivant : Appliquez l'algorithme qui permet de calculer le hauteur d'un arbre binaire \u00e0 l'arbre ci-dessus. Quel r\u00e9sultat obtenez-vous ?","title":"activit\u00e9 8.1"},{"location":"c8a/#activite-82","text":"Soit l'arbre suivant : Appliquez l'algorithme qui permet de calculer la taille d'un arbre binaire \u00e0 l'arbre ci-dessus. Quel r\u00e9sultat obtenez-vous ?","title":"activit\u00e9 8.2"},{"location":"c8a/#activite-83","text":"Soit l'arbre suivant : Appliquez l'algorithme qui permet de trouver un parcours dans l'ordre pr\u00e9fixe \u00e0 l'arbre ci-dessus. Quel r\u00e9sultat obtenez-vous ?","title":"activit\u00e9 8.3"},{"location":"c8a/#activite-84","text":"Soit l'arbre suivant : Appliquez l'algorithme qui permet de trouver un parcours dans l'ordre suffixe \u00e0 l'arbre ci-dessus. Quel r\u00e9sultat obtenez-vous ?","title":"activit\u00e9 8.4"},{"location":"c8a/#activite-85","text":"Soit l'arbre suivant : Appliquez l'algorithme qui permet de trouver un parcours dans l'ordre infixe \u00e0 l'arbre ci-dessus. Quel r\u00e9sultat obtenez-vous ?","title":"activit\u00e9 8.5"},{"location":"c8a/#activite-86","text":"Soit l'arbre suivant : Appliquez l'algorithme qui permet de trouver un parcours en largeur d'abord \u00e0 l'arbre ci-dessus. Quel r\u00e9sultat obtenez-vous ?","title":"activit\u00e9 8.6"},{"location":"c8a/#activite-87","text":"Soit l'arbre suivant : Appliquez l'algorithme qui permet de trouver un parcours dans l'ordre infixe \u00e0 l'arbre ci-dessus. Quel r\u00e9sultat obtenez-vous ?","title":"activit\u00e9 8.7"},{"location":"c8a/#activite-88","text":"Appliquez l'algorithme de recherche d'une cl\u00e9 dans un arbre binaire de recherche sur l'arbre ci-dessous. On prendra k = 13. Quel r\u00e9sultat obtenez-vous ?","title":"activit\u00e9 8.8"},{"location":"c8a/#activite-89","text":"Appliquez l'algorithme de recherche d'une cl\u00e9 dans un arbre binaire de recherche sur l'arbre ci-dessous. On prendra k = 16. Quel r\u00e9sultat obtenez-vous ?","title":"activit\u00e9 8.9"},{"location":"c8c/","text":"1) notations utilis\u00e9es Dans ce chapitre nous allons utiliser les notations suivantes : Soit un arbre T : T.racine correspond au noeud racine de l'arbre T Soit un noeud x : x.gauche correspond au sous-arbre gauche du noeud x x.droit correspond au sous-arbre droit du noeud x x.cl\u00e9 correspond \u00e0 la cl\u00e9 du noeud x Il faut noter que si le noeud x est une feuille, x.gauche et x.droite sont des arbres vides (NIL) 2) calculer la hauteur d'un arbre Voici l'algorithme qui permet de calculer la hauteur d'un arbre : VARIABLE T : arbre x : noeud DEBUT HAUTEUR(T) : si T \u2260 NIL : x \u2190 T.racine renvoyer 1 + max(HAUTEUR(x.gauche), HAUTEUR(x.droit)) sinon : renvoyer 0 fin si FIN N.B. la fonction max renvoie la plus grande valeur des 2 valeurs pass\u00e9es en param\u00e8tre (exemple : max(5,6) renvoie 6 Nous avons ici un algorithme r\u00e9cursif. Vous aurez l'occasion de constater que c'est souvent le cas dans les algorithmes qui travaillent sur des structures de donn\u00e9es telles que les arbres. 3) calculer la taille d'un arbre Nous allons maintenant \u00e9tudier un algorithme qui permet de calculer le nombre de noeuds pr\u00e9sents dans un arbre. VARIABLE T : arbre x : noeud DEBUT TAILLE(T) : si T \u2260 NIL : x \u2190 T.racine renvoyer 1 + TAILLE(x.gauche) + TAILLE(x.droit) sinon : renvoyer 0 fin si FIN 4) parcours d'un arbre a) introduction Il existe plusieurs fa\u00e7ons de parcourir un arbre (parcourir un arbre = passer par tous les noeuds), nous allons en \u00e9tudier quelques-unes. Le choix du parcours d\u00e9pend du probl\u00e8me \u00e0 traiter b) parcourir un arbre dans l'ordre pr\u00e9fixe Voici l'algorithme qui va permettre de parcourir un arbre dans l'ordre pr\u00e9fixe : VARIABLE T : arbre x : noeud DEBUT PARCOURS-PREFIXE(T) : si T \u2260 NIL : x \u2190 T.racine affiche x.cl\u00e9 PARCOURS-PREFIXE(x.gauche) PARCOURS-PREFIXE(x.droit) fin si FIN Comme vous pouvez le constater ci-dessus, dans le cas du parcours pr\u00e9fixe, on affiche chaque noeud avant de parcourir son sous-arbre gauche et son sous-arbre droit. c) parcourir un arbre dans l'ordre suffixe Voici l'algorithme qui va permettre de parcourir un arbre dans l'ordre suffixe : VARIABLE T : arbre x : noeud DEBUT PARCOURS-SUFFIXE(T) : si T \u2260 NIL : x \u2190 T.racine PARCOURS-SUFFIXE(x.gauche) PARCOURS-SUFFIXE(x.droit) affiche x.cl\u00e9 fin si FIN Dans le cas du parcours suffixe, on affiche chaque noeud apr\u00e8s avoir parcouru son sous-arbre gauche et son sous-arbre droit. d) parcourir un arbre dans l'ordre infixe Voici l'algorithme qui va permettre de parcourir un arbre dans l'ordre infixe : VARIABLE T : arbre x : noeud DEBUT PARCOURS-INFIXE(T) : si T \u2260 NIL : x \u2190 T.racine PARCOURS-INFIXE(x.gauche) affiche x.cl\u00e9 PARCOURS-INFIXE(x.droit) fin si FIN Dans le cas du parcours infixe, pour un noeud A donn\u00e9, on parcourra le sous-arbre gauche de A, puis on affichera la cl\u00e9 de A puis enfin, on parcourra le sous-arbre droite de A e) parcourir un arbre en largeur d'abord Voici l'algorithme qui va permettre de parcourir un arbre en largeur d'abord : T : arbre Tg : arbre Td : arbre x : noeud f : file (initialement vide) DEBUT PARCOURS-LARGEUR(T) : enfiler(T.racine, f) //on place la racine dans la file tant que f non vide : x \u2190 defiler(f) affiche x.cl\u00e9 si x.gauche \u2260 NIL : Tg \u2190 x.gauche enfiler(Tg.racine, f) fin si si x.droit \u2260 NIL : Td \u2190 x.droite enfiler(Td.racine, f) fin si fin tant que FIN Vous noterez aussi que cet algorithme n'utilise pas de fonction r\u00e9cursive. Il est aussi important de bien noter l'utilisation d'une file (FIFO) pour cet algorithme de parcours en largeur. Dans le cas d'un parcours en largeur d'abord on affiche tous les noeuds situ\u00e9s \u00e0 une profondeur n avant de commencer \u00e0 afficher les noeuds situ\u00e9s \u00e0 une profondeur n+1. 5) algorithmes pour les arbres binaires de recherche a) Recherche d'une cl\u00e9 dans un arbre binaire de recherche Nous allons maintenant \u00e9tudier un algorithme permettant de rechercher une cl\u00e9 de valeur k dans un arbre binaire de recherche. Si k est bien pr\u00e9sent dans l'arbre binaire de recherche, l'algorithme renvoie vrai, dans le cas contraire, il renvoie faux. VARIABLE T : arbre x : noeud k : entier DEBUT ARBRE-RECHERCHE(T,k) : si T == NIL : renvoyer faux fin si x \u2190 T.racine si k == x.cl\u00e9 : renvoyer vrai fin si si k < x.cl\u00e9 : renvoyer ARBRE-RECHERCHE(x.gauche,k) sinon : renvoyer ARBRE-RECHERCHE(x.droit,k) fin si FIN Cet algorithme de recherche d'une cl\u00e9 dans un arbre binaire de recherche ressemble beaucoup \u00e0 la recherche dichotomique vue en premi\u00e8re dans le cas o\u00f9 l'arbre binaire de recherche trait\u00e9 est \u00e9quilibr\u00e9. La complexit\u00e9 en temps dans le pire des cas de l'algorithme de recherche d'une cl\u00e9 dans un arbre binaire de recherche \u00e9quilibr\u00e9 est donc O(log 2 (n)). Dans le cas o\u00f9 l'arbre est filiforme, la complexit\u00e9 est O(n). Rappelons qu'un algorithme en O(log 2 (n)) est plus \"efficace\" qu'un algorithme en O(n). \u00c0 noter qu'il existe une version dite \"it\u00e9rative\" (qui n'est pas r\u00e9cursive) de cet algorithme de recherche : VARIABLE T : arbre x : noeud k : entier DEBUT ARBRE-RECHERCHE_ITE(T,k) : x \u2190 T.racine tant que T \u2260 NIL et k \u2260 x.cl\u00e9 : x \u2190 T.racine si k < x.cl\u00e9 : T \u2190 x.gauche sinon : T \u2190 x.droit fin si fin tant que si k == x.cl\u00e9 : renvoyer vrai sinon : renvoyer faux fin si FIN b) Insertion d'une cl\u00e9 dans un arbre binaire de recherche Il est tout \u00e0 fait possible d'ins\u00e9rer un noeud y dans un arbre binaire de recherche (non vide) : VARIABLE T : arbre x : noeud y : noeud DEBUT ARBRE-INSERTION(T,y) : x \u2190 T.racine tant que T \u2260 NIL : x \u2190 T.racine si y.cl\u00e9 < x.cl\u00e9 : T \u2190 x.gauche sinon : T \u2190 x.droit fin si fin tant que si y.cl\u00e9 < x.cl\u00e9 : ins\u00e9rer y \u00e0 gauche de x sinon : ins\u00e9rer y \u00e0 droite de x fin si FIN c) arbre binaire de recherche et parcours infixe Il est important de noter qu'un parcours infixe d'un arbre binaire de recherche permet d'obtenir les valeurs des noeuds de l'arbre binaire de recherche dans l'ordre croissant.","title":"Cours"},{"location":"c8c/#1-notations-utilisees","text":"Dans ce chapitre nous allons utiliser les notations suivantes : Soit un arbre T : T.racine correspond au noeud racine de l'arbre T Soit un noeud x : x.gauche correspond au sous-arbre gauche du noeud x x.droit correspond au sous-arbre droit du noeud x x.cl\u00e9 correspond \u00e0 la cl\u00e9 du noeud x Il faut noter que si le noeud x est une feuille, x.gauche et x.droite sont des arbres vides (NIL)","title":"1) notations utilis\u00e9es"},{"location":"c8c/#2-calculer-la-hauteur-dun-arbre","text":"Voici l'algorithme qui permet de calculer la hauteur d'un arbre : VARIABLE T : arbre x : noeud DEBUT HAUTEUR(T) : si T \u2260 NIL : x \u2190 T.racine renvoyer 1 + max(HAUTEUR(x.gauche), HAUTEUR(x.droit)) sinon : renvoyer 0 fin si FIN N.B. la fonction max renvoie la plus grande valeur des 2 valeurs pass\u00e9es en param\u00e8tre (exemple : max(5,6) renvoie 6 Nous avons ici un algorithme r\u00e9cursif. Vous aurez l'occasion de constater que c'est souvent le cas dans les algorithmes qui travaillent sur des structures de donn\u00e9es telles que les arbres.","title":"2) calculer la hauteur d'un arbre"},{"location":"c8c/#3-calculer-la-taille-dun-arbre","text":"Nous allons maintenant \u00e9tudier un algorithme qui permet de calculer le nombre de noeuds pr\u00e9sents dans un arbre. VARIABLE T : arbre x : noeud DEBUT TAILLE(T) : si T \u2260 NIL : x \u2190 T.racine renvoyer 1 + TAILLE(x.gauche) + TAILLE(x.droit) sinon : renvoyer 0 fin si FIN","title":"3) calculer la taille d'un arbre"},{"location":"c8c/#4-parcours-dun-arbre","text":"","title":"4) parcours d'un arbre"},{"location":"c8c/#a-introduction","text":"Il existe plusieurs fa\u00e7ons de parcourir un arbre (parcourir un arbre = passer par tous les noeuds), nous allons en \u00e9tudier quelques-unes. Le choix du parcours d\u00e9pend du probl\u00e8me \u00e0 traiter","title":"a) introduction"},{"location":"c8c/#b-parcourir-un-arbre-dans-lordre-prefixe","text":"Voici l'algorithme qui va permettre de parcourir un arbre dans l'ordre pr\u00e9fixe : VARIABLE T : arbre x : noeud DEBUT PARCOURS-PREFIXE(T) : si T \u2260 NIL : x \u2190 T.racine affiche x.cl\u00e9 PARCOURS-PREFIXE(x.gauche) PARCOURS-PREFIXE(x.droit) fin si FIN Comme vous pouvez le constater ci-dessus, dans le cas du parcours pr\u00e9fixe, on affiche chaque noeud avant de parcourir son sous-arbre gauche et son sous-arbre droit.","title":"b) parcourir un arbre dans l'ordre pr\u00e9fixe"},{"location":"c8c/#c-parcourir-un-arbre-dans-lordre-suffixe","text":"Voici l'algorithme qui va permettre de parcourir un arbre dans l'ordre suffixe : VARIABLE T : arbre x : noeud DEBUT PARCOURS-SUFFIXE(T) : si T \u2260 NIL : x \u2190 T.racine PARCOURS-SUFFIXE(x.gauche) PARCOURS-SUFFIXE(x.droit) affiche x.cl\u00e9 fin si FIN Dans le cas du parcours suffixe, on affiche chaque noeud apr\u00e8s avoir parcouru son sous-arbre gauche et son sous-arbre droit.","title":"c) parcourir un arbre dans l'ordre suffixe"},{"location":"c8c/#d-parcourir-un-arbre-dans-lordre-infixe","text":"Voici l'algorithme qui va permettre de parcourir un arbre dans l'ordre infixe : VARIABLE T : arbre x : noeud DEBUT PARCOURS-INFIXE(T) : si T \u2260 NIL : x \u2190 T.racine PARCOURS-INFIXE(x.gauche) affiche x.cl\u00e9 PARCOURS-INFIXE(x.droit) fin si FIN Dans le cas du parcours infixe, pour un noeud A donn\u00e9, on parcourra le sous-arbre gauche de A, puis on affichera la cl\u00e9 de A puis enfin, on parcourra le sous-arbre droite de A","title":"d) parcourir un arbre dans l'ordre infixe"},{"location":"c8c/#e-parcourir-un-arbre-en-largeur-dabord","text":"Voici l'algorithme qui va permettre de parcourir un arbre en largeur d'abord : T : arbre Tg : arbre Td : arbre x : noeud f : file (initialement vide) DEBUT PARCOURS-LARGEUR(T) : enfiler(T.racine, f) //on place la racine dans la file tant que f non vide : x \u2190 defiler(f) affiche x.cl\u00e9 si x.gauche \u2260 NIL : Tg \u2190 x.gauche enfiler(Tg.racine, f) fin si si x.droit \u2260 NIL : Td \u2190 x.droite enfiler(Td.racine, f) fin si fin tant que FIN Vous noterez aussi que cet algorithme n'utilise pas de fonction r\u00e9cursive. Il est aussi important de bien noter l'utilisation d'une file (FIFO) pour cet algorithme de parcours en largeur. Dans le cas d'un parcours en largeur d'abord on affiche tous les noeuds situ\u00e9s \u00e0 une profondeur n avant de commencer \u00e0 afficher les noeuds situ\u00e9s \u00e0 une profondeur n+1.","title":"e) parcourir un arbre en largeur d'abord"},{"location":"c8c/#5-algorithmes-pour-les-arbres-binaires-de-recherche","text":"","title":"5) algorithmes pour les arbres binaires de recherche"},{"location":"c8c/#a-recherche-dune-cle-dans-un-arbre-binaire-de-recherche","text":"Nous allons maintenant \u00e9tudier un algorithme permettant de rechercher une cl\u00e9 de valeur k dans un arbre binaire de recherche. Si k est bien pr\u00e9sent dans l'arbre binaire de recherche, l'algorithme renvoie vrai, dans le cas contraire, il renvoie faux. VARIABLE T : arbre x : noeud k : entier DEBUT ARBRE-RECHERCHE(T,k) : si T == NIL : renvoyer faux fin si x \u2190 T.racine si k == x.cl\u00e9 : renvoyer vrai fin si si k < x.cl\u00e9 : renvoyer ARBRE-RECHERCHE(x.gauche,k) sinon : renvoyer ARBRE-RECHERCHE(x.droit,k) fin si FIN Cet algorithme de recherche d'une cl\u00e9 dans un arbre binaire de recherche ressemble beaucoup \u00e0 la recherche dichotomique vue en premi\u00e8re dans le cas o\u00f9 l'arbre binaire de recherche trait\u00e9 est \u00e9quilibr\u00e9. La complexit\u00e9 en temps dans le pire des cas de l'algorithme de recherche d'une cl\u00e9 dans un arbre binaire de recherche \u00e9quilibr\u00e9 est donc O(log 2 (n)). Dans le cas o\u00f9 l'arbre est filiforme, la complexit\u00e9 est O(n). Rappelons qu'un algorithme en O(log 2 (n)) est plus \"efficace\" qu'un algorithme en O(n). \u00c0 noter qu'il existe une version dite \"it\u00e9rative\" (qui n'est pas r\u00e9cursive) de cet algorithme de recherche : VARIABLE T : arbre x : noeud k : entier DEBUT ARBRE-RECHERCHE_ITE(T,k) : x \u2190 T.racine tant que T \u2260 NIL et k \u2260 x.cl\u00e9 : x \u2190 T.racine si k < x.cl\u00e9 : T \u2190 x.gauche sinon : T \u2190 x.droit fin si fin tant que si k == x.cl\u00e9 : renvoyer vrai sinon : renvoyer faux fin si FIN","title":"a) Recherche d'une cl\u00e9 dans un arbre binaire de recherche"},{"location":"c8c/#b-insertion-dune-cle-dans-un-arbre-binaire-de-recherche","text":"Il est tout \u00e0 fait possible d'ins\u00e9rer un noeud y dans un arbre binaire de recherche (non vide) : VARIABLE T : arbre x : noeud y : noeud DEBUT ARBRE-INSERTION(T,y) : x \u2190 T.racine tant que T \u2260 NIL : x \u2190 T.racine si y.cl\u00e9 < x.cl\u00e9 : T \u2190 x.gauche sinon : T \u2190 x.droit fin si fin tant que si y.cl\u00e9 < x.cl\u00e9 : ins\u00e9rer y \u00e0 gauche de x sinon : ins\u00e9rer y \u00e0 droite de x fin si FIN","title":"b) Insertion d'une cl\u00e9 dans un arbre binaire de recherche"},{"location":"c8c/#c-arbre-binaire-de-recherche-et-parcours-infixe","text":"Il est important de noter qu'un parcours infixe d'un arbre binaire de recherche permet d'obtenir les valeurs des noeuds de l'arbre binaire de recherche dans l'ordre croissant.","title":"c) arbre binaire de recherche et parcours infixe"},{"location":"c8e/","text":"exercice 8.1 Soit l\u2019arbre binaire A suivant : 1) A propos de l\u2019arbre A : D\u00e9terminez la profondeur du noeud 6 D\u00e9terminez la hauteur de l\u2019arbre 2) Parcourir l\u2019arbre A dans l\u2019ordre suffixe 3) Expliquez pourquoi l\u2019arbre binaire A n\u2019est pas un arbre binaire de recherche Modifiez l\u2019arbre binaire A pour qu\u2019il devienne un arbre binaire de recherche (on gardera les m\u00eames noeuds). On appellera l\u2019arbre binaire obtenu \u201carbre B\u201d 4) Parcourir l\u2019arbre B dans l\u2019ordre infixe exercices du bac Sujet 1 2021 Exercice 3 Sujet 2 2021 Exercice 1 Sujet 6 2021 Exercice 3 Sujet 8 2021 Exercice 4 Sujet 1 2022 Exercice 5 Sujet 4 2022 Exercice 3 Sujet 5 2022 Exercice 4 Sujet 9 2022 Exercice 2 Sujet 10 2022 Exercice 4 Sujet 11 2022 Exercice 4 Sujet 13 2022 Exercice 3 Sujet 14 2022 Exercice 1","title":"Exercices"},{"location":"c8e/#exercice-81","text":"Soit l\u2019arbre binaire A suivant : 1) A propos de l\u2019arbre A : D\u00e9terminez la profondeur du noeud 6 D\u00e9terminez la hauteur de l\u2019arbre 2) Parcourir l\u2019arbre A dans l\u2019ordre suffixe 3) Expliquez pourquoi l\u2019arbre binaire A n\u2019est pas un arbre binaire de recherche Modifiez l\u2019arbre binaire A pour qu\u2019il devienne un arbre binaire de recherche (on gardera les m\u00eames noeuds). On appellera l\u2019arbre binaire obtenu \u201carbre B\u201d 4) Parcourir l\u2019arbre B dans l\u2019ordre infixe","title":"exercice 8.1"},{"location":"c8e/#exercices-du-bac","text":"Sujet 1 2021 Exercice 3 Sujet 2 2021 Exercice 1 Sujet 6 2021 Exercice 3 Sujet 8 2021 Exercice 4 Sujet 1 2022 Exercice 5 Sujet 4 2022 Exercice 3 Sujet 5 2022 Exercice 4 Sujet 9 2022 Exercice 2 Sujet 10 2022 Exercice 4 Sujet 11 2022 Exercice 4 Sujet 13 2022 Exercice 3 Sujet 14 2022 Exercice 1","title":"exercices du bac"},{"location":"c8r/","text":"Ce qu\u2019il faut savoir conna\u00eetre l\u2019algorithme qui permet de calculer la hauteur d\u2019un arbre (voir cours) conna\u00eetre l\u2019algorithme qui permet de calculer la taille d\u2019un arbre (voir cours) conna\u00eetre les algorithmes qui permettent de parcourir un arbre : ordre infixe, ordre pr\u00e9fixe, ordre suffixe, en largeur d\u2019abord (voir cours) conna\u00eetre l\u2019algorithme qui permet de rechercher une cl\u00e9 dans un arbre binaire de recherche (voir cours), savoir que cet algorithme \u00e0 une complexit\u00e9 en O(log 2 (n)) dans le cas d\u2019un arbre binaire de recherche \u00e9quilibr\u00e9 et O(n) dans le cas d\u2019un arbre binaire de recherche filiforme. conna\u00eetre l\u2019algorithme qui permet d\u2019ins\u00e9rer une cl\u00e9 dans un arbre binaire de recherche (voir cours) Ce qu\u2019il faut savoir faire Vous devez \u00eatre capable d'impl\u00e9menter tous ces algorithmes en Python (voir projet)","title":"R\u00e9vision"},{"location":"c8r/#ce-quil-faut-savoir","text":"conna\u00eetre l\u2019algorithme qui permet de calculer la hauteur d\u2019un arbre (voir cours) conna\u00eetre l\u2019algorithme qui permet de calculer la taille d\u2019un arbre (voir cours) conna\u00eetre les algorithmes qui permettent de parcourir un arbre : ordre infixe, ordre pr\u00e9fixe, ordre suffixe, en largeur d\u2019abord (voir cours) conna\u00eetre l\u2019algorithme qui permet de rechercher une cl\u00e9 dans un arbre binaire de recherche (voir cours), savoir que cet algorithme \u00e0 une complexit\u00e9 en O(log 2 (n)) dans le cas d\u2019un arbre binaire de recherche \u00e9quilibr\u00e9 et O(n) dans le cas d\u2019un arbre binaire de recherche filiforme. conna\u00eetre l\u2019algorithme qui permet d\u2019ins\u00e9rer une cl\u00e9 dans un arbre binaire de recherche (voir cours)","title":"Ce qu\u2019il faut savoir"},{"location":"c8r/#ce-quil-faut-savoir-faire","text":"Vous devez \u00eatre capable d'impl\u00e9menter tous ces algorithmes en Python (voir projet)","title":"Ce qu\u2019il faut savoir faire"},{"location":"c9a/","text":"activit\u00e9 9.1 Construisez un graphe de r\u00e9seau social \u00e0 partir des informations suivantes : A est ami avec B et E B est ami avec A et C C est ami avec B,F et D D est ami avec C,F et E E est ami avec A,D et F F est ami avec C, D et E activit\u00e9 9.2 Soit le graphe suivant : D\u00e9terminez sa matrice d'adjacence. activit\u00e9 9.3 \u00c9tablissez la liste d'adjacence du graphe ci-dessous. activit\u00e9 9.4 Soit la matrice d'adjacence d'un graphe G compos\u00e9 des sommets A, B, C, D : le graphe G est-il orient\u00e9 ou non-orient\u00e9 ? Justifiez votre r\u00e9ponse. repr\u00e9sentez ce graphe G activit\u00e9 9.5 Soit G un graphe non-orient\u00e9 impl\u00e9ment\u00e9 en Python comme suit : G = { 'A' :[ 'B' , 'C' , 'E' ], 'B' :[ 'A' , 'E' ], 'C' :[ 'A' , 'D' ], 'D' :[ 'C' ], 'E' :[ 'A' , 'B' ]} Repr\u00e9sentez le graphe G.","title":"Activit\u00e9s"},{"location":"c9a/#activite-91","text":"Construisez un graphe de r\u00e9seau social \u00e0 partir des informations suivantes : A est ami avec B et E B est ami avec A et C C est ami avec B,F et D D est ami avec C,F et E E est ami avec A,D et F F est ami avec C, D et E","title":"activit\u00e9 9.1"},{"location":"c9a/#activite-92","text":"Soit le graphe suivant : D\u00e9terminez sa matrice d'adjacence.","title":"activit\u00e9 9.2"},{"location":"c9a/#activite-93","text":"\u00c9tablissez la liste d'adjacence du graphe ci-dessous.","title":"activit\u00e9 9.3"},{"location":"c9a/#activite-94","text":"Soit la matrice d'adjacence d'un graphe G compos\u00e9 des sommets A, B, C, D : le graphe G est-il orient\u00e9 ou non-orient\u00e9 ? Justifiez votre r\u00e9ponse. repr\u00e9sentez ce graphe G","title":"activit\u00e9 9.4"},{"location":"c9a/#activite-95","text":"Soit G un graphe non-orient\u00e9 impl\u00e9ment\u00e9 en Python comme suit : G = { 'A' :[ 'B' , 'C' , 'E' ], 'B' :[ 'A' , 'E' ], 'C' :[ 'A' , 'D' ], 'D' :[ 'C' ], 'E' :[ 'A' , 'B' ]} Repr\u00e9sentez le graphe G.","title":"activit\u00e9 9.5"},{"location":"c9c/","text":"1) introduction Imaginez un r\u00e9seau social ayant 6 abonn\u00e9s (A, B, C, D, E et F) o\u00f9 : A est ami avec B, C et D B est ami avec A et D C est ami avec A, E et D D est ami avec tous les autres abonn\u00e9s E est ami avec C, D et F F est ami avec E et D La description de ce r\u00e9seau social, malgr\u00e9 son faible nombre d'abonn\u00e9s, est d\u00e9j\u00e0 quelque peu r\u00e9barbative, alors imaginez cette m\u00eame description avec un r\u00e9seau social comportant des millions d'abonn\u00e9s ! Il existe un moyen plus \"visuel\" pour repr\u00e9senter ce r\u00e9seau social : on peut repr\u00e9senter chaque abonn\u00e9 par un cercle (avec le nom de l'abonn\u00e9 situ\u00e9 dans le cercle) et chaque relation \"X est ami avec Y\" par un segment de droite reliant X et Y (\"X est ami avec Y\" et \"Y est ami avec X\" \u00e9tant repr\u00e9sent\u00e9 par le m\u00eame segment de droite). Voici ce que cela donne avec le r\u00e9seau social d\u00e9crit ci-dessus : 2) notion de graphes Ce genre de figure s'appelle un graphe. Les graphes sont des objets math\u00e9matiques tr\u00e8s utilis\u00e9s, notamment en informatique. Les cercles sont appel\u00e9s des sommets et les segments de droites qui relient 2 sommets des ar\u00eates. Plus formellement on dira qu'un graphe G est un couple G = (V,E) avec V un ensemble de sommets et E un ensemble d'ar\u00eates. Autre utilisation possible des graphes : les logiciels de cartographie (ces logiciels sont souvent utilis\u00e9s coupl\u00e9s \u00e0 des r\u00e9cepteurs GPS). Ces logiciels de cartographie permettant, connaissant votre position gr\u00e2ce \u00e0 un r\u00e9cepteur GPS, d'indiquer la route \u00e0 suivre pour se rendre \u00e0 endroit B. Comment mod\u00e9liser l'ensemble des lieux et des routes ? Simplement \u00e0 l'aide d'un graphe ! Chaque lieu est un sommet et les routes qui relient les lieux entre eux sont des ar\u00eates. Soit les lieux suivants : A, B, C, D, E, F et G. Les diff\u00e9rents lieux sont reli\u00e9s par les routes suivantes : il existe une route entre A et C il existe une route entre A et B il existe une route entre A et D il existe une route entre B et F il existe une route entre B et E il existe une route entre B et G il existe une route entre D et G il existe une route entre E et F Ici aussi, la repr\u00e9sentation sous forme de graphe s'impose : Probl\u00e8me : avec cette repr\u00e9sentation du r\u00e9seau routier sous forme de graphe, il est impossible de tenir compte des routes en sens unique (par exemple il est possible d'aller de A vers D mais pas de D vers A) Voici de nouvelles contraintes : il existe une route entre A et C (double sens) il existe une route entre A et B (sens unique B->A) il existe une route entre A et D (sens unique A->D) il existe une route entre B et F (sens unique B->F) il existe une route entre B et E (sens unique E->B) il existe une route entre B et G (double sens) il existe une route entre D et G (double sens) il existe une route entre E et F (double) Pour tenir compte de ces nouvelles contraintes, on utilisera un graphe orient\u00e9 : Dans un graphe orient\u00e9, les ar\u00eates poss\u00e8dent une orientation. Ces \"ar\u00eates orient\u00e9es\" sont souvent appel\u00e9es \"arcs\". On dira qu'un graphe orient\u00e9 G est un couple G = (V,A) avec V un ensemble de sommets et A un ensemble d'arcs. Parfois il est int\u00e9ressant d'associer aux arr\u00eates ou aux arcs des valeurs, on parle alors de graphes pond\u00e9r\u00e9s. Si nous revenons \u00e0 notre \"graphe cartographie\", il est possible d'associer \u00e0 chaque ar\u00eate la distance en Km entre les 2 lieux : Il est aussi possible d'associer \u00e0 chaque ar\u00eate la dur\u00e9e du trajet entre 2 points : En fonction du choix fait par le conducteur (trajet le plus court \"en distance\" ou trajet le plus court \"en temps\"), l'algorithme permettant de d\u00e9terminer le \"chemin le plus court entre 2 points\" travaillera sur le graphe \"graphe pond\u00e9r\u00e9 (Km) cartographie\" ou sur le graphe \"graphe pond\u00e9r\u00e9 (minutes) cartographie\". \u00c0 noter que le \"graphe pond\u00e9r\u00e9 (minutes) cartographie\" peut \u00e9voluer au cours du temps en fonction du trafic routier : une application comme Waze utilise les donn\u00e9es en provenance des utilisateurs de l'application afin de mettre \u00e0 jour en temps r\u00e9el leur \"graphe pond\u00e9r\u00e9 (minutes) cartographie\". Pour terminer avec ces g\u00e9n\u00e9ralit\u00e9s sur les graphes, voici 2 d\u00e9finitions qui nous seront utiles par la suite : Une chaine est une suite d'ar\u00eates cons\u00e9cutives dans un graphe, un peu comme si on se promenait sur le graphe. On la d\u00e9signe par les lettres des sommets qu'elle comporte. Un cycle est une chaine qui commence et se termine au m\u00eame sommet. 3) impl\u00e9mentation des graphes Il existe deux m\u00e9thodes permettant d'impl\u00e9menter un graphe : les matrices d'adjacences et les listes d'adjacences. a) impl\u00e9mentation d'un graphe \u00e0 l'aide d'une matrice d'adjacence Une matrice est un tableau \u00e0 double entr\u00e9e : La matrice A ci-dessus est constitu\u00e9 de 5 lignes et 4 colonnes. On appelle matrice carr\u00e9e une matrice qui comporte le m\u00eame nombre de lignes et de colonnes. Les matrices d'adjacences sont des matrices carr\u00e9es. Reprenons l'exemple du \"graphe cartographie\" : Voici la matrice d'adjacence de ce graphe : Comment construire une matrice d'adjacence ? Il faut savoir qu'\u00e0 chaque ligne correspond un sommet du graphe et qu'\u00e0 chaque colonne correspond aussi un sommet du graphe. \u00c0 chaque intersection ligne i-colonne j (ligne i correspond au sommet i et colonne j correspond au sommet j), on place un 1 s'il existe une ar\u00eate entre le sommet i et le sommet j, et un z\u00e9ro s'il n'existe pas d'ar\u00eate entre le sommet i et le sommet j. Il existe une ar\u00eate entre le sommet E et le sommet F, nous avons donc plac\u00e9 un 1 \u00e0 l'intersection de la ligne E et de la colonne F (il en est de m\u00eame \u00e0 l'intersection de la ligne F et de la colonne E) Il n'existe pas d'ar\u00eate entre le sommet D et le sommet C, nous avons donc plac\u00e9 un 0 \u00e0 l'intersection de la ligne D et de la colonne C (il en est de m\u00eame \u00e0 l'intersection de la ligne C et de la colonne D) Il est aussi possible d'\u00e9tablir une matrice d'adjacence pour un graphe orient\u00e9. Le principe reste le m\u00eame : si le sommet i (ligne) est li\u00e9 au sommet j (colonne), nous avons un 1 \u00e0 l'intersection (0 dans le cas contraire). Il est aussi possible d'utiliser une matrice d'adjacence pour impl\u00e9menter un graphe pond\u00e9r\u00e9 : on remplace les 1 par les valeurs li\u00e9es \u00e0 chaque arc. Il est assez simple d'utiliser les matrices d'adjacence en Python gr\u00e2ce aux tableaux de tableaux vus l'ann\u00e9e derni\u00e8re : #matrice d'ajacence m = [[ 0 , 1 , 1 , 1 , 0 , 0 , 0 ], [ 1 , 0 , 0 , 0 , 1 , 1 , 1 ], [ 1 , 0 , 0 , 0 , 0 , 0 , 0 ], [ 1 , 0 , 0 , 0 , 0 , 0 , 1 ], [ 0 , 1 , 0 , 0 , 0 , 1 , 0 ], [ 0 , 1 , 0 , 0 , 1 , 0 , 0 ], [ 0 , 1 , 0 , 1 , 0 , 0 , 0 ]] b) impl\u00e9mentation d'un graphe \u00e0 l'aide de listes d'adjacence Pour commencer, on d\u00e9finit une liste des sommets du graphe. \u00c0 chaque \u00e9l\u00e9ment de cette liste, on associe une autre liste qui contient les sommets li\u00e9 \u00e0 cet \u00e9l\u00e9ment : Reprenons l'exemple du \"graphe cartographie\" : Voici la liste d'adjacence de ce graphe : Pour les graphes orient\u00e9s, il est n\u00e9cessaire de d\u00e9finir 2 listes : la liste des successeurs et la liste des pr\u00e9d\u00e9cesseurs. Soit un arc allant d'un sommet A vers un sommet B (fl\u00e8che de A vers B). On dira que B est un successeur de A et que A est un pr\u00e9d\u00e9cesseur de B. liste d'adjacence successeurs du graphe orient\u00e9 cartographie : liste d'adjacence pr\u00e9d\u00e9cesseurs du graphe orient\u00e9 cartographie : Il est possible de travailler avec des listes d'adjacences en Python en utilisant les dictionnaires : #liste d'ajacence l = { 'A' :( 'B' , 'C' , 'D' ), 'B' :( 'A' , 'E' , 'F' , 'G' ), 'C' :( 'A' ), 'D' :( 'A' , 'G' ), 'E' :( 'B' , 'F' ), 'F' :( 'B' , 'E' ), 'G' :( 'B' , 'D' )} c) matrice d'adjacence ou liste d'adjacence ? Comment choisir l'impl\u00e9mentation \u00e0 utiliser (matrice d'adjacence ou liste d'adjacence) ? le choix se fait en fonction de la densit\u00e9 du graphe, c'est-\u00e0-dire du rapport entre le nombre d'ar\u00eates et le nombre de sommets. Pour un graphe dense on utilisera plut\u00f4t une matrice d'adjacence. certains algorithmes travaillent plut\u00f4t avec les listes d'adjacences alors que d'autres travaillent plut\u00f4t avec les matrices d'adjacences. Le choix doit donc aussi d\u00e9pendre des algorithmes utilis\u00e9s (nous aurons tr\u00e8s prochainement l'occasion d'\u00e9tudier plusieurs de ces algorithmes).","title":"Cours"},{"location":"c9c/#1-introduction","text":"Imaginez un r\u00e9seau social ayant 6 abonn\u00e9s (A, B, C, D, E et F) o\u00f9 : A est ami avec B, C et D B est ami avec A et D C est ami avec A, E et D D est ami avec tous les autres abonn\u00e9s E est ami avec C, D et F F est ami avec E et D La description de ce r\u00e9seau social, malgr\u00e9 son faible nombre d'abonn\u00e9s, est d\u00e9j\u00e0 quelque peu r\u00e9barbative, alors imaginez cette m\u00eame description avec un r\u00e9seau social comportant des millions d'abonn\u00e9s ! Il existe un moyen plus \"visuel\" pour repr\u00e9senter ce r\u00e9seau social : on peut repr\u00e9senter chaque abonn\u00e9 par un cercle (avec le nom de l'abonn\u00e9 situ\u00e9 dans le cercle) et chaque relation \"X est ami avec Y\" par un segment de droite reliant X et Y (\"X est ami avec Y\" et \"Y est ami avec X\" \u00e9tant repr\u00e9sent\u00e9 par le m\u00eame segment de droite). Voici ce que cela donne avec le r\u00e9seau social d\u00e9crit ci-dessus :","title":"1) introduction"},{"location":"c9c/#2-notion-de-graphes","text":"Ce genre de figure s'appelle un graphe. Les graphes sont des objets math\u00e9matiques tr\u00e8s utilis\u00e9s, notamment en informatique. Les cercles sont appel\u00e9s des sommets et les segments de droites qui relient 2 sommets des ar\u00eates. Plus formellement on dira qu'un graphe G est un couple G = (V,E) avec V un ensemble de sommets et E un ensemble d'ar\u00eates. Autre utilisation possible des graphes : les logiciels de cartographie (ces logiciels sont souvent utilis\u00e9s coupl\u00e9s \u00e0 des r\u00e9cepteurs GPS). Ces logiciels de cartographie permettant, connaissant votre position gr\u00e2ce \u00e0 un r\u00e9cepteur GPS, d'indiquer la route \u00e0 suivre pour se rendre \u00e0 endroit B. Comment mod\u00e9liser l'ensemble des lieux et des routes ? Simplement \u00e0 l'aide d'un graphe ! Chaque lieu est un sommet et les routes qui relient les lieux entre eux sont des ar\u00eates. Soit les lieux suivants : A, B, C, D, E, F et G. Les diff\u00e9rents lieux sont reli\u00e9s par les routes suivantes : il existe une route entre A et C il existe une route entre A et B il existe une route entre A et D il existe une route entre B et F il existe une route entre B et E il existe une route entre B et G il existe une route entre D et G il existe une route entre E et F Ici aussi, la repr\u00e9sentation sous forme de graphe s'impose : Probl\u00e8me : avec cette repr\u00e9sentation du r\u00e9seau routier sous forme de graphe, il est impossible de tenir compte des routes en sens unique (par exemple il est possible d'aller de A vers D mais pas de D vers A) Voici de nouvelles contraintes : il existe une route entre A et C (double sens) il existe une route entre A et B (sens unique B->A) il existe une route entre A et D (sens unique A->D) il existe une route entre B et F (sens unique B->F) il existe une route entre B et E (sens unique E->B) il existe une route entre B et G (double sens) il existe une route entre D et G (double sens) il existe une route entre E et F (double) Pour tenir compte de ces nouvelles contraintes, on utilisera un graphe orient\u00e9 : Dans un graphe orient\u00e9, les ar\u00eates poss\u00e8dent une orientation. Ces \"ar\u00eates orient\u00e9es\" sont souvent appel\u00e9es \"arcs\". On dira qu'un graphe orient\u00e9 G est un couple G = (V,A) avec V un ensemble de sommets et A un ensemble d'arcs. Parfois il est int\u00e9ressant d'associer aux arr\u00eates ou aux arcs des valeurs, on parle alors de graphes pond\u00e9r\u00e9s. Si nous revenons \u00e0 notre \"graphe cartographie\", il est possible d'associer \u00e0 chaque ar\u00eate la distance en Km entre les 2 lieux : Il est aussi possible d'associer \u00e0 chaque ar\u00eate la dur\u00e9e du trajet entre 2 points : En fonction du choix fait par le conducteur (trajet le plus court \"en distance\" ou trajet le plus court \"en temps\"), l'algorithme permettant de d\u00e9terminer le \"chemin le plus court entre 2 points\" travaillera sur le graphe \"graphe pond\u00e9r\u00e9 (Km) cartographie\" ou sur le graphe \"graphe pond\u00e9r\u00e9 (minutes) cartographie\". \u00c0 noter que le \"graphe pond\u00e9r\u00e9 (minutes) cartographie\" peut \u00e9voluer au cours du temps en fonction du trafic routier : une application comme Waze utilise les donn\u00e9es en provenance des utilisateurs de l'application afin de mettre \u00e0 jour en temps r\u00e9el leur \"graphe pond\u00e9r\u00e9 (minutes) cartographie\". Pour terminer avec ces g\u00e9n\u00e9ralit\u00e9s sur les graphes, voici 2 d\u00e9finitions qui nous seront utiles par la suite : Une chaine est une suite d'ar\u00eates cons\u00e9cutives dans un graphe, un peu comme si on se promenait sur le graphe. On la d\u00e9signe par les lettres des sommets qu'elle comporte. Un cycle est une chaine qui commence et se termine au m\u00eame sommet.","title":"2) notion de graphes"},{"location":"c9c/#3-implementation-des-graphes","text":"Il existe deux m\u00e9thodes permettant d'impl\u00e9menter un graphe : les matrices d'adjacences et les listes d'adjacences.","title":"3) impl\u00e9mentation des graphes"},{"location":"c9c/#a-implementation-dun-graphe-a-laide-dune-matrice-dadjacence","text":"Une matrice est un tableau \u00e0 double entr\u00e9e : La matrice A ci-dessus est constitu\u00e9 de 5 lignes et 4 colonnes. On appelle matrice carr\u00e9e une matrice qui comporte le m\u00eame nombre de lignes et de colonnes. Les matrices d'adjacences sont des matrices carr\u00e9es. Reprenons l'exemple du \"graphe cartographie\" : Voici la matrice d'adjacence de ce graphe : Comment construire une matrice d'adjacence ? Il faut savoir qu'\u00e0 chaque ligne correspond un sommet du graphe et qu'\u00e0 chaque colonne correspond aussi un sommet du graphe. \u00c0 chaque intersection ligne i-colonne j (ligne i correspond au sommet i et colonne j correspond au sommet j), on place un 1 s'il existe une ar\u00eate entre le sommet i et le sommet j, et un z\u00e9ro s'il n'existe pas d'ar\u00eate entre le sommet i et le sommet j. Il existe une ar\u00eate entre le sommet E et le sommet F, nous avons donc plac\u00e9 un 1 \u00e0 l'intersection de la ligne E et de la colonne F (il en est de m\u00eame \u00e0 l'intersection de la ligne F et de la colonne E) Il n'existe pas d'ar\u00eate entre le sommet D et le sommet C, nous avons donc plac\u00e9 un 0 \u00e0 l'intersection de la ligne D et de la colonne C (il en est de m\u00eame \u00e0 l'intersection de la ligne C et de la colonne D) Il est aussi possible d'\u00e9tablir une matrice d'adjacence pour un graphe orient\u00e9. Le principe reste le m\u00eame : si le sommet i (ligne) est li\u00e9 au sommet j (colonne), nous avons un 1 \u00e0 l'intersection (0 dans le cas contraire). Il est aussi possible d'utiliser une matrice d'adjacence pour impl\u00e9menter un graphe pond\u00e9r\u00e9 : on remplace les 1 par les valeurs li\u00e9es \u00e0 chaque arc. Il est assez simple d'utiliser les matrices d'adjacence en Python gr\u00e2ce aux tableaux de tableaux vus l'ann\u00e9e derni\u00e8re : #matrice d'ajacence m = [[ 0 , 1 , 1 , 1 , 0 , 0 , 0 ], [ 1 , 0 , 0 , 0 , 1 , 1 , 1 ], [ 1 , 0 , 0 , 0 , 0 , 0 , 0 ], [ 1 , 0 , 0 , 0 , 0 , 0 , 1 ], [ 0 , 1 , 0 , 0 , 0 , 1 , 0 ], [ 0 , 1 , 0 , 0 , 1 , 0 , 0 ], [ 0 , 1 , 0 , 1 , 0 , 0 , 0 ]]","title":"a) impl\u00e9mentation d'un graphe \u00e0 l'aide d'une matrice d'adjacence"},{"location":"c9c/#b-implementation-dun-graphe-a-laide-de-listes-dadjacence","text":"Pour commencer, on d\u00e9finit une liste des sommets du graphe. \u00c0 chaque \u00e9l\u00e9ment de cette liste, on associe une autre liste qui contient les sommets li\u00e9 \u00e0 cet \u00e9l\u00e9ment : Reprenons l'exemple du \"graphe cartographie\" : Voici la liste d'adjacence de ce graphe : Pour les graphes orient\u00e9s, il est n\u00e9cessaire de d\u00e9finir 2 listes : la liste des successeurs et la liste des pr\u00e9d\u00e9cesseurs. Soit un arc allant d'un sommet A vers un sommet B (fl\u00e8che de A vers B). On dira que B est un successeur de A et que A est un pr\u00e9d\u00e9cesseur de B. liste d'adjacence successeurs du graphe orient\u00e9 cartographie : liste d'adjacence pr\u00e9d\u00e9cesseurs du graphe orient\u00e9 cartographie : Il est possible de travailler avec des listes d'adjacences en Python en utilisant les dictionnaires : #liste d'ajacence l = { 'A' :( 'B' , 'C' , 'D' ), 'B' :( 'A' , 'E' , 'F' , 'G' ), 'C' :( 'A' ), 'D' :( 'A' , 'G' ), 'E' :( 'B' , 'F' ), 'F' :( 'B' , 'E' ), 'G' :( 'B' , 'D' )}","title":"b) impl\u00e9mentation d'un graphe \u00e0 l'aide de listes d'adjacence"},{"location":"c9c/#c-matrice-dadjacence-ou-liste-dadjacence","text":"Comment choisir l'impl\u00e9mentation \u00e0 utiliser (matrice d'adjacence ou liste d'adjacence) ? le choix se fait en fonction de la densit\u00e9 du graphe, c'est-\u00e0-dire du rapport entre le nombre d'ar\u00eates et le nombre de sommets. Pour un graphe dense on utilisera plut\u00f4t une matrice d'adjacence. certains algorithmes travaillent plut\u00f4t avec les listes d'adjacences alors que d'autres travaillent plut\u00f4t avec les matrices d'adjacences. Le choix doit donc aussi d\u00e9pendre des algorithmes utilis\u00e9s (nous aurons tr\u00e8s prochainement l'occasion d'\u00e9tudier plusieurs de ces algorithmes).","title":"c) matrice d'adjacence ou liste d'adjacence ?"},{"location":"c9e/","text":"voir les exercice du chapitre 10","title":"Exercices"},{"location":"c9r/","text":"Ce qu\u2019il faut savoir G\u00e9n\u00e9ralit\u00e9s un graphe est un \u201cobjet\u201d math\u00e9matique tr\u00e8s utilis\u00e9 en informatique. un graphe poss\u00e8de des sommets et des ar\u00eates : un graphe G est un couple G = (V,E) avec V un ensemble de sommets et E un ensemble d'ar\u00eates les graphes sont utilis\u00e9s par exemple pour mod\u00e9liser les r\u00e9seaux sociaux ou encore les cartes routi\u00e8res (il existe beaucoup d\u2019autres exemples) on trouve 2 types de graphes : les graphes non orient\u00e9s et les graphes orient\u00e9s (voir cours). Dans le cas des graphes orient\u00e9s on parlera d\u2019arcs \u00e0 la place d\u2019ar\u00eates on trouve des graphes dits pond\u00e9r\u00e9s : \u00e0 chaque ar\u00eate (ou arc) on associe une valeur (voir le cours pour un exemple) d\u00e9finitions : Une cha\u00eene est une suite d'ar\u00eates cons\u00e9cutives dans un graphe, un peu comme si on se promenait sur le graphe. On la d\u00e9signe par les lettres des sommets qu'elle comporte. Un cycle est une cha\u00eene qui commence et se termine au m\u00eame sommet. Impl\u00e9mentations des graphes Il existe deux m\u00e9thodes permettant d'impl\u00e9menter un graphe : les matrices d'adjacences et les listes d'adjacences (voir le cours) le choix se fait en fonction de la densit\u00e9 du graphe, c'est-\u00e0-dire du rapport entre le nombre d'ar\u00eates et le nombre de sommets. Pour un graphe dense on utilisera plut\u00f4t une matrice d'adjacence. certains algorithmes travaillent plut\u00f4t avec les listes d'adjacences alors que d'autres travaillent plut\u00f4t avec les matrices d'adjacences. Le choix doit donc aussi d\u00e9pendre des algorithmes utilis\u00e9s (nous aurons tr\u00e8s prochainement l'occasion d'\u00e9tudier plusieurs de ces algorithmes). Ce qu\u2019il faut savoir faire vous devez \u00eatre capable de d\u00e9terminer la matrice d\u2019adjacence d\u2019un graphe \u00e0 partir d\u2019un sch\u00e9ma (et vice versa) vous devez \u00eatre capable de d\u00e9terminer la liste d\u2019adjacence d\u2019un graphe \u00e0 partir d\u2019un sch\u00e9ma (et vice versa)","title":"R\u00e9vision"},{"location":"c9r/#ce-quil-faut-savoir","text":"","title":"Ce qu\u2019il faut savoir"},{"location":"c9r/#generalites","text":"un graphe est un \u201cobjet\u201d math\u00e9matique tr\u00e8s utilis\u00e9 en informatique. un graphe poss\u00e8de des sommets et des ar\u00eates : un graphe G est un couple G = (V,E) avec V un ensemble de sommets et E un ensemble d'ar\u00eates les graphes sont utilis\u00e9s par exemple pour mod\u00e9liser les r\u00e9seaux sociaux ou encore les cartes routi\u00e8res (il existe beaucoup d\u2019autres exemples) on trouve 2 types de graphes : les graphes non orient\u00e9s et les graphes orient\u00e9s (voir cours). Dans le cas des graphes orient\u00e9s on parlera d\u2019arcs \u00e0 la place d\u2019ar\u00eates on trouve des graphes dits pond\u00e9r\u00e9s : \u00e0 chaque ar\u00eate (ou arc) on associe une valeur (voir le cours pour un exemple) d\u00e9finitions : Une cha\u00eene est une suite d'ar\u00eates cons\u00e9cutives dans un graphe, un peu comme si on se promenait sur le graphe. On la d\u00e9signe par les lettres des sommets qu'elle comporte. Un cycle est une cha\u00eene qui commence et se termine au m\u00eame sommet.","title":"G\u00e9n\u00e9ralit\u00e9s"},{"location":"c9r/#implementations-des-graphes","text":"Il existe deux m\u00e9thodes permettant d'impl\u00e9menter un graphe : les matrices d'adjacences et les listes d'adjacences (voir le cours) le choix se fait en fonction de la densit\u00e9 du graphe, c'est-\u00e0-dire du rapport entre le nombre d'ar\u00eates et le nombre de sommets. Pour un graphe dense on utilisera plut\u00f4t une matrice d'adjacence. certains algorithmes travaillent plut\u00f4t avec les listes d'adjacences alors que d'autres travaillent plut\u00f4t avec les matrices d'adjacences. Le choix doit donc aussi d\u00e9pendre des algorithmes utilis\u00e9s (nous aurons tr\u00e8s prochainement l'occasion d'\u00e9tudier plusieurs de ces algorithmes).","title":"Impl\u00e9mentations des graphes"},{"location":"c9r/#ce-quil-faut-savoir-faire","text":"vous devez \u00eatre capable de d\u00e9terminer la matrice d\u2019adjacence d\u2019un graphe \u00e0 partir d\u2019un sch\u00e9ma (et vice versa) vous devez \u00eatre capable de d\u00e9terminer la liste d\u2019adjacence d\u2019un graphe \u00e0 partir d\u2019un sch\u00e9ma (et vice versa)","title":"Ce qu\u2019il faut savoir faire"},{"location":"pr1/","text":"Avant d'\u00e9voquer le projet en tant que tel, nous allons commencer par travailler sur les requ\u00eates SQL effectu\u00e9es depuis un programme Python. Il est donc n\u00e9cessaire de bien maitriser toute la partie consacr\u00e9e aux bases de donn\u00e9es et particuli\u00e8rement le cours sur les requ\u00eates SQL projet 1.1 Apr\u00e8s avoir cr\u00e9\u00e9 un r\u00e9pertoire \"projet_bd\". Cr\u00e9ez, \u00e0 l'aide de spyder, un fichier Python (\u00e0 vous de choisir le nom) puis saisissez et ex\u00e9cutez le programme suivant : import sqlite3 conn = sqlite3.connect('baseDonnees.db') cur = conn.cursor() cur.execute(\"CREATE TABLE LIVRES(id INT, titre TEXT, auteur TXT, ann_publi INT, note INT)\") conn.commit() cur.close() conn.close() Analysons le programme ci-dessus : Ce programme va vous permettre de vous \"connecter\" \u00e0 une base de donn\u00e9es (si cette derni\u00e8re n'existe pas, elle sera cr\u00e9\u00e9e). Ensuite nous cr\u00e9ons une table (une relation) nomm\u00e9e LIVRES, cette table contient 4 attributs : id (de type entier), titre (de type texte), auteur (de type texte), ann_publi (de type entier) et note (de type entier). Entrons un peu dans les d\u00e9tails en analysant le programme ligne par ligne : import sqlite3 Nous commen\u00e7ons par importer la biblioth\u00e8que sqlite3. Cette biblioth\u00e8que va nous permettre d'effectuer des requ\u00eates SQL sur une base de donn\u00e9es. Comme dans le cours sur les bases de donn\u00e9es, nous utiliserons le SGBD SQLite. conn = sqlite3.connect('baseDonnees.db') cur = conn.cursor() Nous cr\u00e9ons un objet de type \"connection\" (conn) qui va nous permettre d'interagir avec la base de donn\u00e9es \"baseDonnees.db\" (comme dit plus haut, si cette base de donn\u00e9es n'existe pas, elle est cr\u00e9\u00e9e). Vous devriez donc avoir un fichier \"baseDonnees.db\" dans le m\u00eame r\u00e9pertoire que votre fichier Python. Nous cr\u00e9ons ensuite un objet de type \"cursor\" \u00e0 partir de l'objet de type \"connection\". Cet objet de type \"cursor\" va nous permettre de manipuler la base de donn\u00e9es et d'obtenir des r\u00e9sultats lorsque nous effectuerons des requ\u00eates. cur.execute(\"CREATE TABLE LIVRES(id INT, titre TEXT, auteur TXT, ann_publi INT, note INT)\") La m\u00e9thode \"execute\" de notre objet de type \"cursor\" nous permet d'effectuer une requ\u00eate SQL. Cette requ\u00eate SQL est en tout point identique \u00e0 ce que nous avons vu dans le cours sur les bases de donn\u00e9es. conn.commit() Pour v\u00e9ritablement ex\u00e9cuter les requ\u00eates, il est n\u00e9cessaire d'appliquer la m\u00e9thode \"commit\" \u00e0 l'objet de type \"connection\". cur.close() conn.close() Avant de terminer le programme, il n\u00e9cessaire de \"fermer\" l'objet de type \"cursor\" et l'objet de type \"connection\". Nous allons syst\u00e9matiquement retrouver cette structure dans nos futurs programmes : cr\u00e9ation d'un objet de type \"connection\" cr\u00e9ation d'un objet de type \"cursor\" pr\u00e9paration d'une ou plusieurs requ\u00eate(s) (m\u00e9thode \"execute\" sur l'objet de type \"cursor\") ex\u00e9cution r\u00e9elle des requ\u00eates (m\u00e9thode \"commit\" sur l'objet de type \"connection\") \"fermeture\" de l'objet de type \"cursor\" puis de l'objet de type \"connection\" Si vous ex\u00e9cutez une deuxi\u00e8me fois le programme propos\u00e9 au \"\u00c0 faire vous-m\u00eame 1\", vous aurez droit \u00e0 une erreur : \"OperationalError: table LIVRES already exists\". Afin d'\u00e9viter ce genre de probl\u00e8me, il est possible de modifier le programme afin que la requ\u00eate de cr\u00e9ation de la table LIVRES ne se fasse pas si la table LIVRES existe d\u00e9j\u00e0 : projet 1.2 Apr\u00e8s avoir effac\u00e9 le fichier \"baseDonnees.db\", saisissez le programme ci-dessous, puis ex\u00e9cutez-le import sqlite3 conn = sqlite3.connect('baseDonnees.db') cur = conn.cursor() cur.execute(\"CREATE TABLE IF NOT EXISTS LIVRES(id INT, titre TEXT, auteur TXT, ann_publi INT, note INT)\") conn.commit() cur.close() conn.close() Comme vous pouvez le constater, si vous ex\u00e9cutez le programme plusieurs fois de suite, il n'y a plus d'erreur. projet 1.3 Ouvrez le fichier \"baseDonnees.db\" \u00e0 l'aide du logiciel \"DB Browser for SQLite\" et v\u00e9rifiez que la table LIVRES a bien \u00e9t\u00e9 cr\u00e9\u00e9e. Maintenant que notre table LIVRES a \u00e9t\u00e9 cr\u00e9\u00e9e, nous allons pouvoir commencer \u00e0 la \"remplir\" avec des donn\u00e9es : projet 1.4 Saisissez le programme ci-dessous, puis ex\u00e9cutez-le import sqlite3 conn = sqlite3.connect('baseDonnees.db') cur = conn.cursor() cur.execute(\"CREATE TABLE IF NOT EXISTS LIVRES(id INT, titre TEXT, auteur TXT, ann_publi INT, note INT)\") cur.execute(\"INSERT INTO LIVRES(id,titre,auteur,ann_publi,note) VALUES(1,'1984','Orwell',1949,10)\") conn.commit() Rien de particulier \u00e0 signaler, la requ\u00eate INSERT est identique \u00e0 ce qui a \u00e9t\u00e9 vu dans le cours sur les bases de donn\u00e9es. projet 1.5 Ouvrez le fichier \"baseDonnees.db\" \u00e0 l'aide du logiciel \"DB Browser for SQLite\" et v\u00e9rifiez que les donn\u00e9es ont bien \u00e9t\u00e9 ajout\u00e9es \u00e0 la table LIVRES. Nous avons inclus les donn\u00e9es \u00e0 ins\u00e9rer directement dans la requ\u00eate. Il est possible de proc\u00e9der autrement en s\u00e9parant les donn\u00e9es \u00e0 ins\u00e9rer et la requ\u00eate (cela s'av\u00e9rera particuli\u00e8rement pratique dans le futur) projet 1.6 Apr\u00e8s avoir effac\u00e9 le fichier \"baseDonnees.db\", saisissez le programme ci-dessous, puis ex\u00e9cutez-le import sqlite3 conn = sqlite3.connect('baseDonnees.db') cur = conn.cursor() data = (1,'1984','Orwell',1949,10) cur.execute(\"CREATE TABLE IF NOT EXISTS LIVRES(id INT, titre TEXT, auteur TXT, ann_publi INT, note INT)\") cur.execute(\"INSERT INTO LIVRES(id,titre,auteur,ann_publi,note) VALUES(?, ?, ?, ?, ?)\", data) conn.commit() cur.close() conn.close() Premi\u00e8re chose \u00e0 remarquer, nous avons cr\u00e9\u00e9 un tuple (data) contenant toutes les informations. En effet, la m\u00e9thode \"execute\" peut prendre un deuxi\u00e8me param\u00e8tre un tuple contenant les donn\u00e9es \u00e0 ins\u00e9rer. Les points d'interrogation pr\u00e9sents dans la requ\u00eate indiquent l'emplacement des donn\u00e9es \u00e0 ins\u00e9rer. Le premier ? sera remplac\u00e9 par le premier \u00e9l\u00e9ment du tuple (dans notre cas 1), le deuxi\u00e8me ? sera remplac\u00e9 par le deuxi\u00e8me \u00e9l\u00e9ment du tuple (dans notre cas '1984') et ainsi de suite... Si l'on d\u00e9sire ins\u00e9rer plusieurs donn\u00e9es, il est possible de regrouper toutes les donn\u00e9es \u00e0 ins\u00e9rer dans un tableau et d'utiliser la m\u00e9thode \"executemany\" \u00e0 la place de la m\u00e9thode \"execute\". projet 1.7 Apr\u00e8s avoir effac\u00e9 le fichier \"baseDonnees.db\", saisissez le programme ci-dessous, puis ex\u00e9cutez-le import sqlite3 conn = sqlite3.connect('baseDonnees.db') cur = conn.cursor() datas = [ (1,'1984','Orwell',1949,10), (2,'Dune','Herbert',1965,8), (3,'Fondation','Asimov',1951,9), (4,'Le meilleur des mondes','Huxley',1931,7), (5,'Fahrenheit 451','Bradbury',1953,7), (6,'Ubik','K.Dick',1969,9), (7,'Chroniques martiennes','Bradbury',1950,8), (8,'La nuit des temps','Barjavel',1968,7), (9,'Blade Runner','K.Dick',1968,8), (10,'Les Robots','Asimov',1950,9), (11,'La Plan\u00e8te des singes','Boulle',1963,8), (12,'Ravage','Barjavel',1943,8), (13,'Le Ma\u00eetre du Haut Ch\u00e2teau','K.Dick',1962,8), (14,'Le monde des \u0100','Van Vogt',1945,7), (15,'La Fin de l\u2019\u00e9ternit\u00e9','Asimov',1955,8), (16,'De la Terre \u00e0 la Lune','Verne',1865,10) ] cur.execute(\"CREATE TABLE IF NOT EXISTS LIVRES(id INT, titre TEXT, auteur TXT, ann_publi INT, note INT)\") cur.executemany(\"INSERT INTO LIVRES(id,titre,auteur,ann_publi,note) VALUES(?, ?, ?, ?, ?)\", datas) conn.commit() cur.close() conn.close() projet 1.8 Ouvrez le fichier \"baseDonnees.db\" \u00e0 l'aide du logiciel \"DB Browser for SQLite\" et v\u00e9rifiez que les donn\u00e9es ont bien \u00e9t\u00e9 ajout\u00e9es \u00e0 la table LIVRES. Il n'est pas tr\u00e8s pratique d'avoir \u00e0 g\u00e9rer l'id (cl\u00e9 primaire). En effet, si je veux ajouter un nouveau livre, il faudra que je connaisse l'id du pr\u00e9c\u00e9dent (incr\u00e9mentation de l'id). Heureusement, il est possible d'automatiser cette incr\u00e9mentation. projet 1.9 Apr\u00e8s avoir effac\u00e9 le fichier \"baseDonnees.db\", saisissez le programme ci-dessous, puis ex\u00e9cutez-le import sqlite3 conn = sqlite3.connect('baseDonnees.db') cur = conn.cursor() datas = [ ('1984','Orwell',1949,10), ('Dune','Herbert',1965,8), ('Fondation','Asimov',1951,9), ('Le meilleur des mondes','Huxley',1931,7), ('Fahrenheit 451','Bradbury',1953,7), ('Ubik','K.Dick',1969,9), ('Chroniques martiennes','Bradbury',1950,8), ('La nuit des temps','Barjavel',1968,7), ('Blade Runner','K.Dick',1968,8), ('Les Robots','Asimov',1950,9), ('La Plan\u00e8te des singes','Boulle',1963,8), ('Ravage','Barjavel',1943,8), ('Le Ma\u00eetre du Haut Ch\u00e2teau','K.Dick',1962,8), ('Le monde des \u0100','Van Vogt',1945,7), ('La Fin de l\u2019\u00e9ternit\u00e9','Asimov',1955,8), ('De la Terre \u00e0 la Lune','Verne',1865,10) ] cur.execute(\"CREATE TABLE IF NOT EXISTS LIVRES(id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE, titre TEXT, auteur TXT, ann_publi INT, note INT)\") cur.executemany(\"INSERT INTO LIVRES(titre,auteur,ann_publi,note) VALUES(?, ?, ?, ?)\", datas) conn.commit() cur.close() conn.close() Ouvrez le fichier \"baseDonnees.db\" \u00e0 l'aide du logiciel \"DB Browser for SQLite\" et v\u00e9rifiez que les donn\u00e9es ont bien \u00e9t\u00e9 ajout\u00e9es \u00e0 la table LIVRES. Vous pouvez constater que nous avons bien l'attribut \"id\", m\u00eame si ce dernier n'a pas \u00e9t\u00e9 renseign\u00e9 dans les donn\u00e9es (absence d'id dans le tableau datas). D\u00e9sormais l'id sera incr\u00e9ment\u00e9 automatiquement gr\u00e2ce au \"id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE\" (attention il est n\u00e9cessaire d'utiliser INTEGER \u00e0 la place du INT habituel) pr\u00e9sent dans la requ\u00eate de cr\u00e9ation de la table LIVRES. Attention, de bien penser \u00e0 supprimer un ? dans la requ\u00eate d'insertion (chaque tuple contient maintenant 4 \u00e9l\u00e9ments (nous en avions 5 quand l'id n'\u00e9tait pas g\u00e9r\u00e9 automatiquement)). Il est tout \u00e0 fait possible de rajouter une nouvelle donn\u00e9e : projet 1.10 Saisissez le programme ci-dessous, puis ex\u00e9cutez-le import sqlite3 conn = sqlite3.connect('baseDonnees.db') cur = conn.cursor() nvx_data = ('Hyp\u00e9rion','Simmons',1989,8) cur.execute(\"INSERT INTO LIVRES(titre,auteur,ann_publi,note) VALUES(?, ?, ?, ?)\", nvx_data) conn.commit() cur.close() conn.close() Ouvrez le fichier \"baseDonnees.db\" \u00e0 l'aide du logiciel \"DB Browser for SQLite\" et v\u00e9rifiez que les donn\u00e9es ont bien \u00e9t\u00e9 ajout\u00e9es \u00e0 la table LIVRES. Vous pouvez remarquer que le nouvel enregistrement a bien l'id 17 et que nous n'avons pas eu \u00e0 nous en occuper. Il est possible de modifier des donn\u00e9es d\u00e9j\u00e0 pr\u00e9sentes dans la table. projet 1.11 Saisissez le programme ci-dessous, puis ex\u00e9cutez-le import sqlite3 conn = sqlite3.connect('baseDonnees.db') cur = conn.cursor() modif = (7, 'Hyp\u00e9rion') cur.execute('UPDATE LIVRES SET note = ? WHERE titre = ?', modif) conn.commit() cur.close() conn.close() Ouvrez le fichier \"baseDonnees.db\" \u00e0 l'aide du logiciel \"DB Browser for SQLite\" et v\u00e9rifiez que les donn\u00e9es ont bien \u00e9t\u00e9 modifi\u00e9es dans la table LIVRES. Comme vous pouvez le constater, il est possible d'utiliser la clause WHERE avec un ? Il est aussi possible de supprimer une donn\u00e9e : projet 1.12 Saisissez le programme ci-dessous, puis ex\u00e9cutez-le import sqlite3 conn = sqlite3.connect('baseDonnees.db') cur = conn.cursor() suppr = ('Hyp\u00e9rion',) cur.execute('DELETE FROM LIVRES WHERE titre = ?', suppr) conn.commit() cur.close() conn.close() Ouvrez le fichier \"baseDonnees.db\" \u00e0 l'aide du logiciel \"DB Browser for SQLite\" et v\u00e9rifiez que l'entr\u00e9e \"Hyp\u00e9rion\" a \u00e9t\u00e9 supprim\u00e9e de la table LIVRES. Attention, le deuxi\u00e8me param\u00e8tre de la m\u00e9thode \"execute\" doit \u00eatre un tuple, si on \u00e9crit seulement suppr = ('Hyp\u00e9rion'), suppr est une chaine de caract\u00e8re et pas un tuple. Pour avoir un tuple avec un seul \u00e9l\u00e9ment il est n\u00e9cessaire d'ajouter une virgule (d'o\u00f9 le suppr = ('Hyp\u00e9rion',)) Enfin, pour terminer cette introduction sur l'utilisation de sqlite en Python, nous devons nous int\u00e9resser aux requ\u00eates de type \"SELECT\" : projet 1.13 Saisissez le programme ci-dessous, puis ex\u00e9cutez-le import sqlite3 conn = sqlite3.connect('baseDonnees.db') cur = conn.cursor() cur.execute('SELECT * FROM LIVRES') conn.commit() liste = cur.fetchall() cur.close() conn.close() \u00c0 l'aide de la console, d\u00e9terminez la valeur r\u00e9f\u00e9renc\u00e9e par la variable liste Comme vous pouvez le constater, la variable liste est un tableau qui contient des tuples. Chaque tuple est un enregistrement de la table LIVRES. La m\u00e9thode \"fetchall\" d'un objet de type \"cursor\" renvoie un tableau contenant des tuples Il est possible d'avoir des requ\u00eates plus s\u00e9lectives : projet 1.14 Saisissez le programme ci-dessous, puis ex\u00e9cutez-le import sqlite3 conn = sqlite3.connect('baseDonnees.db') cur = conn.cursor() cur.execute('SELECT titre FROM LIVRES WHERE ann_publi < 1970') conn.commit() liste = cur.fetchall() \u00c0 l'aide de la console, d\u00e9terminez la valeur r\u00e9f\u00e9renc\u00e9e par la variable liste Vous pouvez constater que l'on obtient bien un tableau contenant des tuples (nous avons bien des tuples m\u00eame si seuls les titres ont \u00e9t\u00e9 s\u00e9lectionn\u00e9s) Il est possible d'utiliser les points d'interrogation dans une requ\u00eate de type SELECT : projet 1.15 Saisissez le programme ci-dessous, puis ex\u00e9cutez-le import sqlite3 conn = sqlite3.connect('baseDonnees.db') cur = conn.cursor() recherche = (1960, 8) cur.execute('SELECT titre FROM LIVRES WHERE ann_publi < ? AND note > ?', recherche) conn.commit() liste = cur.fetchall() cur.close() conn.close() \u00c0 l'aide de la console, d\u00e9terminez la valeur r\u00e9f\u00e9renc\u00e9e par la variable liste projet 1.16 Vous allez maintenant reprendre le projet \u00e9tudi\u00e9 l'ann\u00e9e derni\u00e8re : Projet r\u00e9pertoire t\u00e9l\u00e9phonique version web Cette ann\u00e9e, au lieu d'utiliser un fichier texte pour stocker les noms et les num\u00e9ros t\u00e9l\u00e9phone, il vous faudra utiliser une base de donn\u00e9es (SGBD SQLite) \u00c0 part cela, aucun autre changement n'est attendu (on utilisera toujours Flask) Pour rappel, voici la vid\u00e9o qui vous montre votre objectif : vid\u00e9o projet r\u00e9pertoire t\u00e9l\u00e9phonique version web","title":"Projet 1 : r\u00e9pertoire t\u00e9l\u00e9phonique"},{"location":"pr1/#projet-11","text":"Apr\u00e8s avoir cr\u00e9\u00e9 un r\u00e9pertoire \"projet_bd\". Cr\u00e9ez, \u00e0 l'aide de spyder, un fichier Python (\u00e0 vous de choisir le nom) puis saisissez et ex\u00e9cutez le programme suivant : import sqlite3 conn = sqlite3.connect('baseDonnees.db') cur = conn.cursor() cur.execute(\"CREATE TABLE LIVRES(id INT, titre TEXT, auteur TXT, ann_publi INT, note INT)\") conn.commit() cur.close() conn.close() Analysons le programme ci-dessus : Ce programme va vous permettre de vous \"connecter\" \u00e0 une base de donn\u00e9es (si cette derni\u00e8re n'existe pas, elle sera cr\u00e9\u00e9e). Ensuite nous cr\u00e9ons une table (une relation) nomm\u00e9e LIVRES, cette table contient 4 attributs : id (de type entier), titre (de type texte), auteur (de type texte), ann_publi (de type entier) et note (de type entier). Entrons un peu dans les d\u00e9tails en analysant le programme ligne par ligne : import sqlite3 Nous commen\u00e7ons par importer la biblioth\u00e8que sqlite3. Cette biblioth\u00e8que va nous permettre d'effectuer des requ\u00eates SQL sur une base de donn\u00e9es. Comme dans le cours sur les bases de donn\u00e9es, nous utiliserons le SGBD SQLite. conn = sqlite3.connect('baseDonnees.db') cur = conn.cursor() Nous cr\u00e9ons un objet de type \"connection\" (conn) qui va nous permettre d'interagir avec la base de donn\u00e9es \"baseDonnees.db\" (comme dit plus haut, si cette base de donn\u00e9es n'existe pas, elle est cr\u00e9\u00e9e). Vous devriez donc avoir un fichier \"baseDonnees.db\" dans le m\u00eame r\u00e9pertoire que votre fichier Python. Nous cr\u00e9ons ensuite un objet de type \"cursor\" \u00e0 partir de l'objet de type \"connection\". Cet objet de type \"cursor\" va nous permettre de manipuler la base de donn\u00e9es et d'obtenir des r\u00e9sultats lorsque nous effectuerons des requ\u00eates. cur.execute(\"CREATE TABLE LIVRES(id INT, titre TEXT, auteur TXT, ann_publi INT, note INT)\") La m\u00e9thode \"execute\" de notre objet de type \"cursor\" nous permet d'effectuer une requ\u00eate SQL. Cette requ\u00eate SQL est en tout point identique \u00e0 ce que nous avons vu dans le cours sur les bases de donn\u00e9es. conn.commit() Pour v\u00e9ritablement ex\u00e9cuter les requ\u00eates, il est n\u00e9cessaire d'appliquer la m\u00e9thode \"commit\" \u00e0 l'objet de type \"connection\". cur.close() conn.close() Avant de terminer le programme, il n\u00e9cessaire de \"fermer\" l'objet de type \"cursor\" et l'objet de type \"connection\". Nous allons syst\u00e9matiquement retrouver cette structure dans nos futurs programmes : cr\u00e9ation d'un objet de type \"connection\" cr\u00e9ation d'un objet de type \"cursor\" pr\u00e9paration d'une ou plusieurs requ\u00eate(s) (m\u00e9thode \"execute\" sur l'objet de type \"cursor\") ex\u00e9cution r\u00e9elle des requ\u00eates (m\u00e9thode \"commit\" sur l'objet de type \"connection\") \"fermeture\" de l'objet de type \"cursor\" puis de l'objet de type \"connection\" Si vous ex\u00e9cutez une deuxi\u00e8me fois le programme propos\u00e9 au \"\u00c0 faire vous-m\u00eame 1\", vous aurez droit \u00e0 une erreur : \"OperationalError: table LIVRES already exists\". Afin d'\u00e9viter ce genre de probl\u00e8me, il est possible de modifier le programme afin que la requ\u00eate de cr\u00e9ation de la table LIVRES ne se fasse pas si la table LIVRES existe d\u00e9j\u00e0 :","title":"projet 1.1"},{"location":"pr1/#projet-12","text":"Apr\u00e8s avoir effac\u00e9 le fichier \"baseDonnees.db\", saisissez le programme ci-dessous, puis ex\u00e9cutez-le import sqlite3 conn = sqlite3.connect('baseDonnees.db') cur = conn.cursor() cur.execute(\"CREATE TABLE IF NOT EXISTS LIVRES(id INT, titre TEXT, auteur TXT, ann_publi INT, note INT)\") conn.commit() cur.close() conn.close() Comme vous pouvez le constater, si vous ex\u00e9cutez le programme plusieurs fois de suite, il n'y a plus d'erreur.","title":"projet 1.2"},{"location":"pr1/#projet-13","text":"Ouvrez le fichier \"baseDonnees.db\" \u00e0 l'aide du logiciel \"DB Browser for SQLite\" et v\u00e9rifiez que la table LIVRES a bien \u00e9t\u00e9 cr\u00e9\u00e9e. Maintenant que notre table LIVRES a \u00e9t\u00e9 cr\u00e9\u00e9e, nous allons pouvoir commencer \u00e0 la \"remplir\" avec des donn\u00e9es :","title":"projet 1.3"},{"location":"pr1/#projet-14","text":"Saisissez le programme ci-dessous, puis ex\u00e9cutez-le import sqlite3 conn = sqlite3.connect('baseDonnees.db') cur = conn.cursor() cur.execute(\"CREATE TABLE IF NOT EXISTS LIVRES(id INT, titre TEXT, auteur TXT, ann_publi INT, note INT)\") cur.execute(\"INSERT INTO LIVRES(id,titre,auteur,ann_publi,note) VALUES(1,'1984','Orwell',1949,10)\") conn.commit() Rien de particulier \u00e0 signaler, la requ\u00eate INSERT est identique \u00e0 ce qui a \u00e9t\u00e9 vu dans le cours sur les bases de donn\u00e9es.","title":"projet 1.4"},{"location":"pr1/#projet-15","text":"Ouvrez le fichier \"baseDonnees.db\" \u00e0 l'aide du logiciel \"DB Browser for SQLite\" et v\u00e9rifiez que les donn\u00e9es ont bien \u00e9t\u00e9 ajout\u00e9es \u00e0 la table LIVRES. Nous avons inclus les donn\u00e9es \u00e0 ins\u00e9rer directement dans la requ\u00eate. Il est possible de proc\u00e9der autrement en s\u00e9parant les donn\u00e9es \u00e0 ins\u00e9rer et la requ\u00eate (cela s'av\u00e9rera particuli\u00e8rement pratique dans le futur)","title":"projet 1.5"},{"location":"pr1/#projet-16","text":"Apr\u00e8s avoir effac\u00e9 le fichier \"baseDonnees.db\", saisissez le programme ci-dessous, puis ex\u00e9cutez-le import sqlite3 conn = sqlite3.connect('baseDonnees.db') cur = conn.cursor() data = (1,'1984','Orwell',1949,10) cur.execute(\"CREATE TABLE IF NOT EXISTS LIVRES(id INT, titre TEXT, auteur TXT, ann_publi INT, note INT)\") cur.execute(\"INSERT INTO LIVRES(id,titre,auteur,ann_publi,note) VALUES(?, ?, ?, ?, ?)\", data) conn.commit() cur.close() conn.close() Premi\u00e8re chose \u00e0 remarquer, nous avons cr\u00e9\u00e9 un tuple (data) contenant toutes les informations. En effet, la m\u00e9thode \"execute\" peut prendre un deuxi\u00e8me param\u00e8tre un tuple contenant les donn\u00e9es \u00e0 ins\u00e9rer. Les points d'interrogation pr\u00e9sents dans la requ\u00eate indiquent l'emplacement des donn\u00e9es \u00e0 ins\u00e9rer. Le premier ? sera remplac\u00e9 par le premier \u00e9l\u00e9ment du tuple (dans notre cas 1), le deuxi\u00e8me ? sera remplac\u00e9 par le deuxi\u00e8me \u00e9l\u00e9ment du tuple (dans notre cas '1984') et ainsi de suite... Si l'on d\u00e9sire ins\u00e9rer plusieurs donn\u00e9es, il est possible de regrouper toutes les donn\u00e9es \u00e0 ins\u00e9rer dans un tableau et d'utiliser la m\u00e9thode \"executemany\" \u00e0 la place de la m\u00e9thode \"execute\".","title":"projet 1.6"},{"location":"pr1/#projet-17","text":"Apr\u00e8s avoir effac\u00e9 le fichier \"baseDonnees.db\", saisissez le programme ci-dessous, puis ex\u00e9cutez-le import sqlite3 conn = sqlite3.connect('baseDonnees.db') cur = conn.cursor() datas = [ (1,'1984','Orwell',1949,10), (2,'Dune','Herbert',1965,8), (3,'Fondation','Asimov',1951,9), (4,'Le meilleur des mondes','Huxley',1931,7), (5,'Fahrenheit 451','Bradbury',1953,7), (6,'Ubik','K.Dick',1969,9), (7,'Chroniques martiennes','Bradbury',1950,8), (8,'La nuit des temps','Barjavel',1968,7), (9,'Blade Runner','K.Dick',1968,8), (10,'Les Robots','Asimov',1950,9), (11,'La Plan\u00e8te des singes','Boulle',1963,8), (12,'Ravage','Barjavel',1943,8), (13,'Le Ma\u00eetre du Haut Ch\u00e2teau','K.Dick',1962,8), (14,'Le monde des \u0100','Van Vogt',1945,7), (15,'La Fin de l\u2019\u00e9ternit\u00e9','Asimov',1955,8), (16,'De la Terre \u00e0 la Lune','Verne',1865,10) ] cur.execute(\"CREATE TABLE IF NOT EXISTS LIVRES(id INT, titre TEXT, auteur TXT, ann_publi INT, note INT)\") cur.executemany(\"INSERT INTO LIVRES(id,titre,auteur,ann_publi,note) VALUES(?, ?, ?, ?, ?)\", datas) conn.commit() cur.close() conn.close()","title":"projet 1.7"},{"location":"pr1/#projet-18","text":"Ouvrez le fichier \"baseDonnees.db\" \u00e0 l'aide du logiciel \"DB Browser for SQLite\" et v\u00e9rifiez que les donn\u00e9es ont bien \u00e9t\u00e9 ajout\u00e9es \u00e0 la table LIVRES. Il n'est pas tr\u00e8s pratique d'avoir \u00e0 g\u00e9rer l'id (cl\u00e9 primaire). En effet, si je veux ajouter un nouveau livre, il faudra que je connaisse l'id du pr\u00e9c\u00e9dent (incr\u00e9mentation de l'id). Heureusement, il est possible d'automatiser cette incr\u00e9mentation.","title":"projet 1.8"},{"location":"pr1/#projet-19","text":"Apr\u00e8s avoir effac\u00e9 le fichier \"baseDonnees.db\", saisissez le programme ci-dessous, puis ex\u00e9cutez-le import sqlite3 conn = sqlite3.connect('baseDonnees.db') cur = conn.cursor() datas = [ ('1984','Orwell',1949,10), ('Dune','Herbert',1965,8), ('Fondation','Asimov',1951,9), ('Le meilleur des mondes','Huxley',1931,7), ('Fahrenheit 451','Bradbury',1953,7), ('Ubik','K.Dick',1969,9), ('Chroniques martiennes','Bradbury',1950,8), ('La nuit des temps','Barjavel',1968,7), ('Blade Runner','K.Dick',1968,8), ('Les Robots','Asimov',1950,9), ('La Plan\u00e8te des singes','Boulle',1963,8), ('Ravage','Barjavel',1943,8), ('Le Ma\u00eetre du Haut Ch\u00e2teau','K.Dick',1962,8), ('Le monde des \u0100','Van Vogt',1945,7), ('La Fin de l\u2019\u00e9ternit\u00e9','Asimov',1955,8), ('De la Terre \u00e0 la Lune','Verne',1865,10) ] cur.execute(\"CREATE TABLE IF NOT EXISTS LIVRES(id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE, titre TEXT, auteur TXT, ann_publi INT, note INT)\") cur.executemany(\"INSERT INTO LIVRES(titre,auteur,ann_publi,note) VALUES(?, ?, ?, ?)\", datas) conn.commit() cur.close() conn.close() Ouvrez le fichier \"baseDonnees.db\" \u00e0 l'aide du logiciel \"DB Browser for SQLite\" et v\u00e9rifiez que les donn\u00e9es ont bien \u00e9t\u00e9 ajout\u00e9es \u00e0 la table LIVRES. Vous pouvez constater que nous avons bien l'attribut \"id\", m\u00eame si ce dernier n'a pas \u00e9t\u00e9 renseign\u00e9 dans les donn\u00e9es (absence d'id dans le tableau datas). D\u00e9sormais l'id sera incr\u00e9ment\u00e9 automatiquement gr\u00e2ce au \"id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE\" (attention il est n\u00e9cessaire d'utiliser INTEGER \u00e0 la place du INT habituel) pr\u00e9sent dans la requ\u00eate de cr\u00e9ation de la table LIVRES. Attention, de bien penser \u00e0 supprimer un ? dans la requ\u00eate d'insertion (chaque tuple contient maintenant 4 \u00e9l\u00e9ments (nous en avions 5 quand l'id n'\u00e9tait pas g\u00e9r\u00e9 automatiquement)). Il est tout \u00e0 fait possible de rajouter une nouvelle donn\u00e9e :","title":"projet 1.9"},{"location":"pr1/#projet-110","text":"Saisissez le programme ci-dessous, puis ex\u00e9cutez-le import sqlite3 conn = sqlite3.connect('baseDonnees.db') cur = conn.cursor() nvx_data = ('Hyp\u00e9rion','Simmons',1989,8) cur.execute(\"INSERT INTO LIVRES(titre,auteur,ann_publi,note) VALUES(?, ?, ?, ?)\", nvx_data) conn.commit() cur.close() conn.close() Ouvrez le fichier \"baseDonnees.db\" \u00e0 l'aide du logiciel \"DB Browser for SQLite\" et v\u00e9rifiez que les donn\u00e9es ont bien \u00e9t\u00e9 ajout\u00e9es \u00e0 la table LIVRES. Vous pouvez remarquer que le nouvel enregistrement a bien l'id 17 et que nous n'avons pas eu \u00e0 nous en occuper. Il est possible de modifier des donn\u00e9es d\u00e9j\u00e0 pr\u00e9sentes dans la table.","title":"projet 1.10"},{"location":"pr1/#projet-111","text":"Saisissez le programme ci-dessous, puis ex\u00e9cutez-le import sqlite3 conn = sqlite3.connect('baseDonnees.db') cur = conn.cursor() modif = (7, 'Hyp\u00e9rion') cur.execute('UPDATE LIVRES SET note = ? WHERE titre = ?', modif) conn.commit() cur.close() conn.close() Ouvrez le fichier \"baseDonnees.db\" \u00e0 l'aide du logiciel \"DB Browser for SQLite\" et v\u00e9rifiez que les donn\u00e9es ont bien \u00e9t\u00e9 modifi\u00e9es dans la table LIVRES. Comme vous pouvez le constater, il est possible d'utiliser la clause WHERE avec un ? Il est aussi possible de supprimer une donn\u00e9e :","title":"projet 1.11"},{"location":"pr1/#projet-112","text":"Saisissez le programme ci-dessous, puis ex\u00e9cutez-le import sqlite3 conn = sqlite3.connect('baseDonnees.db') cur = conn.cursor() suppr = ('Hyp\u00e9rion',) cur.execute('DELETE FROM LIVRES WHERE titre = ?', suppr) conn.commit() cur.close() conn.close() Ouvrez le fichier \"baseDonnees.db\" \u00e0 l'aide du logiciel \"DB Browser for SQLite\" et v\u00e9rifiez que l'entr\u00e9e \"Hyp\u00e9rion\" a \u00e9t\u00e9 supprim\u00e9e de la table LIVRES. Attention, le deuxi\u00e8me param\u00e8tre de la m\u00e9thode \"execute\" doit \u00eatre un tuple, si on \u00e9crit seulement suppr = ('Hyp\u00e9rion'), suppr est une chaine de caract\u00e8re et pas un tuple. Pour avoir un tuple avec un seul \u00e9l\u00e9ment il est n\u00e9cessaire d'ajouter une virgule (d'o\u00f9 le suppr = ('Hyp\u00e9rion',)) Enfin, pour terminer cette introduction sur l'utilisation de sqlite en Python, nous devons nous int\u00e9resser aux requ\u00eates de type \"SELECT\" :","title":"projet 1.12"},{"location":"pr1/#projet-113","text":"Saisissez le programme ci-dessous, puis ex\u00e9cutez-le import sqlite3 conn = sqlite3.connect('baseDonnees.db') cur = conn.cursor() cur.execute('SELECT * FROM LIVRES') conn.commit() liste = cur.fetchall() cur.close() conn.close() \u00c0 l'aide de la console, d\u00e9terminez la valeur r\u00e9f\u00e9renc\u00e9e par la variable liste Comme vous pouvez le constater, la variable liste est un tableau qui contient des tuples. Chaque tuple est un enregistrement de la table LIVRES. La m\u00e9thode \"fetchall\" d'un objet de type \"cursor\" renvoie un tableau contenant des tuples Il est possible d'avoir des requ\u00eates plus s\u00e9lectives :","title":"projet 1.13"},{"location":"pr1/#projet-114","text":"Saisissez le programme ci-dessous, puis ex\u00e9cutez-le import sqlite3 conn = sqlite3.connect('baseDonnees.db') cur = conn.cursor() cur.execute('SELECT titre FROM LIVRES WHERE ann_publi < 1970') conn.commit() liste = cur.fetchall() \u00c0 l'aide de la console, d\u00e9terminez la valeur r\u00e9f\u00e9renc\u00e9e par la variable liste Vous pouvez constater que l'on obtient bien un tableau contenant des tuples (nous avons bien des tuples m\u00eame si seuls les titres ont \u00e9t\u00e9 s\u00e9lectionn\u00e9s) Il est possible d'utiliser les points d'interrogation dans une requ\u00eate de type SELECT :","title":"projet 1.14"},{"location":"pr1/#projet-115","text":"Saisissez le programme ci-dessous, puis ex\u00e9cutez-le import sqlite3 conn = sqlite3.connect('baseDonnees.db') cur = conn.cursor() recherche = (1960, 8) cur.execute('SELECT titre FROM LIVRES WHERE ann_publi < ? AND note > ?', recherche) conn.commit() liste = cur.fetchall() cur.close() conn.close() \u00c0 l'aide de la console, d\u00e9terminez la valeur r\u00e9f\u00e9renc\u00e9e par la variable liste","title":"projet 1.15"},{"location":"pr1/#projet-116","text":"Vous allez maintenant reprendre le projet \u00e9tudi\u00e9 l'ann\u00e9e derni\u00e8re : Projet r\u00e9pertoire t\u00e9l\u00e9phonique version web Cette ann\u00e9e, au lieu d'utiliser un fichier texte pour stocker les noms et les num\u00e9ros t\u00e9l\u00e9phone, il vous faudra utiliser une base de donn\u00e9es (SGBD SQLite) \u00c0 part cela, aucun autre changement n'est attendu (on utilisera toujours Flask) Pour rappel, voici la vid\u00e9o qui vous montre votre objectif : vid\u00e9o projet r\u00e9pertoire t\u00e9l\u00e9phonique version web","title":"projet 1.16"},{"location":"pr2/","text":"Dans ce projet nous allons tenter de cr\u00e9er un jeu du morpion ( article sur Wikip\u00e9dia sur le jeu du morpion si n\u00e9cessaire ) \u00e0 l'aide de la biblioth\u00e8que Pygame. 1) prise en main de Pygame Quelques mots sur Pygame : Pygame est une biblioth\u00e8que libre multiplate-forme qui facilite le d\u00e9veloppement de jeux vid\u00e9o temps r\u00e9el avec le langage de programmation Python. Elle permet de programmer la partie multim\u00e9dia (graphismes, son et entr\u00e9es au clavier, \u00e0 la souris ou au joystick), sans se heurter aux difficult\u00e9s des langages de bas niveau. Pygame est distribu\u00e9e selon les termes de la licence GNU LGPL. (d'apr\u00e8s Wikip\u00e9dia) Avant de pouvoir s'attaquer \u00e0 la cr\u00e9ation du morpion proprement dit, il est n\u00e9cessaire de travailler sur les bases de l'utilisation de Pygame : projet 2.1 Saisissez, analysez et testez ce code : import pygame surf = pygame.display.set_mode((800,600)) pygame.quit() Quelques explications sur le code ci-dessus : la premi\u00e8re ligne permet d'importer la biblioth\u00e8que Pygame \"surf = pygame.display.set_mode((800, 600))\" permet de cr\u00e9er la \"surface\" pygame, cette \"surface\" aura pour dimension 800 pixels de large et 600 pixels de haut la derni\u00e8re ligne permet de quitter \"proprement\" votre programme Pygame (si vous omettez cette ligne vous risquez de vous retrouver bloqu\u00e9 avec une fen\u00eatre impossible \u00e0 fermer) Vous avez peut-\u00eatre remarqu\u00e9 qu'une fen\u00eatre s'ouvre et se referme quasi imm\u00e9diatement apr\u00e8s. Pourquoi ? L'interpr\u00e9teur Python ex\u00e9cute les instructions ligne apr\u00e8s ligne, une fois la derni\u00e8re ligne ex\u00e9cut\u00e9e, le programme est termin\u00e9 et la fen\u00eatre se ferme. Il faut donc emp\u00eacher la fen\u00eatre de se refermer, il faut donc emp\u00eacher le programme de se terminer. Pour cela nous allons employer une boucle. On appelle souvent cette boucle une \"boucle de jeu\" projet 2.2 Saisissez, analysez et testez ce code : import pygame surf = pygame.display.set_mode((800,600)) run = True while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False pygame.quit() Nous avons bien notre boucle (\"while run\" avec au d\u00e9part run = True). Cette boucle ne peut pas continuer ind\u00e9finiment, il faut laisser \u00e0 l'utilisateur la possibilit\u00e9 de sortir du programme. Pour cela nous utilisons le gestionnaire d'\u00e9v\u00e9nements de Pygame : Pygame \"surveille\" tous les \u00e9v\u00e9nements qui pourraient survenir (principalement une action de l'utilisateur sur la souris ou sur le clavier). \"pygame.event.get()\" renvoie un tableau avec tous les \u00e9v\u00e9nements en cours, la boucle \"for\" permet de parcourir tous ces \u00e9v\u00e9nements. On retrouve ces \u00e9v\u00e9nements dans l'objet \"event\". Un des \u00e9v\u00e9nements possibles est \"le clic de souris sur la croix en haut \u00e0 gauche de la fen\u00eatre\" traduit par \"pygame.QUIT\". Si l'utilisateur clique sur \"la croix en haut \u00e0 gauche de la fen\u00eatre\", on \"entre\" dans le \"if\" et la variable \"run\" devient False : la \"boucle de jeu\" se termine, la ligne \"pygame.quit()\" est ex\u00e9cut\u00e9e, et le programme se termine. Il faut bien comprendre que la liste des \u00e9v\u00e9nements en cours est r\u00e9actualis\u00e9e en permanence gr\u00e2ce \u00e0 la \"boucle de jeu\" : les instructions contenues dans la boucle sont ex\u00e9cut\u00e9es des dizaines de fois par seconde, on a donc \"pygame.event.get()\" qui est ex\u00e9cut\u00e9e plusieurs dizaines de fois par seconde, la liste des \u00e9v\u00e9nements est donc mise \u00e0 jour plusieurs dizaines de fois par seconde ! On peut donc dire que les \u00e9v\u00e9nements (clavier et souris) sont \"surveill\u00e9s\" en \"permanence\" (m\u00eame si on devrait plut\u00f4t dire que les \u00e9v\u00e9nements sont \"control\u00e9s\" plusieurs dizaines de fois par seconde). Pygame permet de dessiner des formes diverses : projet 2.3 Saisissez, analysez et testez ce code import pygame surf = pygame.display.set_mode((800,600)) run = True while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False pygame.draw.line(surf,(255,255,255),(10,20),(150,200),2) pygame.display.flip() pygame.quit() La ligne \"pygame.draw.line(...)\" permet d'afficher une ligne, la m\u00e9thode \"line\" prend en param\u00e8tres : la surface sur laquelle nous allons dessiner (surf) la couleur de la ligne au format (r,v,b) (tuple de 3 nombres compris entre 0 et 255), ici on a une ligne blanche avec (255,255,255) coordonn\u00e9es du point de d\u00e9part : tuple (x,y). Ici notre point de d\u00e9part a pour coordonn\u00e9es (10,20) coordonn\u00e9es du point d'arriv\u00e9e' : tuple (x,y). Ici notre point d'arriv\u00e9e a pour coordonn\u00e9es (150,200) \u00e9paisseur de la ligne. Ici nous avons une \u00e9paisseur de 2 pixels ATTENTION : le point de coordonn\u00e9es (0,0) est en haut et \u00e0 gauche de la fen\u00eatre La ligne \"pygame.display.flip()\" indique \u00e0 Pygame qu'il faut afficher tout ce qui doit \u00eatre affich\u00e9 (cette ligne est n\u00e9cessaire \u00e0 partir du moment o\u00f9 vous cherchez \u00e0 dessiner quelque chose) Il est aussi possible de dessiner des cercles : projet 2.4 Saisissez, analysez et testez ce code import pygame surf = pygame.display.set_mode((800,600)) run = True while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False pygame.draw.circle(surf, (255,0,0), (400, 300), 30, 2) pygame.display.flip() pygame.quit() La ligne \"pygame.draw.circle(...)\" permet d'afficher un cercle, la m\u00e9thode \"circle\" prend en param\u00e8tres : la surface sur laquelle nous allons dessiner (surf) la couleur de la ligne au format (r,v,b) (tuple de 3 nombres compris entre 0 et 255), ici on a un cercle rouge avec (255,0,0) coordonn\u00e9es du centre du cercle : tuple (x,y). Ici le centre du cercle a pour coordonn\u00e9es (400,300) rayon du cercle. Ici notre rayon est de 30 pixels \u00e9paisseur de la ligne. Ici nous avons une \u00e9paisseur de 2 pixels Il est possible de dessiner d'autres formes : rectangle, polygone, ellipse... Pour en savoir plus, n'h\u00e9sitez pas \u00e0 consulter la documentation de Pygame Il est possible de cr\u00e9er des animations dans Pygame : Nous allons d\u00e9placer notre cercle en modifiant ces coordonn\u00e9es \u00e0 chaque tour de boucle : projet 2.5 Saisissez, analysez et testez ce code import pygame surf = pygame.display.set_mode((800,600)) run = True posX = 50 while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False pygame.draw.circle(surf, (255,0,0), (posX, 300), 30, 2) posX = posX + 1 pygame.display.flip() pygame.quit() Comme vous pouvez le constater, nous avons un probl\u00e8me : les cercles pr\u00e9c\u00e9dents restent affich\u00e9s. Il faut donc effacer l'image pr\u00e9c\u00e9dente avant de pouvoir en afficher une nouvelle. projet 2.6 Saisissez, analysez et testez ce code import pygame surf = pygame.display.set_mode((800,600)) run = True posX = 50 while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False surf.fill((0,0,0)) pygame.draw.circle(surf, (255,0,0), (posX, 300), 30, 2) posX = posX + 1 pygame.display.flip() pygame.quit() la ligne \"surf.fill((0,0,0))\" permet d'effacer l'\u00e9cran avant de r\u00e9afficher le cercle \u00e0 une position diff\u00e9rente. \"fill\" prend en param\u00e8tre un tuple qui permet de d\u00e9finir la couleur de fond de la surface (ici avec (0,0,0) nous avons du noir en arri\u00e8re-plan). Il est important de bien comprendre que m\u00eame si vous n'avez pas d'animation \u00e0 g\u00e9rer, il est important d'effacer la surface avant d'afficher une nouvelle image. Nous utiliserons donc syst\u00e9matiquement le 'fill'. Il est relativement simple d'avoir une balle qui rebondit sur le bord de l'\u00e9cran : projet 2.7 Saisissez, analysez et testez ce code import pygame surf = pygame.display.set_mode((800,600)) run = True posX = 50 vx = 1 while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False surf.fill((0,0,0)) pygame.draw.circle(surf, (255,0,0), (posX, 300), 30, 2) if posX>770 or posX<30 : vx=-vx posX = posX + vx pygame.display.flip() pygame.quit() Le syst\u00e8me essaye d'ex\u00e9cuter le plus grand nombre de fois possible la \"boucle de jeu\". Sachant que plus votre microprocesseur est rapide et plus le nombre d'ex\u00e9cutions de la \"boucle de jeu\" par seconde sera grand, vous risquez d'avoir un jeu qui ne tournera pas du tout de la m\u00eame fa\u00e7on sur 2 machines diff\u00e9rentes. Pour \u00e9viter cet inconv\u00e9nient, il est possible de limiter le nombre d'ex\u00e9cutions de la \"boucle de jeu\" par seconde : projet 2.8 Saisissez, analysez et testez ce code import pygame surf = pygame.display.set_mode((800,600)) run = True posX = 50 vx = 1 clock=pygame.time.Clock() while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False clock.tick(60) surf.fill((0,0,0)) pygame.draw.circle(surf, (255,0,0), (posX, 300), 30, 2) if posX>770 or posX<30 : vx=-vx posX = posX + vx pygame.display.flip() pygame.quit() Nous avons ajout\u00e9 2 lignes afin de contr\u00f4ler le nombre d'ex\u00e9cutions de la \"boucle de jeu\" par seconde : \"clock=pygame.time.Clock()\" permet de d\u00e9finir un syst\u00e8me d'horloge \"clock.tick(60)\" permet de limiter le nombre d'ex\u00e9cutions de la \"boucle de jeu\" \u00e0 60 par seconde (nous aurons donc une fr\u00e9quence d'affichage de 60 images par seconde) Ce syst\u00e8me de limitation est surtout important si vous avez \u00e0 g\u00e9rer des animations. Pygame permet d'afficher des images relativement simplement : Commencez par t\u00e9l\u00e9charger cette image . Placez-l\u00e0 dans votre r\u00e9pertoire courant (l\u00e0 o\u00f9 vous avez plac\u00e9 vos programmes Python Pygame) projet 2.9 Saisissez, analysez et testez ce code import pygame surf = pygame.display.set_mode((800,600)) run = True img = pygame.image.load(\"pyg.png\") while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False surf.fill((0,0,0)) surf.blit(img,(200,200)) pygame.display.flip() pygame.quit() L'affichage de l'image se fait en 2 \u00e9tapes : cr\u00e9ation d'un objet de type image (\"img\" dans notre exemple) \u00e0 l'aide de la m\u00e9thode \"load\". cette m\u00e9thode \"load\" prend un seul param\u00e8tre : l'url de l'image utilisation de la m\u00e9thode \"blit\" pour afficher l'image (la m\u00e9thode \"blit\" doit \u00eatre utilis\u00e9e dans la \"boucle de jeu\"). La m\u00e9thode \"blit\" prend 2 param\u00e8tres : l'objet image \u00e0 afficher (dans notre cas \"img\") et un tuple qui correspond aux coordonn\u00e9es du coin haut-gauche de l'image ((200,200) dans notre exemple) Comme d\u00e9j\u00e0 dit plus haut, il est possible de g\u00e9rer les \u00e9v\u00e9nements \"clavier\" et \"souris\" (utilisation du clavier et de la souris par l'utilisateur). Nous allons ici uniquement nous int\u00e9resser aux \u00e9v\u00e9nements \"souris\". Si vous avez besoin d'utiliser les \u00e9v\u00e9nements \"clavier\" n'h\u00e9sitez pas \u00e0 consulter la documentation de pygame. Il existe un \u00e9v\u00e9nement \"pygame.MOUSEBUTTONDOWN\" qui correspond \u00e0 un clic de souris. La m\u00e9thode \"get_pressed\" renvoie un tuple constitu\u00e9 de 3 \u00e9l\u00e9ments. En l'absence de clic de souris, ce tuple est (0,0,0). En cas de clic sur le bouton gauche de la souris le tuple est (1,0,0). En cas de clic sur le bouton central le tuple est (0,1,0). En cas de clic sur le bouton droit le tuple est (0,0,1) projet 2.10 Saisissez, analysez et testez ce code. Cliquez avec votre souris (clic gauche et clic droit) dans la fen\u00eatre pygame, observez attentivement la console import pygame surf = pygame.display.set_mode((800,600)) run = True while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False if event.type == pygame.MOUSEBUTTONDOWN : if pygame.mouse.get_pressed() == (1,0,0) : print (\"clic bouton gauche\") if pygame.mouse.get_pressed() == (0,0,1) : print (\"clic bouton droit\") surf.fill((0,0,0)) pygame.display.flip() pygame.quit() Il est aussi possible de r\u00e9cup\u00e9rer les coordonn\u00e9es du pointeur de la souris au moment du clic \u00e0 l'aide de la m\u00e9thode \"mouse.get_pos\". Cette m\u00e9thode renvoie un tuple (x,y) => coordonn\u00e9es du pointeur de la souris au moment du clic projet 2.11 Saisissez, analysez et testez ce code. Cliquez avec votre souris (clic gauche) dans la fen\u00eatre pygame, observez attentivement la console import pygame surf = pygame.display.set_mode((800,600)) run = True while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False if event.type == pygame.MOUSEBUTTONDOWN : if pygame.mouse.get_pressed() == (1,0,0) : pos = pygame.mouse.get_pos() print(pos) surf.fill((0,0,0)) pygame.display.flip() pygame.quit() Il est aussi possible de g\u00e9rer des \u00e9v\u00e9nements de type \"clavier\" : projet 2.12 Saisissez, analysez et testez ce code, observez la console lorsque vous appuyez sur les touches \"Entr\u00e9e\", \"Espace\" et \"A\" (vous pouvez aussi constater qu'il ne se passe rien quand ) import pygame surf = pygame.display.set_mode((800,600)) run = True while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False if event.type == pygame.KEYDOWN : if event.key == pygame.K_SPACE : print (\"vous avez appuy\u00e9 sur la touche espace\") elif event.key == pygame.K_a : print (\"vous avez appuy\u00e9 sur la touche A\") elif event.key == pygame.K_RETURN : print (\"vous avez appuy\u00e9 sur la touche Entr\u00e9e\") else : print (\"vous avez appuy\u00e9 sur une touche\") surf.fill((0,0,0)) pygame.display.flip() pygame.quit() Vous trouverez la liste compl\u00e8te des touches dans la documentation officielle de pygame. 2) jeu du morpion Vous en savez suffisamment sur la biblioth\u00e8que pygame pour pouvoir vous lancer dans la conception d'un jeu du morpion. Ce jeu se joue \u00e0 2 joueurs humains (la cr\u00e9ation d'une intelligence artificielle n'est pas au programme ! Sauf si vous \u00eates motiv\u00e9 !). Voici une vid\u00e9o qui vous montre ce que vous devez obtenir (d\u00e9monstration de 3 parties) : vid\u00e9o Les joueurs cliquent avec le bouton gauche de la souris pour ajouter les symboles (X ou O) dans les cases. Une fois la partie gagn\u00e9e par un des deux joueurs, les 3 symboles align\u00e9s deviennent rouges. Une fois la partie gagn\u00e9e, il est impossible d'ajouter de nouveaux symboles (X et O). Un appui sur la touche \"Entr\u00e9e\" doit permettre de reprendre le jeu \u00e0 z\u00e9ro.","title":"Projet 2 : jeu du morpion"},{"location":"pr2/#1-prise-en-main-de-pygame","text":"Quelques mots sur Pygame : Pygame est une biblioth\u00e8que libre multiplate-forme qui facilite le d\u00e9veloppement de jeux vid\u00e9o temps r\u00e9el avec le langage de programmation Python. Elle permet de programmer la partie multim\u00e9dia (graphismes, son et entr\u00e9es au clavier, \u00e0 la souris ou au joystick), sans se heurter aux difficult\u00e9s des langages de bas niveau. Pygame est distribu\u00e9e selon les termes de la licence GNU LGPL. (d'apr\u00e8s Wikip\u00e9dia) Avant de pouvoir s'attaquer \u00e0 la cr\u00e9ation du morpion proprement dit, il est n\u00e9cessaire de travailler sur les bases de l'utilisation de Pygame :","title":"1) prise en main de Pygame"},{"location":"pr2/#projet-21","text":"Saisissez, analysez et testez ce code : import pygame surf = pygame.display.set_mode((800,600)) pygame.quit() Quelques explications sur le code ci-dessus : la premi\u00e8re ligne permet d'importer la biblioth\u00e8que Pygame \"surf = pygame.display.set_mode((800, 600))\" permet de cr\u00e9er la \"surface\" pygame, cette \"surface\" aura pour dimension 800 pixels de large et 600 pixels de haut la derni\u00e8re ligne permet de quitter \"proprement\" votre programme Pygame (si vous omettez cette ligne vous risquez de vous retrouver bloqu\u00e9 avec une fen\u00eatre impossible \u00e0 fermer) Vous avez peut-\u00eatre remarqu\u00e9 qu'une fen\u00eatre s'ouvre et se referme quasi imm\u00e9diatement apr\u00e8s. Pourquoi ? L'interpr\u00e9teur Python ex\u00e9cute les instructions ligne apr\u00e8s ligne, une fois la derni\u00e8re ligne ex\u00e9cut\u00e9e, le programme est termin\u00e9 et la fen\u00eatre se ferme. Il faut donc emp\u00eacher la fen\u00eatre de se refermer, il faut donc emp\u00eacher le programme de se terminer. Pour cela nous allons employer une boucle. On appelle souvent cette boucle une \"boucle de jeu\"","title":"projet 2.1"},{"location":"pr2/#projet-22","text":"Saisissez, analysez et testez ce code : import pygame surf = pygame.display.set_mode((800,600)) run = True while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False pygame.quit() Nous avons bien notre boucle (\"while run\" avec au d\u00e9part run = True). Cette boucle ne peut pas continuer ind\u00e9finiment, il faut laisser \u00e0 l'utilisateur la possibilit\u00e9 de sortir du programme. Pour cela nous utilisons le gestionnaire d'\u00e9v\u00e9nements de Pygame : Pygame \"surveille\" tous les \u00e9v\u00e9nements qui pourraient survenir (principalement une action de l'utilisateur sur la souris ou sur le clavier). \"pygame.event.get()\" renvoie un tableau avec tous les \u00e9v\u00e9nements en cours, la boucle \"for\" permet de parcourir tous ces \u00e9v\u00e9nements. On retrouve ces \u00e9v\u00e9nements dans l'objet \"event\". Un des \u00e9v\u00e9nements possibles est \"le clic de souris sur la croix en haut \u00e0 gauche de la fen\u00eatre\" traduit par \"pygame.QUIT\". Si l'utilisateur clique sur \"la croix en haut \u00e0 gauche de la fen\u00eatre\", on \"entre\" dans le \"if\" et la variable \"run\" devient False : la \"boucle de jeu\" se termine, la ligne \"pygame.quit()\" est ex\u00e9cut\u00e9e, et le programme se termine. Il faut bien comprendre que la liste des \u00e9v\u00e9nements en cours est r\u00e9actualis\u00e9e en permanence gr\u00e2ce \u00e0 la \"boucle de jeu\" : les instructions contenues dans la boucle sont ex\u00e9cut\u00e9es des dizaines de fois par seconde, on a donc \"pygame.event.get()\" qui est ex\u00e9cut\u00e9e plusieurs dizaines de fois par seconde, la liste des \u00e9v\u00e9nements est donc mise \u00e0 jour plusieurs dizaines de fois par seconde ! On peut donc dire que les \u00e9v\u00e9nements (clavier et souris) sont \"surveill\u00e9s\" en \"permanence\" (m\u00eame si on devrait plut\u00f4t dire que les \u00e9v\u00e9nements sont \"control\u00e9s\" plusieurs dizaines de fois par seconde). Pygame permet de dessiner des formes diverses :","title":"projet 2.2"},{"location":"pr2/#projet-23","text":"Saisissez, analysez et testez ce code import pygame surf = pygame.display.set_mode((800,600)) run = True while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False pygame.draw.line(surf,(255,255,255),(10,20),(150,200),2) pygame.display.flip() pygame.quit() La ligne \"pygame.draw.line(...)\" permet d'afficher une ligne, la m\u00e9thode \"line\" prend en param\u00e8tres : la surface sur laquelle nous allons dessiner (surf) la couleur de la ligne au format (r,v,b) (tuple de 3 nombres compris entre 0 et 255), ici on a une ligne blanche avec (255,255,255) coordonn\u00e9es du point de d\u00e9part : tuple (x,y). Ici notre point de d\u00e9part a pour coordonn\u00e9es (10,20) coordonn\u00e9es du point d'arriv\u00e9e' : tuple (x,y). Ici notre point d'arriv\u00e9e a pour coordonn\u00e9es (150,200) \u00e9paisseur de la ligne. Ici nous avons une \u00e9paisseur de 2 pixels ATTENTION : le point de coordonn\u00e9es (0,0) est en haut et \u00e0 gauche de la fen\u00eatre La ligne \"pygame.display.flip()\" indique \u00e0 Pygame qu'il faut afficher tout ce qui doit \u00eatre affich\u00e9 (cette ligne est n\u00e9cessaire \u00e0 partir du moment o\u00f9 vous cherchez \u00e0 dessiner quelque chose) Il est aussi possible de dessiner des cercles :","title":"projet 2.3"},{"location":"pr2/#projet-24","text":"Saisissez, analysez et testez ce code import pygame surf = pygame.display.set_mode((800,600)) run = True while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False pygame.draw.circle(surf, (255,0,0), (400, 300), 30, 2) pygame.display.flip() pygame.quit() La ligne \"pygame.draw.circle(...)\" permet d'afficher un cercle, la m\u00e9thode \"circle\" prend en param\u00e8tres : la surface sur laquelle nous allons dessiner (surf) la couleur de la ligne au format (r,v,b) (tuple de 3 nombres compris entre 0 et 255), ici on a un cercle rouge avec (255,0,0) coordonn\u00e9es du centre du cercle : tuple (x,y). Ici le centre du cercle a pour coordonn\u00e9es (400,300) rayon du cercle. Ici notre rayon est de 30 pixels \u00e9paisseur de la ligne. Ici nous avons une \u00e9paisseur de 2 pixels Il est possible de dessiner d'autres formes : rectangle, polygone, ellipse... Pour en savoir plus, n'h\u00e9sitez pas \u00e0 consulter la documentation de Pygame Il est possible de cr\u00e9er des animations dans Pygame : Nous allons d\u00e9placer notre cercle en modifiant ces coordonn\u00e9es \u00e0 chaque tour de boucle :","title":"projet 2.4"},{"location":"pr2/#projet-25","text":"Saisissez, analysez et testez ce code import pygame surf = pygame.display.set_mode((800,600)) run = True posX = 50 while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False pygame.draw.circle(surf, (255,0,0), (posX, 300), 30, 2) posX = posX + 1 pygame.display.flip() pygame.quit() Comme vous pouvez le constater, nous avons un probl\u00e8me : les cercles pr\u00e9c\u00e9dents restent affich\u00e9s. Il faut donc effacer l'image pr\u00e9c\u00e9dente avant de pouvoir en afficher une nouvelle.","title":"projet 2.5"},{"location":"pr2/#projet-26","text":"Saisissez, analysez et testez ce code import pygame surf = pygame.display.set_mode((800,600)) run = True posX = 50 while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False surf.fill((0,0,0)) pygame.draw.circle(surf, (255,0,0), (posX, 300), 30, 2) posX = posX + 1 pygame.display.flip() pygame.quit() la ligne \"surf.fill((0,0,0))\" permet d'effacer l'\u00e9cran avant de r\u00e9afficher le cercle \u00e0 une position diff\u00e9rente. \"fill\" prend en param\u00e8tre un tuple qui permet de d\u00e9finir la couleur de fond de la surface (ici avec (0,0,0) nous avons du noir en arri\u00e8re-plan). Il est important de bien comprendre que m\u00eame si vous n'avez pas d'animation \u00e0 g\u00e9rer, il est important d'effacer la surface avant d'afficher une nouvelle image. Nous utiliserons donc syst\u00e9matiquement le 'fill'. Il est relativement simple d'avoir une balle qui rebondit sur le bord de l'\u00e9cran :","title":"projet 2.6"},{"location":"pr2/#projet-27","text":"Saisissez, analysez et testez ce code import pygame surf = pygame.display.set_mode((800,600)) run = True posX = 50 vx = 1 while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False surf.fill((0,0,0)) pygame.draw.circle(surf, (255,0,0), (posX, 300), 30, 2) if posX>770 or posX<30 : vx=-vx posX = posX + vx pygame.display.flip() pygame.quit() Le syst\u00e8me essaye d'ex\u00e9cuter le plus grand nombre de fois possible la \"boucle de jeu\". Sachant que plus votre microprocesseur est rapide et plus le nombre d'ex\u00e9cutions de la \"boucle de jeu\" par seconde sera grand, vous risquez d'avoir un jeu qui ne tournera pas du tout de la m\u00eame fa\u00e7on sur 2 machines diff\u00e9rentes. Pour \u00e9viter cet inconv\u00e9nient, il est possible de limiter le nombre d'ex\u00e9cutions de la \"boucle de jeu\" par seconde :","title":"projet 2.7"},{"location":"pr2/#projet-28","text":"Saisissez, analysez et testez ce code import pygame surf = pygame.display.set_mode((800,600)) run = True posX = 50 vx = 1 clock=pygame.time.Clock() while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False clock.tick(60) surf.fill((0,0,0)) pygame.draw.circle(surf, (255,0,0), (posX, 300), 30, 2) if posX>770 or posX<30 : vx=-vx posX = posX + vx pygame.display.flip() pygame.quit() Nous avons ajout\u00e9 2 lignes afin de contr\u00f4ler le nombre d'ex\u00e9cutions de la \"boucle de jeu\" par seconde : \"clock=pygame.time.Clock()\" permet de d\u00e9finir un syst\u00e8me d'horloge \"clock.tick(60)\" permet de limiter le nombre d'ex\u00e9cutions de la \"boucle de jeu\" \u00e0 60 par seconde (nous aurons donc une fr\u00e9quence d'affichage de 60 images par seconde) Ce syst\u00e8me de limitation est surtout important si vous avez \u00e0 g\u00e9rer des animations. Pygame permet d'afficher des images relativement simplement : Commencez par t\u00e9l\u00e9charger cette image . Placez-l\u00e0 dans votre r\u00e9pertoire courant (l\u00e0 o\u00f9 vous avez plac\u00e9 vos programmes Python Pygame)","title":"projet 2.8"},{"location":"pr2/#projet-29","text":"Saisissez, analysez et testez ce code import pygame surf = pygame.display.set_mode((800,600)) run = True img = pygame.image.load(\"pyg.png\") while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False surf.fill((0,0,0)) surf.blit(img,(200,200)) pygame.display.flip() pygame.quit() L'affichage de l'image se fait en 2 \u00e9tapes : cr\u00e9ation d'un objet de type image (\"img\" dans notre exemple) \u00e0 l'aide de la m\u00e9thode \"load\". cette m\u00e9thode \"load\" prend un seul param\u00e8tre : l'url de l'image utilisation de la m\u00e9thode \"blit\" pour afficher l'image (la m\u00e9thode \"blit\" doit \u00eatre utilis\u00e9e dans la \"boucle de jeu\"). La m\u00e9thode \"blit\" prend 2 param\u00e8tres : l'objet image \u00e0 afficher (dans notre cas \"img\") et un tuple qui correspond aux coordonn\u00e9es du coin haut-gauche de l'image ((200,200) dans notre exemple) Comme d\u00e9j\u00e0 dit plus haut, il est possible de g\u00e9rer les \u00e9v\u00e9nements \"clavier\" et \"souris\" (utilisation du clavier et de la souris par l'utilisateur). Nous allons ici uniquement nous int\u00e9resser aux \u00e9v\u00e9nements \"souris\". Si vous avez besoin d'utiliser les \u00e9v\u00e9nements \"clavier\" n'h\u00e9sitez pas \u00e0 consulter la documentation de pygame. Il existe un \u00e9v\u00e9nement \"pygame.MOUSEBUTTONDOWN\" qui correspond \u00e0 un clic de souris. La m\u00e9thode \"get_pressed\" renvoie un tuple constitu\u00e9 de 3 \u00e9l\u00e9ments. En l'absence de clic de souris, ce tuple est (0,0,0). En cas de clic sur le bouton gauche de la souris le tuple est (1,0,0). En cas de clic sur le bouton central le tuple est (0,1,0). En cas de clic sur le bouton droit le tuple est (0,0,1)","title":"projet 2.9"},{"location":"pr2/#projet-210","text":"Saisissez, analysez et testez ce code. Cliquez avec votre souris (clic gauche et clic droit) dans la fen\u00eatre pygame, observez attentivement la console import pygame surf = pygame.display.set_mode((800,600)) run = True while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False if event.type == pygame.MOUSEBUTTONDOWN : if pygame.mouse.get_pressed() == (1,0,0) : print (\"clic bouton gauche\") if pygame.mouse.get_pressed() == (0,0,1) : print (\"clic bouton droit\") surf.fill((0,0,0)) pygame.display.flip() pygame.quit() Il est aussi possible de r\u00e9cup\u00e9rer les coordonn\u00e9es du pointeur de la souris au moment du clic \u00e0 l'aide de la m\u00e9thode \"mouse.get_pos\". Cette m\u00e9thode renvoie un tuple (x,y) => coordonn\u00e9es du pointeur de la souris au moment du clic","title":"projet 2.10"},{"location":"pr2/#projet-211","text":"Saisissez, analysez et testez ce code. Cliquez avec votre souris (clic gauche) dans la fen\u00eatre pygame, observez attentivement la console import pygame surf = pygame.display.set_mode((800,600)) run = True while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False if event.type == pygame.MOUSEBUTTONDOWN : if pygame.mouse.get_pressed() == (1,0,0) : pos = pygame.mouse.get_pos() print(pos) surf.fill((0,0,0)) pygame.display.flip() pygame.quit() Il est aussi possible de g\u00e9rer des \u00e9v\u00e9nements de type \"clavier\" :","title":"projet 2.11"},{"location":"pr2/#projet-212","text":"Saisissez, analysez et testez ce code, observez la console lorsque vous appuyez sur les touches \"Entr\u00e9e\", \"Espace\" et \"A\" (vous pouvez aussi constater qu'il ne se passe rien quand ) import pygame surf = pygame.display.set_mode((800,600)) run = True while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False if event.type == pygame.KEYDOWN : if event.key == pygame.K_SPACE : print (\"vous avez appuy\u00e9 sur la touche espace\") elif event.key == pygame.K_a : print (\"vous avez appuy\u00e9 sur la touche A\") elif event.key == pygame.K_RETURN : print (\"vous avez appuy\u00e9 sur la touche Entr\u00e9e\") else : print (\"vous avez appuy\u00e9 sur une touche\") surf.fill((0,0,0)) pygame.display.flip() pygame.quit() Vous trouverez la liste compl\u00e8te des touches dans la documentation officielle de pygame.","title":"projet 2.12"},{"location":"pr2/#2-jeu-du-morpion","text":"Vous en savez suffisamment sur la biblioth\u00e8que pygame pour pouvoir vous lancer dans la conception d'un jeu du morpion. Ce jeu se joue \u00e0 2 joueurs humains (la cr\u00e9ation d'une intelligence artificielle n'est pas au programme ! Sauf si vous \u00eates motiv\u00e9 !). Voici une vid\u00e9o qui vous montre ce que vous devez obtenir (d\u00e9monstration de 3 parties) : vid\u00e9o Les joueurs cliquent avec le bouton gauche de la souris pour ajouter les symboles (X ou O) dans les cases. Une fois la partie gagn\u00e9e par un des deux joueurs, les 3 symboles align\u00e9s deviennent rouges. Une fois la partie gagn\u00e9e, il est impossible d'ajouter de nouveaux symboles (X et O). Un appui sur la touche \"Entr\u00e9e\" doit permettre de reprendre le jeu \u00e0 z\u00e9ro.","title":"2) jeu du morpion"},{"location":"pr3/","text":"Dans ce projet nous allons tenter de cr\u00e9er un jeu du morpion ( article sur Wikip\u00e9dia sur le jeu du morpion si n\u00e9cessaire ) \u00e0 l'aide de la biblioth\u00e8que Pygame. 1) prise en main de Pygame Quelques mots sur Pygame : Pygame est une biblioth\u00e8que libre multiplate-forme qui facilite le d\u00e9veloppement de jeux vid\u00e9o temps r\u00e9el avec le langage de programmation Python. Elle permet de programmer la partie multim\u00e9dia (graphismes, son et entr\u00e9es au clavier, \u00e0 la souris ou au joystick), sans se heurter aux difficult\u00e9s des langages de bas niveau. Pygame est distribu\u00e9e selon les termes de la licence GNU LGPL. (d'apr\u00e8s Wikip\u00e9dia) Avant de pouvoir s'attaquer \u00e0 la cr\u00e9ation du morpion proprement dit, il est n\u00e9cessaire de travailler sur les bases de l'utilisation de Pygame : projet 2.1 Saisissez, analysez et testez ce code : import pygame surf = pygame.display.set_mode((800,600)) pygame.quit() Quelques explications sur le code ci-dessus : la premi\u00e8re ligne permet d'importer la biblioth\u00e8que Pygame \"surf = pygame.display.set_mode((800, 600))\" permet de cr\u00e9er la \"surface\" pygame, cette \"surface\" aura pour dimension 800 pixels de large et 600 pixels de haut la derni\u00e8re ligne permet de quitter \"proprement\" votre programme Pygame (si vous omettez cette ligne vous risquez de vous retrouver bloqu\u00e9 avec une fen\u00eatre impossible \u00e0 fermer) Vous avez peut-\u00eatre remarqu\u00e9 qu'une fen\u00eatre s'ouvre et se referme quasi imm\u00e9diatement apr\u00e8s. Pourquoi ? L'interpr\u00e9teur Python ex\u00e9cute les instructions ligne apr\u00e8s ligne, une fois la derni\u00e8re ligne ex\u00e9cut\u00e9e, le programme est termin\u00e9 et la fen\u00eatre se ferme. Il faut donc emp\u00eacher la fen\u00eatre de se refermer, il faut donc emp\u00eacher le programme de se terminer. Pour cela nous allons employer une boucle. On appelle souvent cette boucle une \"boucle de jeu\" projet 2.2 Saisissez, analysez et testez ce code : import pygame surf = pygame.display.set_mode((800,600)) run = True while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False pygame.quit() Nous avons bien notre boucle (\"while run\" avec au d\u00e9part run = True). Cette boucle ne peut pas continuer ind\u00e9finiment, il faut laisser \u00e0 l'utilisateur la possibilit\u00e9 de sortir du programme. Pour cela nous utilisons le gestionnaire d'\u00e9v\u00e9nements de Pygame : Pygame \"surveille\" tous les \u00e9v\u00e9nements qui pourraient survenir (principalement une action de l'utilisateur sur la souris ou sur le clavier). \"pygame.event.get()\" renvoie un tableau avec tous les \u00e9v\u00e9nements en cours, la boucle \"for\" permet de parcourir tous ces \u00e9v\u00e9nements. On retrouve ces \u00e9v\u00e9nements dans l'objet \"event\". Un des \u00e9v\u00e9nements possibles est \"le clic de souris sur la croix en haut \u00e0 gauche de la fen\u00eatre\" traduit par \"pygame.QUIT\". Si l'utilisateur clique sur \"la croix en haut \u00e0 gauche de la fen\u00eatre\", on \"entre\" dans le \"if\" et la variable \"run\" devient False : la \"boucle de jeu\" se termine, la ligne \"pygame.quit()\" est ex\u00e9cut\u00e9e, et le programme se termine. Il faut bien comprendre que la liste des \u00e9v\u00e9nements en cours est r\u00e9actualis\u00e9e en permanence gr\u00e2ce \u00e0 la \"boucle de jeu\" : les instructions contenues dans la boucle sont ex\u00e9cut\u00e9es des dizaines de fois par seconde, on a donc \"pygame.event.get()\" qui est ex\u00e9cut\u00e9e plusieurs dizaines de fois par seconde, la liste des \u00e9v\u00e9nements est donc mise \u00e0 jour plusieurs dizaines de fois par seconde ! On peut donc dire que les \u00e9v\u00e9nements (clavier et souris) sont \"surveill\u00e9s\" en \"permanence\" (m\u00eame si on devrait plut\u00f4t dire que les \u00e9v\u00e9nements sont \"control\u00e9s\" plusieurs dizaines de fois par seconde). Pygame permet de dessiner des formes diverses : projet 2.3 Saisissez, analysez et testez ce code import pygame surf = pygame.display.set_mode((800,600)) run = True while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False pygame.draw.line(surf,(255,255,255),(10,20),(150,200),2) pygame.display.flip() pygame.quit() La ligne \"pygame.draw.line(...)\" permet d'afficher une ligne, la m\u00e9thode \"line\" prend en param\u00e8tres : la surface sur laquelle nous allons dessiner (surf) la couleur de la ligne au format (r,v,b) (tuple de 3 nombres compris entre 0 et 255), ici on a une ligne blanche avec (255,255,255) coordonn\u00e9es du point de d\u00e9part : tuple (x,y). Ici notre point de d\u00e9part a pour coordonn\u00e9es (10,20) coordonn\u00e9es du point d'arriv\u00e9e' : tuple (x,y). Ici notre point d'arriv\u00e9e a pour coordonn\u00e9es (150,200) \u00e9paisseur de la ligne. Ici nous avons une \u00e9paisseur de 2 pixels ATTENTION : le point de coordonn\u00e9es (0,0) est en haut et \u00e0 gauche de la fen\u00eatre La ligne \"pygame.display.flip()\" indique \u00e0 Pygame qu'il faut afficher tout ce qui doit \u00eatre affich\u00e9 (cette ligne est n\u00e9cessaire \u00e0 partir du moment o\u00f9 vous cherchez \u00e0 dessiner quelque chose) Il est aussi possible de dessiner des cercles : projet 2.4 Saisissez, analysez et testez ce code import pygame surf = pygame.display.set_mode((800,600)) run = True while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False pygame.draw.circle(surf, (255,0,0), (400, 300), 30, 2) pygame.display.flip() pygame.quit() La ligne \"pygame.draw.circle(...)\" permet d'afficher un cercle, la m\u00e9thode \"circle\" prend en param\u00e8tres : la surface sur laquelle nous allons dessiner (surf) la couleur de la ligne au format (r,v,b) (tuple de 3 nombres compris entre 0 et 255), ici on a un cercle rouge avec (255,0,0) coordonn\u00e9es du centre du cercle : tuple (x,y). Ici le centre du cercle a pour coordonn\u00e9es (400,300) rayon du cercle. Ici notre rayon est de 30 pixels \u00e9paisseur de la ligne. Ici nous avons une \u00e9paisseur de 2 pixels Il est possible de dessiner d'autres formes : rectangle, polygone, ellipse... Pour en savoir plus, n'h\u00e9sitez pas \u00e0 consulter la documentation de Pygame Il est possible de cr\u00e9er des animations dans Pygame : Nous allons d\u00e9placer notre cercle en modifiant ces coordonn\u00e9es \u00e0 chaque tour de boucle : projet 2.5 Saisissez, analysez et testez ce code import pygame surf = pygame.display.set_mode((800,600)) run = True posX = 50 while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False pygame.draw.circle(surf, (255,0,0), (posX, 300), 30, 2) posX = posX + 1 pygame.display.flip() pygame.quit() Comme vous pouvez le constater, nous avons un probl\u00e8me : les cercles pr\u00e9c\u00e9dents restent affich\u00e9s. Il faut donc effacer l'image pr\u00e9c\u00e9dente avant de pouvoir en afficher une nouvelle. projet 2.6 Saisissez, analysez et testez ce code import pygame surf = pygame.display.set_mode((800,600)) run = True posX = 50 while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False surf.fill((0,0,0)) pygame.draw.circle(surf, (255,0,0), (posX, 300), 30, 2) posX = posX + 1 pygame.display.flip() pygame.quit() la ligne \"surf.fill((0,0,0))\" permet d'effacer l'\u00e9cran avant de r\u00e9afficher le cercle \u00e0 une position diff\u00e9rente. \"fill\" prend en param\u00e8tre un tuple qui permet de d\u00e9finir la couleur de fond de la surface (ici avec (0,0,0) nous avons du noir en arri\u00e8re-plan). Il est important de bien comprendre que m\u00eame si vous n'avez pas d'animation \u00e0 g\u00e9rer, il est important d'effacer la surface avant d'afficher une nouvelle image. Nous utiliserons donc syst\u00e9matiquement le 'fill'. Il est relativement simple d'avoir une balle qui rebondit sur le bord de l'\u00e9cran : projet 2.7 Saisissez, analysez et testez ce code import pygame surf = pygame.display.set_mode((800,600)) run = True posX = 50 vx = 1 while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False surf.fill((0,0,0)) pygame.draw.circle(surf, (255,0,0), (posX, 300), 30, 2) if posX>770 or posX<30 : vx=-vx posX = posX + vx pygame.display.flip() pygame.quit() Le syst\u00e8me essaye d'ex\u00e9cuter le plus grand nombre de fois possible la \"boucle de jeu\". Sachant que plus votre microprocesseur est rapide et plus le nombre d'ex\u00e9cutions de la \"boucle de jeu\" par seconde sera grand, vous risquez d'avoir un jeu qui ne tournera pas du tout de la m\u00eame fa\u00e7on sur 2 machines diff\u00e9rentes. Pour \u00e9viter cet inconv\u00e9nient, il est possible de limiter le nombre d'ex\u00e9cutions de la \"boucle de jeu\" par seconde : projet 2.8 Saisissez, analysez et testez ce code import pygame surf = pygame.display.set_mode((800,600)) run = True posX = 50 vx = 1 clock=pygame.time.Clock() while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False clock.tick(60) surf.fill((0,0,0)) pygame.draw.circle(surf, (255,0,0), (posX, 300), 30, 2) if posX>770 or posX<30 : vx=-vx posX = posX + vx pygame.display.flip() pygame.quit() Nous avons ajout\u00e9 2 lignes afin de contr\u00f4ler le nombre d'ex\u00e9cutions de la \"boucle de jeu\" par seconde : \"clock=pygame.time.Clock()\" permet de d\u00e9finir un syst\u00e8me d'horloge \"clock.tick(60)\" permet de limiter le nombre d'ex\u00e9cutions de la \"boucle de jeu\" \u00e0 60 par seconde (nous aurons donc une fr\u00e9quence d'affichage de 60 images par seconde) Ce syst\u00e8me de limitation est surtout important si vous avez \u00e0 g\u00e9rer des animations. Pygame permet d'afficher des images relativement simplement : Commencez par t\u00e9l\u00e9charger cette image . Placez-l\u00e0 dans votre r\u00e9pertoire courant (l\u00e0 o\u00f9 vous avez plac\u00e9 vos programmes Python Pygame) projet 2.9 Saisissez, analysez et testez ce code import pygame surf = pygame.display.set_mode((800,600)) run = True img = pygame.image.load(\"pyg.png\") while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False surf.fill((0,0,0)) surf.blit(img,(200,200)) pygame.display.flip() pygame.quit() L'affichage de l'image se fait en 2 \u00e9tapes : cr\u00e9ation d'un objet de type image (\"img\" dans notre exemple) \u00e0 l'aide de la m\u00e9thode \"load\". cette m\u00e9thode \"load\" prend un seul param\u00e8tre : l'url de l'image utilisation de la m\u00e9thode \"blit\" pour afficher l'image (la m\u00e9thode \"blit\" doit \u00eatre utilis\u00e9e dans la \"boucle de jeu\"). La m\u00e9thode \"blit\" prend 2 param\u00e8tres : l'objet image \u00e0 afficher (dans notre cas \"img\") et un tuple qui correspond aux coordonn\u00e9es du coin haut-gauche de l'image ((200,200) dans notre exemple) Comme d\u00e9j\u00e0 dit plus haut, il est possible de g\u00e9rer les \u00e9v\u00e9nements \"clavier\" et \"souris\" (utilisation du clavier et de la souris par l'utilisateur). Nous allons ici uniquement nous int\u00e9resser aux \u00e9v\u00e9nements \"souris\". Si vous avez besoin d'utiliser les \u00e9v\u00e9nements \"clavier\" n'h\u00e9sitez pas \u00e0 consulter la documentation de pygame. Il existe un \u00e9v\u00e9nement \"pygame.MOUSEBUTTONDOWN\" qui correspond \u00e0 un clic de souris. La m\u00e9thode \"get_pressed\" renvoie un tuple constitu\u00e9 de 3 \u00e9l\u00e9ments. En l'absence de clic de souris, ce tuple est (0,0,0). En cas de clic sur le bouton gauche de la souris le tuple est (1,0,0). En cas de clic sur le bouton central le tuple est (0,1,0). En cas de clic sur le bouton droit le tuple est (0,0,1) projet 2.10 Saisissez, analysez et testez ce code. Cliquez avec votre souris (clic gauche et clic droit) dans la fen\u00eatre pygame, observez attentivement la console import pygame surf = pygame.display.set_mode((800,600)) run = True while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False if event.type == pygame.MOUSEBUTTONDOWN : if pygame.mouse.get_pressed() == (1,0,0) : print (\"clic bouton gauche\") if pygame.mouse.get_pressed() == (0,0,1) : print (\"clic bouton droit\") surf.fill((0,0,0)) pygame.display.flip() pygame.quit() Il est aussi possible de r\u00e9cup\u00e9rer les coordonn\u00e9es du pointeur de la souris au moment du clic \u00e0 l'aide de la m\u00e9thode \"mouse.get_pos\". Cette m\u00e9thode renvoie un tuple (x,y) => coordonn\u00e9es du pointeur de la souris au moment du clic projet 2.11 Saisissez, analysez et testez ce code. Cliquez avec votre souris (clic gauche) dans la fen\u00eatre pygame, observez attentivement la console import pygame surf = pygame.display.set_mode((800,600)) run = True while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False if event.type == pygame.MOUSEBUTTONDOWN : if pygame.mouse.get_pressed() == (1,0,0) : pos = pygame.mouse.get_pos() print(pos) surf.fill((0,0,0)) pygame.display.flip() pygame.quit() Il est aussi possible de g\u00e9rer des \u00e9v\u00e9nements de type \"clavier\" : projet 2.12 Saisissez, analysez et testez ce code, observez la console lorsque vous appuyez sur les touches \"Entr\u00e9e\", \"Espace\" et \"A\" (vous pouvez aussi constater qu'il ne se passe rien quand ) import pygame surf = pygame.display.set_mode((800,600)) run = True while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False if event.type == pygame.KEYDOWN : if event.key == pygame.K_SPACE : print (\"vous avez appuy\u00e9 sur la touche espace\") elif event.key == pygame.K_a : print (\"vous avez appuy\u00e9 sur la touche A\") elif event.key == pygame.K_RETURN : print (\"vous avez appuy\u00e9 sur la touche Entr\u00e9e\") else : print (\"vous avez appuy\u00e9 sur une touche\") surf.fill((0,0,0)) pygame.display.flip() pygame.quit() Vous trouverez la liste compl\u00e8te des touches dans la documentation officielle de pygame. 2) jeu du morpion Vous en savez suffisamment sur la biblioth\u00e8que pygame pour pouvoir vous lancer dans la conception d'un jeu du morpion. Ce jeu se joue \u00e0 2 joueurs humains (la cr\u00e9ation d'une intelligence artificielle n'est pas au programme ! Sauf si vous \u00eates motiv\u00e9 !). Voici une vid\u00e9o qui vous montre ce que vous devez obtenir (d\u00e9monstration de 3 parties) : vid\u00e9o Les joueurs cliquent avec le bouton gauche de la souris pour ajouter les symboles (X ou O) dans les cases. Une fois la partie gagn\u00e9e par un des deux joueurs, les 3 symboles align\u00e9s deviennent rouges. Une fois la partie gagn\u00e9e, il est impossible d'ajouter de nouveaux symboles (X et O). Un appui sur la touche \"Entr\u00e9e\" doit permettre de reprendre le jeu \u00e0 z\u00e9ro.","title":"Pr3"},{"location":"pr3/#1-prise-en-main-de-pygame","text":"Quelques mots sur Pygame : Pygame est une biblioth\u00e8que libre multiplate-forme qui facilite le d\u00e9veloppement de jeux vid\u00e9o temps r\u00e9el avec le langage de programmation Python. Elle permet de programmer la partie multim\u00e9dia (graphismes, son et entr\u00e9es au clavier, \u00e0 la souris ou au joystick), sans se heurter aux difficult\u00e9s des langages de bas niveau. Pygame est distribu\u00e9e selon les termes de la licence GNU LGPL. (d'apr\u00e8s Wikip\u00e9dia) Avant de pouvoir s'attaquer \u00e0 la cr\u00e9ation du morpion proprement dit, il est n\u00e9cessaire de travailler sur les bases de l'utilisation de Pygame :","title":"1) prise en main de Pygame"},{"location":"pr3/#projet-21","text":"Saisissez, analysez et testez ce code : import pygame surf = pygame.display.set_mode((800,600)) pygame.quit() Quelques explications sur le code ci-dessus : la premi\u00e8re ligne permet d'importer la biblioth\u00e8que Pygame \"surf = pygame.display.set_mode((800, 600))\" permet de cr\u00e9er la \"surface\" pygame, cette \"surface\" aura pour dimension 800 pixels de large et 600 pixels de haut la derni\u00e8re ligne permet de quitter \"proprement\" votre programme Pygame (si vous omettez cette ligne vous risquez de vous retrouver bloqu\u00e9 avec une fen\u00eatre impossible \u00e0 fermer) Vous avez peut-\u00eatre remarqu\u00e9 qu'une fen\u00eatre s'ouvre et se referme quasi imm\u00e9diatement apr\u00e8s. Pourquoi ? L'interpr\u00e9teur Python ex\u00e9cute les instructions ligne apr\u00e8s ligne, une fois la derni\u00e8re ligne ex\u00e9cut\u00e9e, le programme est termin\u00e9 et la fen\u00eatre se ferme. Il faut donc emp\u00eacher la fen\u00eatre de se refermer, il faut donc emp\u00eacher le programme de se terminer. Pour cela nous allons employer une boucle. On appelle souvent cette boucle une \"boucle de jeu\"","title":"projet 2.1"},{"location":"pr3/#projet-22","text":"Saisissez, analysez et testez ce code : import pygame surf = pygame.display.set_mode((800,600)) run = True while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False pygame.quit() Nous avons bien notre boucle (\"while run\" avec au d\u00e9part run = True). Cette boucle ne peut pas continuer ind\u00e9finiment, il faut laisser \u00e0 l'utilisateur la possibilit\u00e9 de sortir du programme. Pour cela nous utilisons le gestionnaire d'\u00e9v\u00e9nements de Pygame : Pygame \"surveille\" tous les \u00e9v\u00e9nements qui pourraient survenir (principalement une action de l'utilisateur sur la souris ou sur le clavier). \"pygame.event.get()\" renvoie un tableau avec tous les \u00e9v\u00e9nements en cours, la boucle \"for\" permet de parcourir tous ces \u00e9v\u00e9nements. On retrouve ces \u00e9v\u00e9nements dans l'objet \"event\". Un des \u00e9v\u00e9nements possibles est \"le clic de souris sur la croix en haut \u00e0 gauche de la fen\u00eatre\" traduit par \"pygame.QUIT\". Si l'utilisateur clique sur \"la croix en haut \u00e0 gauche de la fen\u00eatre\", on \"entre\" dans le \"if\" et la variable \"run\" devient False : la \"boucle de jeu\" se termine, la ligne \"pygame.quit()\" est ex\u00e9cut\u00e9e, et le programme se termine. Il faut bien comprendre que la liste des \u00e9v\u00e9nements en cours est r\u00e9actualis\u00e9e en permanence gr\u00e2ce \u00e0 la \"boucle de jeu\" : les instructions contenues dans la boucle sont ex\u00e9cut\u00e9es des dizaines de fois par seconde, on a donc \"pygame.event.get()\" qui est ex\u00e9cut\u00e9e plusieurs dizaines de fois par seconde, la liste des \u00e9v\u00e9nements est donc mise \u00e0 jour plusieurs dizaines de fois par seconde ! On peut donc dire que les \u00e9v\u00e9nements (clavier et souris) sont \"surveill\u00e9s\" en \"permanence\" (m\u00eame si on devrait plut\u00f4t dire que les \u00e9v\u00e9nements sont \"control\u00e9s\" plusieurs dizaines de fois par seconde). Pygame permet de dessiner des formes diverses :","title":"projet 2.2"},{"location":"pr3/#projet-23","text":"Saisissez, analysez et testez ce code import pygame surf = pygame.display.set_mode((800,600)) run = True while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False pygame.draw.line(surf,(255,255,255),(10,20),(150,200),2) pygame.display.flip() pygame.quit() La ligne \"pygame.draw.line(...)\" permet d'afficher une ligne, la m\u00e9thode \"line\" prend en param\u00e8tres : la surface sur laquelle nous allons dessiner (surf) la couleur de la ligne au format (r,v,b) (tuple de 3 nombres compris entre 0 et 255), ici on a une ligne blanche avec (255,255,255) coordonn\u00e9es du point de d\u00e9part : tuple (x,y). Ici notre point de d\u00e9part a pour coordonn\u00e9es (10,20) coordonn\u00e9es du point d'arriv\u00e9e' : tuple (x,y). Ici notre point d'arriv\u00e9e a pour coordonn\u00e9es (150,200) \u00e9paisseur de la ligne. Ici nous avons une \u00e9paisseur de 2 pixels ATTENTION : le point de coordonn\u00e9es (0,0) est en haut et \u00e0 gauche de la fen\u00eatre La ligne \"pygame.display.flip()\" indique \u00e0 Pygame qu'il faut afficher tout ce qui doit \u00eatre affich\u00e9 (cette ligne est n\u00e9cessaire \u00e0 partir du moment o\u00f9 vous cherchez \u00e0 dessiner quelque chose) Il est aussi possible de dessiner des cercles :","title":"projet 2.3"},{"location":"pr3/#projet-24","text":"Saisissez, analysez et testez ce code import pygame surf = pygame.display.set_mode((800,600)) run = True while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False pygame.draw.circle(surf, (255,0,0), (400, 300), 30, 2) pygame.display.flip() pygame.quit() La ligne \"pygame.draw.circle(...)\" permet d'afficher un cercle, la m\u00e9thode \"circle\" prend en param\u00e8tres : la surface sur laquelle nous allons dessiner (surf) la couleur de la ligne au format (r,v,b) (tuple de 3 nombres compris entre 0 et 255), ici on a un cercle rouge avec (255,0,0) coordonn\u00e9es du centre du cercle : tuple (x,y). Ici le centre du cercle a pour coordonn\u00e9es (400,300) rayon du cercle. Ici notre rayon est de 30 pixels \u00e9paisseur de la ligne. Ici nous avons une \u00e9paisseur de 2 pixels Il est possible de dessiner d'autres formes : rectangle, polygone, ellipse... Pour en savoir plus, n'h\u00e9sitez pas \u00e0 consulter la documentation de Pygame Il est possible de cr\u00e9er des animations dans Pygame : Nous allons d\u00e9placer notre cercle en modifiant ces coordonn\u00e9es \u00e0 chaque tour de boucle :","title":"projet 2.4"},{"location":"pr3/#projet-25","text":"Saisissez, analysez et testez ce code import pygame surf = pygame.display.set_mode((800,600)) run = True posX = 50 while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False pygame.draw.circle(surf, (255,0,0), (posX, 300), 30, 2) posX = posX + 1 pygame.display.flip() pygame.quit() Comme vous pouvez le constater, nous avons un probl\u00e8me : les cercles pr\u00e9c\u00e9dents restent affich\u00e9s. Il faut donc effacer l'image pr\u00e9c\u00e9dente avant de pouvoir en afficher une nouvelle.","title":"projet 2.5"},{"location":"pr3/#projet-26","text":"Saisissez, analysez et testez ce code import pygame surf = pygame.display.set_mode((800,600)) run = True posX = 50 while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False surf.fill((0,0,0)) pygame.draw.circle(surf, (255,0,0), (posX, 300), 30, 2) posX = posX + 1 pygame.display.flip() pygame.quit() la ligne \"surf.fill((0,0,0))\" permet d'effacer l'\u00e9cran avant de r\u00e9afficher le cercle \u00e0 une position diff\u00e9rente. \"fill\" prend en param\u00e8tre un tuple qui permet de d\u00e9finir la couleur de fond de la surface (ici avec (0,0,0) nous avons du noir en arri\u00e8re-plan). Il est important de bien comprendre que m\u00eame si vous n'avez pas d'animation \u00e0 g\u00e9rer, il est important d'effacer la surface avant d'afficher une nouvelle image. Nous utiliserons donc syst\u00e9matiquement le 'fill'. Il est relativement simple d'avoir une balle qui rebondit sur le bord de l'\u00e9cran :","title":"projet 2.6"},{"location":"pr3/#projet-27","text":"Saisissez, analysez et testez ce code import pygame surf = pygame.display.set_mode((800,600)) run = True posX = 50 vx = 1 while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False surf.fill((0,0,0)) pygame.draw.circle(surf, (255,0,0), (posX, 300), 30, 2) if posX>770 or posX<30 : vx=-vx posX = posX + vx pygame.display.flip() pygame.quit() Le syst\u00e8me essaye d'ex\u00e9cuter le plus grand nombre de fois possible la \"boucle de jeu\". Sachant que plus votre microprocesseur est rapide et plus le nombre d'ex\u00e9cutions de la \"boucle de jeu\" par seconde sera grand, vous risquez d'avoir un jeu qui ne tournera pas du tout de la m\u00eame fa\u00e7on sur 2 machines diff\u00e9rentes. Pour \u00e9viter cet inconv\u00e9nient, il est possible de limiter le nombre d'ex\u00e9cutions de la \"boucle de jeu\" par seconde :","title":"projet 2.7"},{"location":"pr3/#projet-28","text":"Saisissez, analysez et testez ce code import pygame surf = pygame.display.set_mode((800,600)) run = True posX = 50 vx = 1 clock=pygame.time.Clock() while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False clock.tick(60) surf.fill((0,0,0)) pygame.draw.circle(surf, (255,0,0), (posX, 300), 30, 2) if posX>770 or posX<30 : vx=-vx posX = posX + vx pygame.display.flip() pygame.quit() Nous avons ajout\u00e9 2 lignes afin de contr\u00f4ler le nombre d'ex\u00e9cutions de la \"boucle de jeu\" par seconde : \"clock=pygame.time.Clock()\" permet de d\u00e9finir un syst\u00e8me d'horloge \"clock.tick(60)\" permet de limiter le nombre d'ex\u00e9cutions de la \"boucle de jeu\" \u00e0 60 par seconde (nous aurons donc une fr\u00e9quence d'affichage de 60 images par seconde) Ce syst\u00e8me de limitation est surtout important si vous avez \u00e0 g\u00e9rer des animations. Pygame permet d'afficher des images relativement simplement : Commencez par t\u00e9l\u00e9charger cette image . Placez-l\u00e0 dans votre r\u00e9pertoire courant (l\u00e0 o\u00f9 vous avez plac\u00e9 vos programmes Python Pygame)","title":"projet 2.8"},{"location":"pr3/#projet-29","text":"Saisissez, analysez et testez ce code import pygame surf = pygame.display.set_mode((800,600)) run = True img = pygame.image.load(\"pyg.png\") while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False surf.fill((0,0,0)) surf.blit(img,(200,200)) pygame.display.flip() pygame.quit() L'affichage de l'image se fait en 2 \u00e9tapes : cr\u00e9ation d'un objet de type image (\"img\" dans notre exemple) \u00e0 l'aide de la m\u00e9thode \"load\". cette m\u00e9thode \"load\" prend un seul param\u00e8tre : l'url de l'image utilisation de la m\u00e9thode \"blit\" pour afficher l'image (la m\u00e9thode \"blit\" doit \u00eatre utilis\u00e9e dans la \"boucle de jeu\"). La m\u00e9thode \"blit\" prend 2 param\u00e8tres : l'objet image \u00e0 afficher (dans notre cas \"img\") et un tuple qui correspond aux coordonn\u00e9es du coin haut-gauche de l'image ((200,200) dans notre exemple) Comme d\u00e9j\u00e0 dit plus haut, il est possible de g\u00e9rer les \u00e9v\u00e9nements \"clavier\" et \"souris\" (utilisation du clavier et de la souris par l'utilisateur). Nous allons ici uniquement nous int\u00e9resser aux \u00e9v\u00e9nements \"souris\". Si vous avez besoin d'utiliser les \u00e9v\u00e9nements \"clavier\" n'h\u00e9sitez pas \u00e0 consulter la documentation de pygame. Il existe un \u00e9v\u00e9nement \"pygame.MOUSEBUTTONDOWN\" qui correspond \u00e0 un clic de souris. La m\u00e9thode \"get_pressed\" renvoie un tuple constitu\u00e9 de 3 \u00e9l\u00e9ments. En l'absence de clic de souris, ce tuple est (0,0,0). En cas de clic sur le bouton gauche de la souris le tuple est (1,0,0). En cas de clic sur le bouton central le tuple est (0,1,0). En cas de clic sur le bouton droit le tuple est (0,0,1)","title":"projet 2.9"},{"location":"pr3/#projet-210","text":"Saisissez, analysez et testez ce code. Cliquez avec votre souris (clic gauche et clic droit) dans la fen\u00eatre pygame, observez attentivement la console import pygame surf = pygame.display.set_mode((800,600)) run = True while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False if event.type == pygame.MOUSEBUTTONDOWN : if pygame.mouse.get_pressed() == (1,0,0) : print (\"clic bouton gauche\") if pygame.mouse.get_pressed() == (0,0,1) : print (\"clic bouton droit\") surf.fill((0,0,0)) pygame.display.flip() pygame.quit() Il est aussi possible de r\u00e9cup\u00e9rer les coordonn\u00e9es du pointeur de la souris au moment du clic \u00e0 l'aide de la m\u00e9thode \"mouse.get_pos\". Cette m\u00e9thode renvoie un tuple (x,y) => coordonn\u00e9es du pointeur de la souris au moment du clic","title":"projet 2.10"},{"location":"pr3/#projet-211","text":"Saisissez, analysez et testez ce code. Cliquez avec votre souris (clic gauche) dans la fen\u00eatre pygame, observez attentivement la console import pygame surf = pygame.display.set_mode((800,600)) run = True while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False if event.type == pygame.MOUSEBUTTONDOWN : if pygame.mouse.get_pressed() == (1,0,0) : pos = pygame.mouse.get_pos() print(pos) surf.fill((0,0,0)) pygame.display.flip() pygame.quit() Il est aussi possible de g\u00e9rer des \u00e9v\u00e9nements de type \"clavier\" :","title":"projet 2.11"},{"location":"pr3/#projet-212","text":"Saisissez, analysez et testez ce code, observez la console lorsque vous appuyez sur les touches \"Entr\u00e9e\", \"Espace\" et \"A\" (vous pouvez aussi constater qu'il ne se passe rien quand ) import pygame surf = pygame.display.set_mode((800,600)) run = True while run : for event in pygame.event.get(): if event.type == pygame.QUIT: run = False if event.type == pygame.KEYDOWN : if event.key == pygame.K_SPACE : print (\"vous avez appuy\u00e9 sur la touche espace\") elif event.key == pygame.K_a : print (\"vous avez appuy\u00e9 sur la touche A\") elif event.key == pygame.K_RETURN : print (\"vous avez appuy\u00e9 sur la touche Entr\u00e9e\") else : print (\"vous avez appuy\u00e9 sur une touche\") surf.fill((0,0,0)) pygame.display.flip() pygame.quit() Vous trouverez la liste compl\u00e8te des touches dans la documentation officielle de pygame.","title":"projet 2.12"},{"location":"pr3/#2-jeu-du-morpion","text":"Vous en savez suffisamment sur la biblioth\u00e8que pygame pour pouvoir vous lancer dans la conception d'un jeu du morpion. Ce jeu se joue \u00e0 2 joueurs humains (la cr\u00e9ation d'une intelligence artificielle n'est pas au programme ! Sauf si vous \u00eates motiv\u00e9 !). Voici une vid\u00e9o qui vous montre ce que vous devez obtenir (d\u00e9monstration de 3 parties) : vid\u00e9o Les joueurs cliquent avec le bouton gauche de la souris pour ajouter les symboles (X ou O) dans les cases. Une fois la partie gagn\u00e9e par un des deux joueurs, les 3 symboles align\u00e9s deviennent rouges. Une fois la partie gagn\u00e9e, il est impossible d'ajouter de nouveaux symboles (X et O). Un appui sur la touche \"Entr\u00e9e\" doit permettre de reprendre le jeu \u00e0 z\u00e9ro.","title":"2) jeu du morpion"}]}